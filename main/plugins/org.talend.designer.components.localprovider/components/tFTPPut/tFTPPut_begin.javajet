<%@ jet 
  imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
    org.talend.core.model.process.IElementParameter
    org.talend.core.model.utils.NodeUtil 
  "
%>
<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/LogUtil.javajet"%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
LogUtil commonLog = new LogUtil(node);
String cid = node.getUniqueName();
String host = ElementParameterParser.getValue(node, "__HOST__");
String port = ElementParameterParser.getValue(node, "__PORT__");
String user = ElementParameterParser.getValue(node, "__USERNAME__");

boolean use_encoding = "true".equals(ElementParameterParser.getValue(node, "__USE_ENCODING__"));

String localdir = ElementParameterParser.getValue(node, "__LOCALDIR__");  
String remotedir = ElementParameterParser.getValue(node, "__REMOTEDIR__");
String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
String authMethod = ElementParameterParser.getValue(node, "__AUTH_METHOD__");
String privateKey = ElementParameterParser.getValue(node, "__PRIVATEKEY__");

List<Map<String, String>> files = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FILES__");  
boolean useProxy = ("true").equals(ElementParameterParser.getValue(node, "__USE_PROXY__"));
String proxyHost = ElementParameterParser.getValue(node, "__PROXY_HOST__");
String proxyPort = ElementParameterParser.getValue(node, "__PROXY_PORT__");
String proxyUser = ElementParameterParser.getValue(node, "__PROXY_USERNAME__");

String connectMode = ElementParameterParser.getValue(node, "__CONNECT_MODE__");
String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
String useExistingConn = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");
boolean moveToCurrentDir = ("true").equals(ElementParameterParser.getValue(node, "__MOVE_TO_THE_CURRENT_DIRECTORY__"));
boolean sftp = false;
boolean ftps = false; 

boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
String passwordFieldName = "";

if (("true").equals(useExistingConn)) {
  List<? extends INode> nodeList = node.getProcess().getGeneratingNodes();

  for (INode n : nodeList) {
    if (n.getUniqueName().equals(connection)) {
      sftp = ("true").equals(ElementParameterParser.getValue(n, "__SFTP__"));
      ftps = ("true").equals(ElementParameterParser.getValue(n, "__FTPS__")); 
    }
  }
} else {
  sftp = ("true").equals(ElementParameterParser.getValue(node, "__SFTP__"));
  ftps = ("true").equals(ElementParameterParser.getValue(node, "__FTPS__")); 
}  

//The following part support the socks proxy for FTP and SFTP (Socks V4 or V5, they are all OK). 
//And it can not work with the FTP proxy directly, only support the socks proxy.
if (useProxy) {
%>
  java.util.Properties props_<%=cid%> = System.getProperties();
  props_<%=cid%>.put("socksProxyPort", <%=proxyPort %>);
  props_<%=cid%>.put("socksProxyHost", <%=proxyHost %>);
  props_<%=cid%>.put("java.net.socks.username", <%=proxyUser %>);
  
<%
passwordFieldName = "__PROXY_PASSWORD__";
if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
%> 
  String decryptedProxyPassword_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
<%} else {%>
  String decryptedProxyPassword_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
<%}%>

  props_<%=cid%>.put("java.net.socks.password",decryptedProxyPassword_<%=cid%>);        
<%}%>
int nb_file_<%=cid%> = 0;

<%if (sftp) {%>// *** sftp *** //

	class MyProgressMonitor_<%=cid%> implements com.jcraft.jsch.SftpProgressMonitor {
		public void init(int op, String src, String dest, long max) {}
    	public boolean count(long count) { return true;}
    	public void end() {}
  	}

	<%if (("true").equals(useExistingConn)) {
    	String conn= "conn_" + connection;
    %>
    	com.jcraft.jsch.ChannelSftp c_<%=cid%> = (com.jcraft.jsch.ChannelSftp)globalMap.get("<%=conn %>");
		<%if(isLog4jEnabled){%>
			if(c_<%=cid%>!=null && c_<%=cid%>.getSession()!=null) {
				log.info("<%=cid%> - Uses an existing connection. Connection username " + c_<%=cid%>.getSession().getUserName() + ", Connection hostname: " + c_<%=cid%>.getSession().getHost() + ", Connection port: " + c_<%=cid%>.getSession().getPort() + "."); 
			}
		<%}%>
    	if(c_<%=cid%>.getHome()!=null && !c_<%=cid%>.getHome().equals(c_<%=cid%>.pwd())){
  			c_<%=cid%>.cd(c_<%=cid%>.getHome());
  		}
	<%} else {%>    
		class MyUserInfo_<%=cid %> implements com.jcraft.jsch.UserInfo, com.jcraft.jsch.UIKeyboardInteractive {
		
     	   <%
            passwordFieldName = "__PASSPHRASE__";
            if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
            %> 
          		String decryptedPassphrase_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
            <%} else {%>
          		String decryptedPassphrase_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
            <%}%>
		
			String passphrase_<%=cid %> = decryptedPassphrase_<%=cid%>;
			public String getPassphrase() { return passphrase_<%=cid %>; }
			public String getPassword() { return null; } 
			public boolean promptPassword(String arg0) { return true; } 
			public boolean promptPassphrase(String arg0) { return true; } 
			public boolean promptYesNo(String arg0) { return true; } 
      		public void showMessage(String arg0) { } 
      
			public String[] promptKeyboardInteractive(String destination, String name, String instruction, String[] prompt,
        	boolean[] echo) {
        	
        	<%
        	passwordFieldName = "__PASSWORD__";
        	%> 
        	
        	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
        	
        		String[] password_<%=cid%> = {decryptedPassword_<%=cid%>};
        		return password_<%=cid%>;
      		}
		};
		final com.jcraft.jsch.UserInfo defaultUserInfo_<%=cid%> = new MyUserInfo_<%=cid %>();
		com.jcraft.jsch.JSch jsch_<%=cid%>=new com.jcraft.jsch.JSch(); 

		<%if (("PUBLICKEY").equals(authMethod)) {%>
			<%if(isLog4jEnabled){%>
				log.info("<%=cid%> - SFTP authentication using a public key.");
				log.debug("<%=cid%> - Private key: '" + <%=privateKey%> + "'.");
	 		 <%}%>
      		jsch_<%=cid%>.addIdentity(<%=privateKey %>, defaultUserInfo_<%=cid%>.getPassphrase());
		<%}%>
		
		com.jcraft.jsch.Session session_<%=cid%>=jsch_<%=cid%>.getSession(<%=user%>, <%=host%>, <%=port%>);
		session_<%=cid%>.setConfig("PreferredAuthentications", "publickey,password,keyboard-interactive,gssapi-with-mic");

		<%if (("PASSWORD").equals(authMethod)) {%>
			<%if(isLog4jEnabled){%>
				log.info("<%=cid%> - SFTP authentication using a password.");
			<%}%>
			
        	<%
        	passwordFieldName = "__PASSWORD__";
        	%> 
        	
        	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
        	
			session_<%=cid%>.setPassword(decryptedPassword_<%=cid%>); 
		<%}%>
		session_<%=cid%>.setUserInfo(defaultUserInfo_<%=cid%>); 
		<%if (!useProxy) {%>
		if(("true").equals(System.getProperty("http.proxySet")) ){
			com.jcraft.jsch.ProxyHTTP proxy_<%=cid%> = new com.jcraft.jsch.ProxyHTTP(System.getProperty("http.proxyHost"),Integer.parseInt(System.getProperty("http.proxyPort")));
			if(!"".equals(System.getProperty("http.proxyUser"))){
				proxy_<%=cid%>.setUserPasswd(System.getProperty("http.proxyUser"),System.getProperty("http.proxyPassword"));
  			}
			session_<%=cid%>.setProxy(proxy_<%=cid%>);
		}
		<%}%>
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Attempt to connect to '" + <%=host %> + "' with username '" + <%=user%> + "'.");
		<%}%>
    	session_<%=cid%>.connect();
    	com.jcraft.jsch. Channel channel_<%=cid%>=session_<%=cid%>.openChannel("sftp");
    	channel_<%=cid%>.connect();
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Connect to '" + <%=host %> + " has succeeded." );
		<%}%>
    	com.jcraft.jsch.ChannelSftp c_<%=cid%>=(com.jcraft.jsch.ChannelSftp)channel_<%=cid%>;
    	
    	<%if(use_encoding) {%>
			c_<%=cid%>.setFilenameEncoding(<%=encoding%>);
		<%}%>
		
	<%}%>
	// becasue there is not the same method in JSch class as FTPClient class, define a list here
	java.util.List<String> msg_<%=cid%> = new java.util.ArrayList<String>();
	com.jcraft.jsch.SftpProgressMonitor monitor<%=cid%> = new MyProgressMonitor_<%=cid%>();
	java.util.List<java.util.Map<String,String>> list<%=cid %> = new java.util.ArrayList<java.util.Map<String,String>>();
  
  <%
	for (int i = 0; i < files.size(); i++) {
    	Map<String, String> line = files.get(i);
    %>
			java.util.Map<String,String> map<%=cid %><%=i %> = new java.util.HashMap<String,String>();
		    map<%=cid %><%=i %>.put(<%= line.get("FILEMASK") %>, <%= line.get("NEWNAME") %>);    
		    list<%=cid %>.add(map<%=cid %><%=i %>);       
  <%
	}
  %>  
	String localdir<%=cid %> = <%=localdir%>;
	<%if(isLog4jEnabled){%>
		log.info("<%=cid%> - Putting file to the server.");
	<%}%>
	for (java.util.Map<String, String> map<%=cid %> : list<%=cid %>) {

<%} else if (!ftps) {%> // *** ftp *** //
		com.enterprisedt.net.ftp.FTPClient ftp_<%=cid %> =null;

  <%
		if (("true").equals(useExistingConn)) {
			String conn= "conn_" + connection;
    %>
			ftp_<%=cid %> = (com.enterprisedt.net.ftp.FTPClient)globalMap.get("<%=conn %>");
	  		<%if(!moveToCurrentDir){%>
		  		String rootDir_<%=cid %> = ftp_<%=cid %>.pwd();
	  		<%}%>
			<%if(isLog4jEnabled){%>
				if(ftp_<%=cid %>!=null) {
					log.info("<%=cid%> - Uses an existing connection. Connection hostname: " + ftp_<%=cid %>.getRemoteHost() + ", Connection port: " + ftp_<%=cid %>.getRemotePort() + "."); 
				}
			<%}%>
  		<%} else {%>
   			ftp_<%=cid %> = new com.enterprisedt.net.ftp.FTPClient();
			ftp_<%=cid %>.setRemoteHost(<%=host %>);
			ftp_<%=cid %>.setRemotePort(<%=port %>);
	
			<%if(isLog4jEnabled){%>
				log.debug("<%=cid%> - " + <%=(("ACTIVE").equals(connectMode))?"\"Using the active mode.\"":"\"Using the passive mode.\""%>);
			<%}%>

		    <%if (("ACTIVE").equals(connectMode)) {%>
				ftp_<%=cid %>.setConnectMode(com.enterprisedt.net.ftp.FTPConnectMode.ACTIVE);
		    <%} else {%>
				ftp_<%=cid %>.setConnectMode(com.enterprisedt.net.ftp.FTPConnectMode.PASV);
		    <%}%>
    		ftp_<%=cid %>.setControlEncoding(<%=encoding%>);
			<%if(isLog4jEnabled){%>
				log.info("<%=cid%> - Attempt to connect to '" + <%=host %> + "' with username '" +<%=user %>+ "'.");
			<%}%>
		    ftp_<%=cid %>.connect();  
		    
        	<%
        	passwordFieldName = "__PASSWORD__";
        	%> 
        	
        	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
		    
		    ftp_<%=cid %>.login(<%=user %>, decryptedPassword_<%=cid%>);
			<%if(isLog4jEnabled){%>
				log.info("<%=cid%> - Connect to '" + <%=host %> +  "' has succeeded.");
			<%}%> 
		<%}%>  

		// msg_<%=cid%> likes a String[] to save the message from transfer.  
		com.enterprisedt.net.ftp.TransferCompleteStrings msg_<%=cid%> = ftp_<%=cid %>.getTransferCompleteMessages();
		msg_<%=cid%>.clearAll();
		java.util.List<java.util.Map<String,String>> list<%=cid %> = new java.util.ArrayList<java.util.Map<String,String>>();

  <%
		for (int i = 0; i < files.size(); i++) {
			Map<String, String> line = files.get(i);
    %>    
			java.util.Map<String,String> map<%=cid %><%=i %> = new java.util.HashMap<String,String>();
			map<%=cid %><%=i %>.put(<%= line.get("FILEMASK") %>,<%= line.get("NEWNAME") %>);  
			list<%=cid %>.add(map<%=cid %><%=i %>);       
  <%
		}
  %>  
		String remotedir<%=cid %> = <%=remotedir%>;
		ftp_<%=cid %>.chdir(remotedir<%=cid %>);

		<%if ("binary".equalsIgnoreCase(ElementParameterParser.getValue(node, "__MODE__"))) {%>  
			ftp_<%=cid %>.setType(com.enterprisedt.net.ftp.FTPTransferType.BINARY);
		<%} else { %>  
			ftp_<%=cid %>.setType(com.enterprisedt.net.ftp.FTPTransferType.ASCII);
		<%}%>
		String localdir<%=cid %>  = <%=localdir%>;

		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Uploading files to the server.");
		<%}%>
		for (java.util.Map<String, String> map<%=cid %> : list<%=cid %>) {
<%
}else{ // *** ftps *** // 
		String keystoreFile = ElementParameterParser.getValue(node,"__KEYSTORE_FILE__"); 

		String securityMode = ElementParameterParser.getValue(node, "__SECURITY_MODE__");
        if(("false").equals(useExistingConn)){ 
%>
    		class TalendTrust_<%=cid%>{ 
	            private javax.net.ssl.TrustManager[] getTrustManagers()  
	                throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException,  
	                java.security.cert.CertificateException, java.security.UnrecoverableKeyException, 
	                java.io.FileNotFoundException, java.io.IOException{ 
	                java.security.KeyStore ks = java.security.KeyStore.getInstance("JKS"); 
	                
    				<%
                    passwordFieldName = "__KEYSTORE_PASS__";
                    if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
                    %> 
                  	String decryptedKeyStorePassword_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
                    <%} else {%>
                  	String decryptedKeyStorePassword_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
                    <%}%>
                    
	                ks.load(new java.io.FileInputStream(<%=keystoreFile%>), decryptedKeyStorePassword_<%=cid%>.toCharArray()); 
	                javax.net.ssl.TrustManagerFactory tmf = javax.net.ssl.TrustManagerFactory.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm()); 
	                tmf.init(ks); 
	                return tmf.getTrustManagers(); 
	            } 
    		} 
        	TalendTrust_<%=cid%> talendTrust_<%=cid%>= null; 
<%       
        }
%> 
	    javax.net.ssl.SSLContext sslContext_<%=cid%> = null; 
	    javax.net.ssl.TrustManager[] trustManager_<%=cid%> = null; 
	    javax.net.ssl.SSLSocketFactory sslSocketFactory_<%=cid%> = null; 
	    it.sauronsoftware.ftp4j.FTPClient ftp_<%=cid %> =null; 
	    String remotedir_<%=cid%> = null;
	    String rootDir_<%=cid %> = null;
	    try{ 
<%       
        	if(("false").equals(useExistingConn)){ 
%> 
		        sslContext_<%=cid%> = javax.net.ssl.SSLContext.getInstance("SSL"); 
		        talendTrust_<%=cid%> = new TalendTrust_<%=cid%>(); 
		        trustManager_<%=cid%> = talendTrust_<%=cid%>.getTrustManagers(); 
		        sslContext_<%=cid%>.init(null, trustManager_<%=cid%>, new java.security.SecureRandom()); 
		        sslSocketFactory_<%=cid%> = sslContext_<%=cid%>.getSocketFactory(); 
	                ftp_<%=cid %> = new it.sauronsoftware.ftp4j.FTPClient(); 
	                ftp_<%=cid %>.setSSLSocketFactory(sslSocketFactory_<%=cid%>);
	                ftp_<%=cid %>.setCharset(<%=encoding%>);
					<% 
				        if("IMPLICIT".equals(securityMode)){ 
					%> 
		               		ftp_<%=cid %>.setSecurity(it.sauronsoftware.ftp4j.FTPClient.SECURITY_FTPS); 
					<% 
				        }else if("EXPLICIT".equals(securityMode)){ 
					%> 
				        	ftp_<%=cid %>.setSecurity(it.sauronsoftware.ftp4j.FTPClient.SECURITY_FTPES); 
					<% 
					    } 
					%>  
				  	<%if(isLog4jEnabled){%>
						log.info("<%=cid%> - FTPS security Mode is (<%=securityMode%>).");
						log.info("<%=cid%> - Attempt to connect to '" + <%=host %> + "' with username '" + <%=user %>+ "'.");
					<%}%>
	                ftp_<%=cid %>.connect(<%=host %>,<%=port %>); 
					<%if(isLog4jEnabled){%>
						log.info("<%=cid%> - Connect to '" + <%=host %> +  "' has succeeded.");
					<%}%> 
					
			        <%
                	passwordFieldName = "__PASSWORD__";
                	%> 
                	
                	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
					
	                ftp_<%=cid %>.login(<%=user %>, decryptedPassword_<%=cid%>); 
<%       
        	}else{ 
                String conn= "conn_" + connection; 
%> 
                ftp_<%=cid %> = (it.sauronsoftware.ftp4j.FTPClient)globalMap.get("<%=conn %>"); 
				<%if(isLog4jEnabled){%>
					if(ftp_<%=cid %>!=null) {
						log.info("<%=cid%> - Uses an existing connection. Connection hostname: " + ftp_<%=cid %>.getHost() + ", Connection port: " + ftp_<%=cid %>.getPort() + "."); 
					}
				<%}%>
<%       
				if(!moveToCurrentDir){
%>
					rootDir_<%=cid %> = ftp_<%=cid %>.currentDirectory();
<%
				}
        	} 
%> 
            remotedir_<%=cid%> = <%=remotedir%>; 
            ftp_<%=cid %>.changeDirectory(remotedir_<%=cid %>); 
		    } catch (java.lang.IllegalStateException e) { 
		        e.printStackTrace();
		        String errMsg_<%= cid %> = e.getMessage();
		        <% commonLog.logPrintedException(commonLog.var("errMsg")); %> 
		    } catch (java.io.IOException e) { 
		        e.printStackTrace();
		        String errMsg_<%= cid %> = e.getMessage();
		        <% commonLog.logPrintedException(commonLog.var("errMsg")); %> 
		    } catch (it.sauronsoftware.ftp4j.FTPIllegalReplyException e) { 
		        e.printStackTrace(); 
		        String errMsg_<%= cid %> = e.getMessage();
		        <% commonLog.logPrintedException(commonLog.var("errMsg")); %>
		    } catch (it.sauronsoftware.ftp4j.FTPException e) { 
		        e.printStackTrace();
		        String errMsg_<%= cid %> = e.getMessage();
		        <% commonLog.logPrintedException(commonLog.var("errMsg")); %> 
		    } 
  			java.util.List<java.util.Map<String,String>> list<%=cid %> = new java.util.ArrayList<java.util.Map<String,String>>();
  
  			<%
  			for (int i = 0; i < files.size(); i++) {
    			Map<String, String> line = files.get(i);
    		%>
    		java.util.Map<String,String> map<%=cid %><%=i %> = new java.util.HashMap<String,String>();
   			 map<%=cid %><%=i %>.put(<%= line.get("FILEMASK") %>, <%= line.get("NEWNAME") %>);    
    			list<%=cid %>.add(map<%=cid %><%=i %>);       
  			<%
 			 }
  			%>  
			String localdir<%=cid %> = <%=localdir%>;
			<%if(isLog4jEnabled){%>
				log.info("<%=cid%> - Uploading files to the server.");
			<%}%>
	     	for (java.util.Map<String, String> map<%=cid %> : list<%=cid %>) {
<%}%>
