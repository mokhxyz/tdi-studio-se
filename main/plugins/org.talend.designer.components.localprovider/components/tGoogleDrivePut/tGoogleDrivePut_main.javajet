<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.designer.codegen.config.NodeParamsHelper
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    java.util.List
" 
%>
<%
		CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
		INode node = (INode)codeGenArgument.getArgument();
		String cid = node.getUniqueName();
		NodeParamsHelper helper = new NodeParamsHelper(node);

		String connection = helper.getStringParam("__CONNECTION__");
		String connectionKey = "\"conn_" + connection+"\"";

		boolean dieOnError = helper.getBoolParam("__DIE_ON_ERROR__");

		boolean readContentFromInput = helper.getBoolParam("__READ_CONTENT_FROM_INPUT__");
		boolean uploadLocalFile = helper.getBoolParam("__UPLOAD_LOCAL_FILE__");
		boolean exposeOutput = helper.getBoolParam("__EXPOSE_OUTPUT_STREAM__");
		boolean overwrite = helper.getBoolParam("__OVERWRITE__");
		String title = helper.getStringParam("__FILE_TITLE__");
		String dataInputConnection = null;
        String dataOutputConnection = null;

        List< ? extends IConnection> inputConnections = node.getIncomingConnections();
	    for(IConnection conn : inputConnections) {
	        if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
	        	dataInputConnection = conn.getName();
	        	break;
	        } // if(conn) end
	    } // for(conns) end
	    
	    
		List< ? extends IConnection> outputConnections = node.getOutgoingSortedConnections();
	    for(IConnection conn : outputConnections) {
	        if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
	        	dataOutputConnection = conn.getName();
	        	break;
	        } // if(conn) end
	    } // for(conns) end
		String destFolderName = helper.getStringParam("__DESTINATION_FOLDER_NAME__");
%>
	String destFolderName_<%=cid%> = <%=destFolderName%>;
	String title_<%=cid%> = <%=title%>;
	if (title_<%=cid%>.isEmpty()) {
		throw new java.lang.Exception("File name can not be empty");
	}
	com.google.api.services.drive.model.File <%=cid%>_file = new com.google.api.services.drive.model.File();
	com.google.api.client.http.AbstractInputStreamContent <%=cid%>_fContent = null;
	if (!destFolderName_<%=cid%>.equals("root")) {
		com.google.api.services.drive.Drive.Files.List <%=cid%>_listRequest =  <%=cid%>_client.files().list();
		<%=cid%>_listRequest.setQ("trashed = false and title = '" + <%=destFolderName%> + "' and mimeType = 'application/vnd.google-apps.folder'");
		com.google.api.services.drive.model.FileList <%=cid%>_files = <%=cid%>_listRequest.execute();
		if (<%=cid%>_files.getItems().size() > 1)
		{
			throw new Exception("More than one folder found with name \"" + <%=destFolderName%> + "\" ");
		}
		else if (<%=cid%>_files.getItems().isEmpty())
		{
			throw new Exception("No folder found with name \"" + <%=destFolderName%> + "\" ");
		}
		else
		{
			String <%=cid%>_folderId = <%=cid%>_files.getItems().get(0).getId();
			<%=cid%>_file.setParents(java.util.Arrays.asList(new com.google.api.services.drive.model.ParentReference().setId(<%=cid%>_folderId)));
		}
	}
	com.google.api.services.drive.Drive.Files.List <%=cid%>_fileRequest = <%=cid%>_client.files().list().setQ("trashed = false and title = '" + title_<%=cid%> + "' and mimeType != 'application/vnd.google-apps.folder'");
	com.google.api.services.drive.model.FileList <%=cid%>_existingFiles = <%=cid%>_fileRequest.execute();
	if (<%=cid%>_existingFiles.getItems().size() > 1)
	{
		throw new Exception("Multiply files with same name already exist");
	}
    <%if(!overwrite) {%>	
		if (<%=cid%>_existingFiles.getItems().size() == 1)
		{
			throw new Exception("File with the same name exist");
		}
	<%} else {%>
		if (<%=cid%>_existingFiles.getItems().size() == 1)
		{
			<%=cid%>_client.files().delete(<%=cid%>_existingFiles.getItems().get(0).getId()).execute();
		}
	<%}%>
	
	<%=cid%>_file.setTitle(title_<%=cid%>);
<%if(exposeOutput){	%>	
	<%=cid%>_uploader_input  = new java.io.ByteArrayInputStream(<%=cid%>_uploader_output.toByteArray());
	com.google.api.client.http.InputStreamContent <%=cid%>_upload_content = new com.google.api.client.http.InputStreamContent(null, <%=cid%>_uploader_input);
	<%=cid%>_file = <%=cid%>_client.files().insert(<%=cid%>_file, <%=cid%>_upload_content).execute();
	if (<%=cid%>_uploader_input != null)
	{
		<%=cid%>_uploader_input.close();
	}
	if (<%=cid%>_uploader_output != null)
	{
		<%=cid%>_uploader_output.close();
	}
	<%=cid%>_uploader_output = new java.io.ByteArrayOutputStream();
	globalMap.put("<%=cid%>_OUTPUTSTREAM", <%=cid%>_uploader_output);
<%} else if(readContentFromInput){
		if(dataInputConnection != null){
%>
	//Reading content from flow
	Object <%=cid%>_content = <%=dataInputConnection%>.content;
	
	if(<%=cid%>_content == null){
		throw new Exception("The Uploaded file Content can't be null");
	}
	if(<%=cid%>_content instanceof byte[]){
		<%=cid%>_fContent = new com.google.api.client.http.ByteArrayContent(null, (byte[])<%=cid%>_content);
	}else if(<%=cid%>_content instanceof java.io.InputStream){
		<%=cid%>_fContent = new com.google.api.client.http.InputStreamContent(null, (java.io.InputStream)<%=cid%>_content);
	}else{
		<%=cid%>_fContent = new com.google.api.client.http.ByteArrayContent(null, String.valueOf(<%=cid%>_content).getBytes());
	}
	<%=cid%>_file = <%=cid%>_client.files().insert(<%=cid%>_file, <%=cid%>_fContent).execute();
<%
			if(dataOutputConnection != null){
%>
	<%=dataOutputConnection%>.content = <%=cid%>_content;
<%
			}//End dataOutputConnection If
		}//End dataInputConnection Id
}else if(uploadLocalFile){
%>
	//Reading content from local file
	<%=cid%>_fContent = new com.google.api.client.http.FileContent(null, new java.io.File(<%=helper.getStringParam("__LOCAL_FILE_PATH__")%>));
	<%=cid%>_file = <%=cid%>_client.files().insert(<%=cid%>_file, <%=cid%>_fContent).execute();
<%
}//end main If%>