<%@ jet

imports="
    	org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.process.IConnection
		org.talend.commons.utils.generation.CodeGenerationUtils
		java.util.List
		java.util.LinkedList
		java.util.Map;
"
%>
<%@ include file="../templates/Log4j/Log4jDBConnUtil.javajet"%>
class StrUtils{
    public String transform(String content){
           String result = null;
           content = content.trim();
           String[] splitArr = content.split("\\s");
           int lgth = splitArr.length;
           if(lgth > 1){// has expr alias
             result = "src." + splitArr[lgth - 1];
           }else{
             int index = content.indexOf(".");
             if(index != -1){
                 result = "src" + content.substring(index);
             }else{
                 result = content;
             }
           }
           return result;
    }
}
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();

	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	String cid = node.getUniqueName();
%>
   StrUtils strUtil_<%= cid %> = new StrUtils();
<%
	String dbtable = null;
	String uniqueNameConnection = null;
	INode previousNode = null;

	String differenttable = ElementParameterParser.getValue(node, "__DIFFERENT_TABLE_NAME__");
	boolean useDifferentTable = "true".equals(ElementParameterParser.getValue(node, "__USE_DIFFERENT_TABLE__"));

	%>
	String select_query = null;
	String selectQueryColumnsName = null;
	<%
	List<IConnection> connections = (List<IConnection>) node.getIncomingConnections();
	if(connections != null && connections.size() > 0 && connections.get(0) != null) {
	    IConnection connection = connections.get(0);
	    previousNode = connection.getSource();
	    String previousComponentName = previousNode.getUniqueName();
		dbtable = connection.getName();
		uniqueNameConnection = connection.getUniqueName();
		%>
		select_query = (String) globalMap.get("<%=previousComponentName%>"+"QUERY"+"<%=uniqueNameConnection%>");
		selectQueryColumnsName = (String) globalMap.get("<%=previousComponentName%>"+"QUERY_COLUMNS_NAME"+"<%=uniqueNameConnection%>");
		<%
	}

	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");

        String dbhost = null;
        String dbname = null;
        String dbuser = null;
        boolean useExistingConn = false;
        boolean queryBanding = false;
        boolean activateQueryLogging = false;
        List<Map<String, String>> queryBandList = null;
        if(previousNode != null) {
	        dbhost = ElementParameterParser.getValue(previousNode, "__HOST__");
	        dbname = ElementParameterParser.getValue(previousNode, "__DBNAME__");
	        dbuser = ElementParameterParser.getValue(previousNode, "__USER__");
	        useExistingConn = ("true").equals(ElementParameterParser.getValue(previousNode, "__USE_EXISTING_CONNECTION__"));
	        queryBanding = "true".equals(ElementParameterParser.getValue(previousNode, "__QUERY_BAND__"));
            activateQueryLogging = "true".equals(ElementParameterParser.getValue(previousNode, "__ACTIVATE_QUERY_LOGGING__"));
	        queryBandList = (List<Map<String,String>>)ElementParameterParser.getObjectValue(previousNode, "__QUERY_BAND_PARAMETERS__");
        }

        String whereClause = ElementParameterParser.getValue(node, "__WHERE_CLAUSE__");

%>

<%
List<IMetadataColumn> columnList = null;

List<IMetadataTable> metadatas = node.getMetadataList();
if(metadatas !=null && metadatas.size()>0){
	IMetadataTable metadata = metadatas.get(0);
	if(metadata != null){
		columnList = metadata.getListColumns();
	}
}
%>
java.sql.Connection conn_<%=cid%> = null;
<%
if(useExistingConn) {
    String connection = ElementParameterParser.getValue(previousNode, "__CONNECTION__");
    String conn = "conn_" + connection;
    %>
    conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
	<%
	log4jCodeGenerateUtil.useExistConnection(node);
} else {
    %>
    String driverClass_<%=cid%> = "com.teradata.jdbc.TeraDriver";
	java.lang.Class.forName(driverClass_<%=cid%>);
    String url_<%=cid %> = "jdbc:teradata://" + <%=dbhost%>+ "/DATABASE=" + <%=dbname%>;
    String dbUser_<%=cid %> = <%=dbuser%>;

    <%
    String passwordFieldName = "__PASS__";
    %>

    <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/eltpassword.javajet"%>

    String dbPwd_<%=cid %> = decryptedPassword_<%=cid%>;
<%
   	log4jCodeGenerateUtil.debugConnectionParams(node);
   	log4jCodeGenerateUtil.connect(node);
   	if(queryBanding){%>
		     //add query band begin
             boolean currentAutoCommitMode<%= cid %> =  conn_<%=cid%>.getAutoCommit();
             conn_<%=cid%>.setAutoCommit(true);
             try{
                 <%
                    if(activateQueryLogging){
                        %>
                           try{
                               conn_<%=cid%>.createStatement().execute("BEGIN QUERY LOGGING WITH SQL,OBJECTS ON " + <%= dbuser %>);
                           }catch(Exception e){
                                 System.err.println(e.getMessage());
                           }
                        <%
                    }
                  %>
                 conn_<%=cid%>.createStatement().execute(
              "SET QUERY_BAND='" +
<%
            for(Map<String, String> map : queryBandList) {
%>
               <%= map.get("KEY") %> + "=" + <%= map.get("VALUE") %> + ";" +
<%
			}
%> "' FOR SESSION"
           );
              }catch(Exception e){
               e.printStackTrace();
      }
      conn_<%= cid %>.setAutoCommit(currentAutoCommitMode<%= cid %>);
   	<%}
%>

<%}%>

java.sql.PreparedStatement pstmt_<%=cid %> =null;

<%

class Column{


	String name;

	String sqlStmt;

	String value;

	boolean addCol;

	public Column(IMetadataColumn column){
		String columname = column.getOriginalDbColumnName();
		if(columname!=null && columname.trim().length()>0){
			this.name = columname;
		}else{
			this.name = column.getLabel();
		}
		this.sqlStmt = "=?";
		this.value = "?";
		this.addCol =false;
	}

	public String getName(){
		return this.name;
	}

	public boolean isAddCol(){
		return this.addCol;
	}

	public String getSqlStmt(){
		return this.sqlStmt;
	}

	public String getValue(){
		return this.value;
	}
}

if(columnList != null && columnList.size()>0){


StringBuilder insertColName = new StringBuilder();

StringBuilder insertValueStmt = new StringBuilder();

StringBuilder updateSetStmt = new StringBuilder();

List<Column> stmtStructure =  new LinkedList<Column>();

for(IMetadataColumn column:columnList){

	stmtStructure.add(new Column(column));

}

int counterOuter =0;

for(Column colStmt:stmtStructure){
	String suffix = ",";

		if(counterOuter==(stmtStructure.size()-1)){
			suffix = "";
		}
		if(colStmt.isAddCol()){
			insertColName.append(colStmt.getName()+suffix);
			insertValueStmt.append(colStmt.getSqlStmt()+suffix);
			updateSetStmt.append(colStmt.getName());
			updateSetStmt.append(colStmt.getSqlStmt()+suffix);
		}else{
			insertColName.append(colStmt.getName()+suffix);
			insertValueStmt.append(colStmt.getValue()+suffix);
			            updateSetStmt.append(
                colStmt.getName()
                + "= \"+ strUtil_"
                + cid
                + ".transform(routines.system.StringUtils.splitSQLColumns(selectQueryColumnsName)[" + counterOuter + "]) +\""
                + suffix
            );
		}
		counterOuter ++;
}
%>

	String tableName_<%=cid%> = <%=useDifferentTable? differenttable:"\""+dbtable +"\""%>;
<%

	if(("INSERT").equals(dataAction)){
	%>


String insertQuery = "INSERT INTO "+tableName_<%=cid%>+" (<%=insertColName.toString()%>) "+select_query;
pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insertQuery);

	<%
	}else if (("UPDATE").equals(dataAction)){
	%>

String updateQuery = "UPDATE "+tableName_<%=cid%>+" FROM (" + select_query + ") src SET <%=updateSetStmt.toString()%> "
<%if(CodeGenerationUtils.hasAlphaNumericCharacter(whereClause)) {%>
+"  WHERE " + <%=CodeGenerationUtils.replaceAllCrBySpace(whereClause)%>
<%}%>
;
pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(updateQuery);

	<%
	}else if (("DELETE").equals(dataAction)){
	%>

String deleteQuery = "DELETE  FROM "+ tableName_<%=cid%>+" WHERE EXISTS ("+select_query+") "
<%if(CodeGenerationUtils.hasAlphaNumericCharacter(whereClause)) {%>
+"  AND " + <%=CodeGenerationUtils.replaceAllCrBySpace(whereClause)%>
<%}%>
;
pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(deleteQuery);

	<%
	}
	%>
int nb_line_<%=cid%> = 0;
int nb_line_updated_<%=cid%> = 0;
int nb_line_inserted_<%=cid%> = 0;
int nb_line_deleted_<%=cid%> = 0;
	<%

}

if(dbtable != null && columnList != null){
	if(("INSERT").equals(dataAction)){
	%>

System.out.println("Inserting with : \n" + insertQuery + "\n");
<%log4jCodeGenerateUtil.logInfo(node,"info",cid+" - Executing SQL:\"+insertQuery+\"");%>
nb_line_inserted_<%=cid%> = pstmt_<%=cid %>.executeUpdate();
<%log4jCodeGenerateUtil.logInfo(node,"info",cid+" - Executed successfully.");%>
System.out.println("--> " + nb_line_inserted_<%=cid%> + " rows inserted. \n");

	<%
	}else if(("UPDATE").equals(dataAction)){

	%>
System.out.println("Updating with : \n" + updateQuery +"\n");
<%log4jCodeGenerateUtil.logInfo(node,"info",cid+" - Executing SQL:\"+updateQuery+\"");%>
nb_line_updated_<%=cid%> = pstmt_<%=cid %>.executeUpdate();
<%log4jCodeGenerateUtil.logInfo(node,"info",cid+" - Executed successfully.");%>
	System.out.println("--> " + nb_line_updated_<%=cid%> + " rows updated. \n");
	<%
	}else if (("DELETE").equals(dataAction)){
		%>
	System.out.println("Deleting with : \n" + deleteQuery +"\n");
		<%log4jCodeGenerateUtil.logInfo(node,"info",cid+" - Executing SQL:\"+deleteQuery+\"");%>
		nb_line_deleted_<%=cid%> = pstmt_<%=cid %>.executeUpdate();
		<%log4jCodeGenerateUtil.logInfo(node,"info",cid+" - Executed successfully.");%>
	System.out.println("--> " + nb_line_deleted_<%=cid%> + " rows deleted. \n");
		<%
	}
}
%>

pstmt_<%=cid %>.close();

<%
if(!useExistingConn) {
    %>
    if(conn_<%=cid%> != null && !conn_<%=cid%>.isClosed()) {
    	<%if(queryBanding){%>
		    conn_<%=cid%>.setAutoCommit(true);
		    try{
		         conn_<%=cid%>.createStatement().execute("SET QUERY_BAND = NONE FOR SESSION");
		         <%
                    if(activateQueryLogging){
                         %>
                            try{
                                conn_<%=cid%>.createStatement().execute("END QUERY LOGGING ON " + <%= dbuser %>);
                            }catch(Exception e){
                                  System.err.println(e.getMessage());
                            }
                         <%
                    }
                  %>
		     }catch(Exception e){
		         e.printStackTrace();
		     }
	<%}%>
		<%log4jCodeGenerateUtil.close(node);%>
    }
    <%
}
%>
nb_line_<%=cid%> = nb_line_updated_<%=cid%> + nb_line_inserted_<%=cid%> + nb_line_deleted_<%=cid%>;

globalMap.put("<%=cid %>_NB_LINE",nb_line_<%=cid%>);
globalMap.put("<%=cid %>_NB_LINE_UPDATED",nb_line_updated_<%=cid%>);
globalMap.put("<%=cid %>_NB_LINE_INSERTED",nb_line_inserted_<%=cid%>);
globalMap.put("<%=cid %>_NB_LINE_DELETED",nb_line_deleted_<%=cid%>);

<%
if(isLog4jEnabled){
	Map<String,String> actionMap=new java.util.HashMap<String,String>();
	actionMap.put("INSERT","inserted");
	actionMap.put("UPDATE","updated");
	actionMap.put("DELETE","deleted");
	%>
	log.info("<%=cid%> - Has <%=actionMap.get(dataAction)%> records count: " + nb_line_<%=actionMap.get(dataAction)%>_<%=cid%> + ".");
<%
}
%>
