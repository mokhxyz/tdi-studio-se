<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory		
		java.util.List	
		java.util.Map
		java.util.Set
		java.util.HashSet
	"
	
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/LogUtil.javajet"%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid =  node.getUniqueName();
LogUtil logtpl = new LogUtil(node);
String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
String propagateRecordset = ElementParameterParser.getValue(node,"__PROPAGATE_RECORD_SET__");
String recordsetColumn = ElementParameterParser.getValue(node,"__RECORD_SET_COLUMN__");
boolean usePrepareStatement = "true".equals(ElementParameterParser.getValue(node,"__USE_PREPAREDSTATEMENT__"));
String dbquery= ElementParameterParser.getValue(node, "__QUERY__");
		dbquery = dbquery.replaceAll("\n"," ");
		dbquery = dbquery.replaceAll("\r"," ");
String assemblyName = ElementParameterParser.getValue(node,"__ASSEMBLY_NAME__");
String className = ElementParameterParser.getValue(node,"__CLASS_NAME__");
List<Map<String, String>> prepareStatementParameters = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SET_PREPAREDSTATEMENT_PARAMETERS__");
String incomingConnName = null;

Set<String> inputCols = new HashSet<String>();

String oleDbParamCollClassName = "\"System.Data.OleDb.OleDbParameterCollection, System.Data, "
    	+ "Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"";
List<IMetadataColumn> columnList = null;

String rejectConnName = null;
List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
if(rejectConns != null && rejectConns.size() > 0) {
    IConnection rejectConn = rejectConns.get(0);
    rejectConnName = rejectConn.getName();
}
List<IMetadataColumn> rejectColumnList = null;
IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
if(metadataTable != null) {
    rejectColumnList = metadataTable.getListColumns();      
}


List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();

boolean hasOutgoingDataConnection = false;
for(IConnection conn : outgoingConns) {
    if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
		if(!hasOutgoingDataConnection){
			hasOutgoingDataConnection = true;
		}
%>
    
    <%=conn.getName() %> = null;            
<%      }
}

%>
query_<%=cid %> = <%=dbquery%>;
whetherReject_<%=cid%> = false;
<%
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
		IMetadataTable metadata = metadatas.get(0);
			if (metadata!=null) {
				List< ? extends IConnection> conns = node.getIncomingConnections();
				columnList = metadata.getListColumns();
				if(conns != null && conns.size()>0){
        			IConnection conn = conns.get(0);
        			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
						incomingConnName = conn.getName();
						IMetadataTable inputMetadataTable = conn.getMetadataTable();
        				for (IMetadataColumn inputCol : inputMetadataTable.getListColumns()) {
        					inputCols.add(inputCol.getLabel());
        				}
					}
				}//end of connection size.
			}//end of metadatas
	}
	if(!hasOutgoingDataConnection || columnList == null || columnList.size() < 1){
		propagateRecordset = "false";
	}
	%>
    globalMap.put("<%=cid %>_QUERY",query_<%=cid %>);
<%
	if(("true").equals(propagateRecordset)){
%>
	org.talend.net.Object rs_<%=cid %> = null;
<%
	}
%>
    try {
<%
	logtpl.info("\"Try to execute query.\"");
	logtpl.debug("\"Query string: \"",logtpl.var("query"),"\".\"");
	if (usePrepareStatement){
	%>
	org.talend.net.Object param_<%=cid%>;
	Object val_<%=cid%>;
	<%
		for (Map<String, String> param : prepareStatementParameters){
			
%>
				    param_<%=cid%> = cmd_<%=cid%>.invoke("CreateParameter");
                    val_<%=cid%> = <%=param.get("PARAMETER_VALUE")%>;
                    param_<%=cid%>.mutateProperty("Value",val_<%=cid%>);
                    cmd_<%=cid%>.accessProperty("Parameters",<%=oleDbParamCollClassName%>)
                    	.invoke("Add",new java.lang.Object[] {<%=param.get("PARAMETER_INDEX")%>, param_<%=cid%> });
				
<%
			
		}
		if(("true").equals(propagateRecordset)){
%>
			rs_<%=cid %> = cmd_<%=cid %>.invoke("ExecuteReader");
			cmd_<%=cid%>.accessProperty("Parameters",<%=oleDbParamCollClassName%>)
                    	.invoke("Clear");
<%
		}else{
%>
    		cmd_<%=cid %>.invoke("ExecuteNonQuery");
    		cmd_<%=cid%>.accessProperty("Parameters",<%=oleDbParamCollClassName%>)
                    	.invoke("Clear");
<%
		}
	}else{
		if(("true").equals(propagateRecordset)){
%>
			cmd_<%=cid %> = org.talend.net.Object.createInstance(<%=assemblyName%>, "System.Data.OleDb.OleDbCommand", new java.lang.Object[] { query_<%=cid%>,conn_<%=cid%> });
			rs_<%=cid %> = cmd_<%=cid %>.invoke("ExecuteReader");
<%
		}else{
%>
			cmd_<%=cid %> = org.talend.net.Object.createInstance(<%=assemblyName%>, "System.Data.OleDb.OleDbCommand", new java.lang.Object[] { query_<%=cid%>,conn_<%=cid%> });
    		cmd_<%=cid %>.invoke("ExecuteNonQuery");
<%
		}
	}
	logtpl.info("\"Execute query successfully.\"");
%>
    } catch (java.lang.Exception e) {        
		whetherReject_<%=cid%> = true;
<%
	if (("true").equals(dieOnError)) {
%>
            throw(e);
<%
	} else {
        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
%>
            <%=rejectConnName %> = new <%=rejectConnName %>Struct();
<%
            if(incomingConnName!=null){
	        	for(IMetadataColumn column : columnList) {
	        		if (inputCols.contains(column.getLabel())) {
%>
	               <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
<%
					}
	            }
            }
%>
           	<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
<%
         } else {
%>
			<%logtpl.logPrintedException("e.getMessage()");%>
         	System.err.print(e.getMessage());
<%
         }
	}
%>
    }
	<%
	
    if(outgoingConns != null && outgoingConns.size() > 0) {
        %>
        if(!whetherReject_<%=cid%>) {
        <%
            for(IConnection outgoingConn : outgoingConns) {
                if(rejectConnName == null || (rejectConnName != null && !outgoingConn.getName().equals(rejectConnName))) {
                    if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
         %>
                        <%=outgoingConn.getName()%> = new <%=outgoingConn.getName()%>Struct();
         <%
                        for(IMetadataColumn column : columnList) {
                        	if(("true").equals(propagateRecordset) && column.getLabel().equals(recordsetColumn)){
%>
<%=outgoingConn.getName()%>.<%=column.getLabel()%> = rs_<%=cid %>;
<%
                        	}else{
                        		if(incomingConnName!=null){
                        			if (inputCols.contains(column.getLabel())) {
                            %>
<%=outgoingConn.getName()%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
<%
									}
								}
							}
                        }
                    }
                }
            }
        %>
        }
        <%
    }
%>
