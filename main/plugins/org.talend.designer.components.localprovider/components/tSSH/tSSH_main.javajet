<%@ jet
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.BlockCode
    java.util.List
	java.util.Map
	org.talend.core.model.process.IConnectionCategory
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
boolean stats = codeGenArgument.isStatistics();
String standardOutput = ElementParameterParser.getValue(node, "__STANDARDOUTPUT__");
String errorOutput = ElementParameterParser.getValue(node, "__ERROROUTPUT__");
String authMethod = ElementParameterParser.getValue(node, "__AUTH_METHOD__");
boolean pty = "true".equals(ElementParameterParser.getValue(node, "__PTY__"));
List<IMetadataTable> metadatas = node.getMetadataList();
String cid = node.getUniqueName();
boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        List<IMetadataColumn> columns = metadata.getListColumns();
        List<? extends IConnection> conns = node.getOutgoingSortedConnections();
       	String commandSeparator = ElementParameterParser.getValue(node,"__COMMANDSEPARATOR__");
        List<Map<String, String>> commands =(List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__COMMANDS__");
%>
		/* open a session */
 		sess_<%=cid%> = conn_<%=cid%>.openSession();
<%
        if (pty) {
%>
			sess_<%=cid%>.requestDumbPTY();
	        sess_<%=cid%>.startShell();
<%
        	if(commands.size() > 0){
        		for(java.util.Map<String, String> map : commands){
        			String cmd = map.get("COMMAND");
%>
					sess_<%=cid%>.getStdin().write((<%=cmd%>+"\n").getBytes());
<%
				}
			}
%>
			sess_<%=cid%>.getStdin().write("exit\n".getBytes());
<%
		}else{
        	if(commands.size() > 0){
%>
        		StringBuilder command_<%=cid %> = new StringBuilder();
<%  
				for(java.util.Map<String, String> map : commands){
%>
	                if(command_<%=cid %>.length() > 0){
	                	command_<%=cid %>.append(<%=commandSeparator%>);
	                }
	                <%String cmd = map.get("COMMAND");%>
	       		    command_<%=cid %>.append(<%=cmd %>);
<% 
				}
        	}
%>
			sess_<%=cid%>.execCommand((command_<%=cid %>).toString());

<%
		}
		if(("NORMAL_OUTPUT").equals(errorOutput) || ("NORMAL_OUTPUT").equals(standardOutput)){
%>
			output_<%=cid%>.removeAllElements();
<%
		}
%>
		java.io.InputStream stdout_<%=cid%> = sess_<%=cid%>.getStdout();
		java.io.BufferedReader brout_<%=cid%>= new java.io.BufferedReader(new java.io.InputStreamReader(stdout_<%=cid%>));
        String line_<%=cid%> = "";

        if((line_<%=cid%> = brout_<%=cid%>.readLine()) != null){
            stringStdout_<%=cid%>.append(line_<%=cid%>);
        }
		while((line_<%=cid%> = brout_<%=cid%>.readLine()) != null){
			stringStdout_<%=cid%>.append("\n"+line_<%=cid%>);
		}
		
	    brout_<%=cid%>.close();
		stdout_<%=cid%>.close();
		
		java.io.InputStream stderr_<%=cid%> = sess_<%=cid%>.getStderr();
        java.io.BufferedReader breer_<%=cid%>= new java.io.BufferedReader(new java.io.InputStreamReader(stderr_<%=cid%>));
        String line1_<%=cid%> = "";

        if((line1_<%=cid%> = breer_<%=cid%>.readLine()) != null){
        	stringStderr_<%=cid%>.append(line1_<%=cid%>);
        }
		while((line1_<%=cid%> = breer_<%=cid%>.readLine()) != null) {
			stringStderr_<%=cid%>.append("\n"+line1_<%=cid%>);
		}

		breer_<%=cid%>.close();
		stderr_<%=cid%>.close();
		
		sess_<%=cid%>.waitForCondition(ch.ethz.ssh2.ChannelCondition.EXIT_STATUS, 10000);
		
		 /* Close this session */
		
		sess_<%=cid%>.close();
		<%if(isLog4jEnabled){%>
			log.debug("<%=cid%> - Command line standard result: " + stringStdout_<%=cid%>.toString());
			log.debug("<%=cid%> - Command line error result: " + stringStderr_<%=cid%>.toString());
		<%}%>
<%
		//-----begin to handle output
		if(("TO_GLOBAL_VARIABLE").equals(standardOutput)){
%>
			globalMap.put("<%=cid %>_STDOUT", stringStdout_<%=cid%>.toString());
<%
		}else if(("TO_CONSOLE_AND_GLOBAL_VARIABLE").equals(standardOutput)){
%>
			globalMap.put("<%=cid %>_STDOUT", stringStdout_<%=cid%>.toString());
<%
		}else if(("NORMAL_OUTPUT").equals(standardOutput)){
%>
			output_<%=cid%>.add(stringStdout_<%=cid%>.toString());
			stringStdout_<%=cid%>.delete(0,stringStdout_<%=cid%>.length());
<%
		}
		if(("TO_GLOBAL_VARIABLE").equals(errorOutput)){
%>
			globalMap.put("<%=cid %>_STDERR", stringStderr_<%=cid%>.toString());
<%		
		}else if(("TO_CONSOLE_AND_GLOBAL_VARIABLE").equals(errorOutput)){
%>
			globalMap.put("<%=cid %>_STDERR", stringStderr_<%=cid%>.toString());
<%		
		}else if(("NORMAL_OUTPUT").equals(errorOutput)){
%>
			output_<%=cid%>.add(stringStderr_<%=cid%>.toString());
			stringStderr_<%=cid%>.delete(0, stringStderr_<%=cid%>.length());
<%		
		}
		if(("NORMAL_OUTPUT").equals(errorOutput) || ("NORMAL_OUTPUT").equals(standardOutput)){
			if (conns!=null && conns.size()>0) {
			  IConnection conn = conns.get(0);
			  if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) { 
%>
				for(String tmp_<%=cid %>:output_<%=cid%>){ // C_01
<%
				for(IMetadataColumn column:columns) {
					if("outputline".equals(column.getLabel())){
%>
						<%=conn.getName()%>.outputline = tmp_<%=cid %>;
<%
					}
				}
				// the following part is used to set the close block
				List<BlockCode> blockCodes = new java.util.ArrayList<BlockCode>(1);
  				blockCodes.add(new BlockCode("C_01"));
  				((org.talend.core.model.process.AbstractNode) node).setBlocksCodeToClose(blockCodes);
  			  }
			}
		}
		//-----end handle output
		if (conns!=null && conns.size()>0) {
		  IConnection conn = conns.get(0);
		  if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) { 
			String inputConnName = null;
			if (node.getIncomingConnections()!=null) {
				for (IConnection incomingConn : node.getIncomingConnections()) {
					if (incomingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
						inputConnName = incomingConn.getName();
						IMetadataTable inputMetadataTable = incomingConn.getMetadataTable();
						for (IMetadataColumn inputCol : inputMetadataTable.getListColumns()) {
%>	
							<%=conn.getName()%>.<%=inputCol.getLabel() %> = <%=inputConnName %>.<%=inputCol.getLabel() %>;
<%
						}
					}
				}
			}
		  }
		}	
    }
}
%>
