<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    java.util.List
" 
%>

<%
		CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
		INode node = (INode)codeGenArgument.getArgument();
		String cid = node.getUniqueName();
		
		String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
		String accessToken = ElementParameterParser.getValue(node,"__ACCESS_TOKEN__");
	    String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	    String connectionKey = "conn_" + connection;
		String path = ElementParameterParser.getValue(node, "__PATH__");
%>

<%
	if (!"true".equals(useExistingConn)) {
%>
		com.dropbox.core.DbxRequestConfig.Builder configBuilder_<%=cid%> = com.dropbox.core.DbxRequestConfig.newBuilder("<%=cid%>");
		String localeName_<%=cid%> = java.util.Locale.getDefault().toString();
		configBuilder_<%=cid%>.withUserLocale(localeName_<%=cid%>);
<%
		String useProxy = ElementParameterParser.getValue(node,"__USE_PROXY__");
		if ("true".equals(useProxy)) {
			String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
			String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
%>
			java.net.InetSocketAddress socketAddress_<%=cid%> = new java.net.InetSocketAddress(<%=proxyHost%>, <%=proxyPort%>);
			java.net.Proxy proxy_<%=cid%> = new java.net.Proxy(java.net.Proxy.Type.HTTP, socketAddress_<%=cid%>);
			com.dropbox.core.http.StandardHttpRequestor.Config config_<%=cid%> = com.dropbox.core.http.StandardHttpRequestor.Config.builder().withNoConnectTimeout().withProxy(proxy_<%=cid%>).build();
			com.dropbox.core.http.HttpRequestor httpRequestor_<%=cid%> = new com.dropbox.core.http.StandardHttpRequestor(config_<%=cid%>);
			configBuilder_<%=cid%>.withHttpRequestor(httpRequestor_<%=cid%>);
<%
		}
%>
		com.dropbox.core.DbxRequestConfig dbxConfig_<%=cid%> = configBuilder_<%=cid%>.build();
		com.dropbox.core.v2.DbxClientV2 client_<%=cid%> = new com.dropbox.core.v2.DbxClientV2(dbxConfig_<%=cid%>, <%=accessToken%>);
<%
	} else {
%>
		com.dropbox.core.v2.DbxClientV2 client_<%=cid%> = (com.dropbox.core.v2.DbxClientV2) globalMap.get("<%=connectionKey%>");
<%
	}
%>
	com.dropbox.core.v2.files.DbxUserFilesRequests filesClient_<%=cid%> = client_<%=cid%>.files();
	try {
		filesClient_<%=cid%>.delete(<%=path%>);
	} catch (com.dropbox.core.v2.files.DeleteErrorException e_<%=cid%>) {
		throw new Exception(<%=path%> + " is not a valid file path on Dropbox");
	}