<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.ElementParameterParser
    java.util.List
    java.util.ArrayList
    java.util.LinkedList
    java.util.Map
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.metadata.types.JavaType
	org.talend.core.model.process.EConnectionType
	org.talend.core.model.utils.NodeUtil
	org.talend.core.model.process.IConnection
"
skeleton="tWriteXMLFieldOut_java.skeleton"
%>
<%
// ------------------- *** Dom4j generation mode start *** ------------------- //
class XSDToolByDom4j{
    String cid = null;
    public void generateXSD(String parent, String currEleName, XMLNode root){
    	if(("ELEMENT").equals(root.type)){
    		createElement(parent,currEleName,root);
			
			if(root.elements!=null && root.elements.size()>0
			  || root.attributes!=null && root.attributes.size()>0){
%>
		org.dom4j.Element <%=currEleName%>_c_<%=cid%> = <%=currEleName%>_<%=cid%>.addElement("xsd:complexType");
		org.dom4j.Element <%=currEleName%>_s_<%=cid%> = <%=currEleName%>_c_<%=cid%>.addElement("xsd:sequence");
<%
        		int index = 0;
        		for(XMLNode child:root.elements){
        			generateXSD(currEleName+"_s", currEleName+"_"+index++, child);
        		}
        		
        		for(XMLNode attri:root.attributes){
        			createAttribute(currEleName+"_c",attri);
        		}
			}
    	}
    }
    
    private void createElement(String parent, String currEleName, XMLNode node){
%>
		org.dom4j.Element <%=currEleName%>_<%=cid%> = <%=parent%>_<%=cid%>.addElement("xsd:element");
		<%=currEleName%>_<%=cid%>.addAttribute("name","<%=node.name%>");
		<%=currEleName%>_<%=cid%>.addAttribute("nillable","true");
<%
		if(node.parent != null){
%>
		<%=currEleName%>_<%=cid%>.addAttribute("minOccurs","0");
		<%=currEleName%>_<%=cid%>.addAttribute("maxOccurs","unbounded");
<%
		}
    }
    
    private void createAttribute(String parent, XMLNode node){
%>
		<%=parent%>_<%=cid%>.addElement("xsd:attribute").addAttribute("name","<%=node.name%>");
<%
    }
}
// ------------------- *** Dom4j generation mode end *** ------------------- //

// ------------------- *** Null generation mode start *** ------------------- //
class XSDToolByNull{
	String cid = null;
    public void generateXSD(String emptyspace, XMLNode root){
    	if(("ELEMENT").equals(root.type)){
    		createElement(emptyspace, root);
			
			if(root.elements!=null && root.elements.size()>0
			  || root.attributes!=null && root.attributes.size()>0){
%>
		out_xsd_<%=cid%>.write("<%=emptyspace%>  <xsd:complexType>");
		out_xsd_<%=cid%>.newLine();
		out_xsd_<%=cid%>.write("<%=emptyspace%>    <xsd:sequence>");
		out_xsd_<%=cid%>.newLine();
<%
				XMLNode mainNode = null;
        		for(XMLNode child:root.elements){
        			if( 1==(child.special & 4)){
        				mainNode = child;
        			}else{
        				generateXSD(emptyspace+"      ", child);
        			}
        		}
        		if(mainNode!= null){
        			generateXSD(emptyspace+"      ", mainNode);
        		}
%>
		out_xsd_<%=cid%>.write("<%=emptyspace%>    </xsd:sequence>");
		out_xsd_<%=cid%>.newLine();
<%
        		for(XMLNode attri:root.attributes){
        			createAttribute(emptyspace+"    ",attri);
        		}
%>
		out_xsd_<%=cid%>.write("<%=emptyspace%>  </xsd:complexType>");
		out_xsd_<%=cid%>.newLine();
<%
			}
%>
		out_xsd_<%=cid%>.write("<%=emptyspace%></xsd:element>");
		out_xsd_<%=cid%>.newLine();
<%
    	}
    }
    
    private void createElement(String emptyspace, XMLNode node){
%>
		out_xsd_<%=cid%>.write("<%=emptyspace%><xsd:element name=\"<%=node.name%>\" nillable=\"true\" "+
<%
		if(node.parent != null){
%>
		"minOccurs=\"0\" maxOccurs=\"unbounded\""+
<%
		}
%>
		">");
		out_xsd_<%=cid%>.newLine();
<%
    }
    
    private void createAttribute(String emptyspace, XMLNode node){
%>
		out_xsd_<%=cid%>.write("<%=emptyspace%><xsd:attribute name= \"<%=node.name%>\"/>");
		out_xsd_<%=cid%>.newLine();
<%
    }
}
// ------------------- *** Dom4j generation mode end *** ------------------- //

// ------------------- *** Common code start *** ------------------- //
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
List<Map<String,String>> groupbys = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__GROUPBYS__");
String jsonField = ElementParameterParser.getValue(node, "__JSONFIELD__");
String destination4JSON = ElementParameterParser.getValue(node, "__DESTINATION__");
boolean istWriteJSONField = destination4JSON == null ? false : destination4JSON.contains("tWriteJSONField_"); 

String removeHeader = ElementParameterParser.getValue(node, "__REMOVE_HEADER__"); // add for feature7788
String allowEmpty = ElementParameterParser.getValue(node, "__CREATE_EMPTY_ELEMENT__");
String outputAsXSD = ElementParameterParser.getValue(node, "__OUTPUT_AS_XSD__");
String fileNameXSD = ElementParameterParser.getValue(node, "__XSD_FILE__");
List<Map<String, String>> rootTable = 
	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__ROOT__");
List<Map<String, String>> groupTable = 
	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__GROUP__");
List<Map<String, String>> loopTable = 
	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__LOOP__");

String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
String mode = ElementParameterParser.getValue(node, "__GENERATION_MODE__");

boolean storeFlow = ("true").equals(ElementParameterParser.getValue(node, "__STORE_FLOW__"));
String cid = node.getUniqueName();

String virtualTargetCid = node.getOutgoingConnections(EConnectionType.ON_COMPONENT_OK).get(0).getTarget().getUniqueName();

List<IMetadataTable> metadatas = node.getMetadataList();

if ((metadatas!=null)&&(metadatas.size()>0)) {
	    List< ? extends IConnection> conns = node.getIncomingConnections();
    	List< ? extends IConnection> connsOut = NodeUtil.getOutgoingConnections(node,EConnectionType.ON_COMPONENT_OK);
    	String rowStructNameOutput = null;
    	if (connsOut != null && connsOut.size() > 0 && istWriteJSONField) {
    		List< ? extends IConnection> connsTarget = connsOut.get(0).getTarget().getOutgoingConnections();
			if(connsTarget != null && connsTarget.size()>0){
				rowStructNameOutput = connsTarget.get(0).getName();
	    		rowStructNameOutput += "Struct";
			}
    	}

    	String rowNameInput = null;
    	String rowStructNameInput = null;
    	if(conns!=null && conns.size()>0 && istWriteJSONField){
    	    rowNameInput = conns.get(0).getName();
    	    rowStructNameInput = rowNameInput + "Struct";
        }

%>
if(nb_line_<%=cid %> > 0){
<%
	if(("Dom4j").equals(mode)){
		if(("true").equals(outputAsXSD)){
%>
	doc_<%=cid%>.getRootElement().addAttribute("xsi:noNamespaceSchemaLocation", <%=fileNameXSD%>);
    doc_<%=cid%>.getRootElement().addNamespace("xsi", "http://www.w3.org/2001/XMLSchema-instance");
<%
		}
%>  
    nestXMLTool_<%=cid%>.replaceDefaultNameSpace(doc_<%=cid%>.getRootElement());
<%
		if(!("true").equals(outputAsXSD) && !("true").equals(allowEmpty)){
%>
    nestXMLTool_<%=cid%>.removeEmptyElement(doc_<%=cid%>.getRootElement());
<%
		}
%>
	java.io.StringWriter strWriter_<%=cid %> = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_<%=cid%> = new org.dom4j.io.XMLWriter(strWriter_<%=cid%>, format_<%=cid%>);
	output_<%=cid%>.write(doc_<%=cid%>);
    output_<%=cid%>.close();
<%
		if(("true").equals(removeHeader)){
%>
	String removeHeader_<%=cid %> = strWriter_<%=cid %>.toString();
	if(removeHeader_<%=cid %>.indexOf("<?xml") >=0 ){
		removeHeader_<%=cid %> = removeHeader_<%=cid %>.substring(removeHeader_<%=cid %>.indexOf("?>")+3);
	}
	listGroupby_<%=cid %>.add(removeHeader_<%=cid %>);
<%
		}else{
		    String destination = ElementParameterParser.getValue(node, "__DESTINATION__");
		    if(destination.indexOf("tCouchbaseOutput_")==0 || destination.indexOf("tCouchDBOutput_")==0){
%>				
                map_<%=cid%>.put("json_<%=destination%>",strWriter_<%=cid %>.toString());
                listGroupby_<%=cid %>.add(map_<%=cid%>);
<%
		    }else{
				 if(istWriteJSONField){
				  	%>
					<%= rowStructNameOutput %> row_<%= cid %> = new <%= rowStructNameOutput %>();
						  <%
					      for(Map<String,String> map : groupbys){
								String groupByColumnName = map.get("INPUT_COLUMN");
								String outputColumnName = map.get("OUTPUT_COLUMN");
								if (!outputColumnName.equals(jsonField)) {
								%>
								row_<%= cid %>.<%= outputColumnName %> = rowStructOutput_<%= cid %>.<%= groupByColumnName %>;
								<%
								}
					       }
							%>
					     		row_<%= cid %>.<%= jsonField %> = strWriter_<%=cid %>.toString();
					     		listGroupby_<%=cid %>.add(row_<%= cid %>);
		    		<%
				}else{
					%>
					    listGroupby_<%=cid %>.add(strWriter_<%=cid %>.toString());
					<%
				}
		    }
		}
	}else if(("Null").equals(mode)){
		if(!("true").equals(outputAsXSD) && !("true").equals(allowEmpty)){
%>
	if (preUnNullMaxIndex_<%=cid%> >= 0) {
        // output all buffer
        for (int j_<%=cid%> = 0; j_<%=cid%> <= preUnNullMaxIndex_<%=cid%>; j_<%=cid%>++) {
            if (startTabs_<%=cid%>[j_<%=cid%>] != null)
                out_<%=cid%>.write(startTabs_<%=cid%>[j_<%=cid%>]);
        }

        if (preUnNullMaxIndex_<%=cid%> < preNewTabIndex_<%=cid%> ) {
			for (int i_<%=cid%> = preNewTabIndex_<%=cid%> - 1; i_<%=cid%> >= 0; i_<%=cid%>--) {
			    if(endTabs_<%=cid %>[i_<%=cid%>]!=null){
            		out_<%=cid%>.write(endTabs_<%=cid %>[i_<%=cid%>]);
            	}
                out_<%=cid%>.newLine();
                out_<%=cid%>.write(endTabStrs_<%=cid%>.get(i_<%=cid%>));
            }
        } else {
            for (int i_<%=cid%> = preUnNullMaxIndex_<%=cid%>; i_<%=cid%> >= 0; i_<%=cid%>--) {
            	if(endTabs_<%=cid %>[i_<%=cid%>]!=null){
            		out_<%=cid%>.write(endTabs_<%=cid %>[i_<%=cid%>]);
            	}
                out_<%=cid%>.newLine();
                out_<%=cid%>.write(endTabStrs_<%=cid%>.get(i_<%=cid%>));
            }
        }
    }
<%
		}else{
			if(loopTable.size()>0){
%>
	if(nb_line_<%=cid%> > 0){
    	for (int i_<%=cid%> = endTabStrs_<%=cid%>.size() - 1; i_<%=cid%> >= 0; i_<%=cid%>--) {
        	if(endTabs_<%=cid %>[i_<%=cid%>]!=null){
        		out_<%=cid%>.write(endTabs_<%=cid %>[i_<%=cid%>]);
        	}
            out_<%=cid%>.newLine();
            out_<%=cid%>.write(endTabStrs_<%=cid%>.get(i_<%=cid%>));
        }
    }
<%
			}
		}
%>
	out_<%=cid%>.newLine();
	out_<%=cid%>.close();
	
	listGroupby_<%=cid %>.add(strWriter_<%=cid %>.toString());
<%
	}
%>

<%

// ------------------- *** xsd output code start *** ------------------- //
	if(("true").equals(outputAsXSD)){

        // change tables to a tree 
		Object[] treeObjs = getTree(rootTable, groupTable, loopTable, metadatas.get(0).getListColumns());
    	List<XMLNode> mainList = (ArrayList<XMLNode>)treeObjs[0];
        XMLNode root = mainList.get(0);

        if(!("true").equals(allowEmpty)){
        	removeEmptyElement(root);
        }

		if(("Dom4j").equals(mode)){
%>
	org.dom4j.Document doc_xsd_<%=cid%>  = org.dom4j.DocumentHelper.createDocument();
	
	org.dom4j.Element root_xsd_<%=cid%> = doc_xsd_<%=cid%>.addElement("xsd:schema");
    root_xsd_<%=cid%>.addNamespace("xsd", "http://www.w3.org/2001/XMLSchema");
<%
	XSDToolByDom4j xsdTool = new XSDToolByDom4j();
	xsdTool.cid = cid;
	xsdTool.generateXSD("root_xsd","ele_xsd",root);
%>
	java.io.FileOutputStream stream_xsd_<%=cid%> = new java.io.FileOutputStream(<%=fileNameXSD%>);
    org.dom4j.io.XMLWriter output_xsd_<%=cid%> = new org.dom4j.io.XMLWriter(stream_xsd_<%=cid%>, format_<%=cid%>);
    output_xsd_<%=cid%>.write(doc_xsd_<%=cid%> );
    output_xsd_<%=cid%>.close();
<%
		}else if(("Null").equals(mode)){
%>
	java.io.BufferedWriter out_xsd_<%=cid%> = new java.io.BufferedWriter(
		new java.io.OutputStreamWriter(new java.io.FileOutputStream(<%=fileNameXSD%>), <%=encoding%>));
	out_xsd_<%=cid%>.write("<xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
	out_xsd_<%=cid%>.newLine();
<%
	XSDToolByNull xsdTool = new XSDToolByNull();
	xsdTool.cid=cid;
	xsdTool.generateXSD("  ",root);
%>
	out_xsd_<%=cid%>.write("</xsd:schema>");
	out_xsd_<%=cid %>.close();
<%
		}
    }
%>
}
globalMap.put("<%=cid %>_NB_LINE",nb_line_<%=cid %>);
globalMap.put("<%=virtualTargetCid%>_FINISH" + (listGroupby_<%=cid%>==null?"":listGroupby_<%=cid%>.hashCode()), "true");
	<%
	IConnection nextMergeConn = NodeUtil.getNextMergeConnection(node);
	if(nextMergeConn == null || nextMergeConn.getInputId()==1){
	%>
		txf_<%=cid%>.join();
		if(txf_<%=cid%>.getLastException()!=null) {
			currentComponent = txf_<%=cid%>.getCurrentComponent();
			throw txf_<%=cid%>.getLastException();
		}
	<%
	}
}
%>
resourceMap.put("finish_<%=cid%>", true);