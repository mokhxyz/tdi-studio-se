<%@ jet 
  imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.IElementParameter
    org.talend.core.model.utils.NodeUtil 
  " 
%>
<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%> 
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
String host = ElementParameterParser.getValue(node, "__HOST__");
String port = ElementParameterParser.getValue(node, "__PORT__");
String user = ElementParameterParser.getValue(node, "__USER__");
boolean use_encoding = "true".equals(ElementParameterParser.getValue(node, "__USE_ENCODING__"));

String connectMode = ElementParameterParser.getValue(node, "__CONNECT_MODE__");
boolean useProxy = ("true").equals(ElementParameterParser.getValue(node, "__USE_PROXY__"));
String proxyHost = ElementParameterParser.getValue(node, "__PROXY_HOST__");
String proxyPort = ElementParameterParser.getValue(node, "__PROXY_PORT__");
String proxyUser = ElementParameterParser.getValue(node, "__PROXY_USERNAME__");
boolean sftp = ("true").equals(ElementParameterParser.getValue(node, "__SFTP__"));
String authMethod = ElementParameterParser.getValue(node, "__AUTH_METHOD__");
String privateKey = ElementParameterParser.getValue(node, "__PRIVATEKEY__");
boolean ftps = ("true").equals(ElementParameterParser.getValue(node, "__FTPS__"));
String keystoreFile = ElementParameterParser.getValue(node, "__KEYSTORE_FILE__");
String sEncoding = ElementParameterParser.getValue(node, "__ENCODING__");
String securityMode = ElementParameterParser.getValue(node, "__SECURITY_MODE__");

boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
String passwordFieldName = "";

if (useProxy) {
%>  
  java.util.Properties props_<%=cid%> = System.getProperties();
  props_<%=cid%>.put("socksProxyPort", <%=proxyPort %>);
  props_<%=cid%>.put("socksProxyHost", <%=proxyHost %>);
  props_<%=cid%>.put("java.net.socks.username", <%=proxyUser %>);
  
<%
passwordFieldName = "__PROXY_PASSWORD__";
if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
%> 
  String decryptedProxyPassword_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
<%} else {%>
  String decryptedProxyPassword_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
<%}%>

  props_<%=cid%>.put("java.net.socks.password", decryptedProxyPassword_<%=cid%>);
<%
}

if (!sftp && !ftps) { // *** ftp *** //
  	if(isLog4jEnabled){%>
		log.debug("<%=cid%> - " + <%=(("ACTIVE").equals(connectMode))?"\"Using the active mode.\"":"\"Using the passive mode.\""%>);
	<%}%>
	com.enterprisedt.net.ftp.FTPClient ftp_<%=cid %> = new com.enterprisedt.net.ftp.FTPClient();
	ftp_<%=cid %>.setRemoteHost(<%=host %>);
	ftp_<%=cid %>.setRemotePort(<%=port %>);

	<%if (("ACTIVE").equals(connectMode)) {%>
    	ftp_<%=cid %>.setConnectMode(com.enterprisedt.net.ftp.FTPConnectMode.ACTIVE);
	<%} else {%>
    	ftp_<%=cid %>.setConnectMode(com.enterprisedt.net.ftp.FTPConnectMode.PASV);
	<%}%>
	ftp_<%=cid %>.setControlEncoding(<%=sEncoding%>);
	<%if(isLog4jEnabled){%>
		log.info("<%=cid%> - Attempt to connect to '" + <%=host %> + "' with username '" +<%=user %>+ "'.");
	<%}%>
	ftp_<%=cid %>.connect();  
	
	<%
	passwordFieldName = "__PASS__";
	%> 
		        
	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
   	
	ftp_<%=cid %>.login(<%=user %>, decryptedPassword_<%=cid%>);  
  	<%if(isLog4jEnabled){%>
		log.info("<%=cid%> - Connect to '" + <%=host %> + "' has succeeded.");
	<%}%>
	globalMap.put("conn_<%=cid%>",ftp_<%=cid %>);
<%
} else if (!ftps) { // *** sftp *** //
%>
	class MyUserInfo implements com.jcraft.jsch.UserInfo, com.jcraft.jsch.UIKeyboardInteractive {
	
        <%
        passwordFieldName = "__PASSPHRASE__";
        if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
        %> 
      		String decryptedPassphrase_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
        <%} else {%>
      		String decryptedPassphrase_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
        <%}%>

		String passphrase_<%=cid %> = decryptedPassphrase_<%=cid%>;

		public String getPassphrase() { return passphrase_<%=cid %>; }

		public String getPassword() { return null; } 

		public boolean promptPassword(String arg0) { return true; } 

		public boolean promptPassphrase(String arg0) { return true; } 

		public boolean promptYesNo(String arg0) { return true; } 

		public void showMessage(String arg0) { } 

		public String[] promptKeyboardInteractive(String destination, String name, String instruction, String[] prompt,
		boolean[] echo) {
		
    	<%
    	passwordFieldName = "__PASS__";
    	%> 
    	
    	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
    	
			String[] password_<%=cid%> = {decryptedPassword_<%=cid%>};
			return password_<%=cid%>;
		}
	};
	final com.jcraft.jsch.UserInfo defaultUserInfo_<%=cid%> = new MyUserInfo();
	com.jcraft.jsch.JSch jsch_<%=cid%> = new com.jcraft.jsch.JSch(); 

	<%if (("PUBLICKEY").equals(authMethod)){%>
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - SFTP authentication using a public key.");
			log.debug("<%=cid%> - Private key: '" + <%=privateKey%> + "'.");
		<%}%>
		jsch_<%=cid%>.addIdentity(<%=privateKey %>, defaultUserInfo_<%=cid%>.getPassphrase());
	<%}%>
	
	com.jcraft.jsch.Session session_<%=cid%> = jsch_<%=cid%>.getSession(<%=user%>, <%=host%>, <%=port%>);
	session_<%=cid%>.setConfig("PreferredAuthentications", "publickey,password,keyboard-interactive,gssapi-with-mic");
	
	<%if (("PASSWORD").equals(authMethod)) {%> 
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - SFTP authentication using a password.");
		<%}%>
	        
		<%
		passwordFieldName = "__PASS__";
		%>
    		
		<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
	   	
		session_<%=cid%>.setPassword(decryptedPassword_<%=cid%>); 
	<%}%>

	session_<%=cid%>.setUserInfo(defaultUserInfo_<%=cid%>); 
	<%if (!useProxy) {%>
		if(("true").equals(System.getProperty("http.proxySet")) ){
			com.jcraft.jsch.ProxyHTTP proxy_<%=cid%> = new com.jcraft.jsch.ProxyHTTP(System.getProperty("http.proxyHost"),Integer.parseInt(System.getProperty("http.proxyPort")));
			if(!"".equals(System.getProperty("http.proxyUser"))){
				proxy_<%=cid%>.setUserPasswd(System.getProperty("http.proxyUser"),System.getProperty("http.proxyPassword"));
			}
			session_<%=cid%>.setProxy(proxy_<%=cid%>);
		}
	<%}%>
  	<%if(isLog4jEnabled){%>
		log.info("<%=cid%> - Attempt to connect to  '" + <%=host %> + "' with username '" + <%=user%> + "'.");
	<%}%>
	session_<%=cid%>.connect();
	com.jcraft.jsch. Channel channel_<%=cid%> = session_<%=cid%>.openChannel("sftp"); 
	channel_<%=cid%>.connect();
  	<%if(isLog4jEnabled){%>
		log.info("<%=cid%> - Connect to '" + <%=host %> + "' has succeeded.");
	<%}%>
	com.jcraft.jsch.ChannelSftp c_<%=cid%> = (com.jcraft.jsch.ChannelSftp)channel_<%=cid%>;
	
	<%if(use_encoding) {%>
		c_<%=cid%>.setFilenameEncoding(<%=sEncoding%>);
	<%}%>
	
	globalMap.put("conn_<%=cid%>", c_<%=cid%>);
<%
} else {  // *** ftps *** //
%>
	class MyTrust_<%=cid%>{

		private javax.net.ssl.TrustManager[] getTrustManagers() 
		throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, 
			java.security.cert.CertificateException, java.security.UnrecoverableKeyException,
			java.io.FileNotFoundException, java.io.IOException{
      		java.security.KeyStore ks = java.security.KeyStore.getInstance("JKS");
      			        
            <%
            passwordFieldName = "__KEYSTORE_PASS__";
            if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
            %> 
              String decryptedKeyStorePassword_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
            <%} else {%>
              String decryptedKeyStorePassword_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
            <%}%>
	        
     		ks.load(new java.io.FileInputStream(<%=keystoreFile%>), decryptedKeyStorePassword_<%=cid%>.toCharArray());
      		javax.net.ssl.TrustManagerFactory tmf = javax.net.ssl.TrustManagerFactory.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
      		tmf.init(ks);
      		return tmf.getTrustManagers();
    	}
	}
	javax.net.ssl.SSLContext sslContext = null;
	javax.net.ssl.TrustManager[] trustManager = null;
	javax.net.ssl.SSLSocketFactory sslSocketFactory = null;
	it.sauronsoftware.ftp4j.FTPClient ftp_<%=cid %> =null;
	MyTrust_<%=cid%> myTrust_<%=cid%> = null;

	try {
		sslContext = javax.net.ssl.SSLContext.getInstance("SSL");
		myTrust_<%=cid%> = new MyTrust_<%=cid%>();
		trustManager = myTrust_<%=cid%>.getTrustManagers();
		sslContext.init(null, trustManager, new java.security.SecureRandom());
		sslSocketFactory = sslContext.getSocketFactory();
		ftp_<%=cid %> = new it.sauronsoftware.ftp4j.FTPClient();
		ftp_<%=cid %>.setSSLSocketFactory(sslSocketFactory);
		ftp_<%=cid %>.setCharset(<%=sEncoding%>);
<%
		if("IMPLICIT".equals(securityMode)){
%>
			ftp_<%=cid %>.setSecurity(it.sauronsoftware.ftp4j.FTPClient.SECURITY_FTPS);
<%
		}else if("EXPLICIT".equals(securityMode)){
%>
			ftp_<%=cid %>.setSecurity(it.sauronsoftware.ftp4j.FTPClient.SECURITY_FTPES);
<%
		}
%>
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> -FTPS security Mode is <%=securityMode%>.");
			log.info("<%=cid%> - Attempt to connect to '" + <%=host %> + "' with username '" + <%=user %>+ "'.");
		<%}%>
    	ftp_<%=cid %>.connect(<%=host %>,<%=port %>);
  		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Connect to '" + <%=host %> + "' has succeeded.");
		<%}%>
	        
		<%
		passwordFieldName = "__PASS__";
		%>
		
		<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
	   	
    	ftp_<%=cid %>.login(<%=user %>, decryptedPassword_<%=cid%>);
  	} catch (java.lang.IllegalStateException e) {
		<%if(isLog4jEnabled){%>
			log.error("<%=cid%> - " + e.getMessage());
		<%}%>
    	e.printStackTrace();
	} catch (java.io.IOException e) {
		<%if(isLog4jEnabled){%>
			log.error("<%=cid%> - " + e.getMessage());
		<%}%>
		e.printStackTrace();
	} catch (it.sauronsoftware.ftp4j.FTPIllegalReplyException e) {
		<%if(isLog4jEnabled){%>
			log.error("<%=cid%> - " + e.getMessage());
		<%}%>
		e.printStackTrace();
	} catch (it.sauronsoftware.ftp4j.FTPException e) {
		<%if(isLog4jEnabled){%>
			log.error("<%=cid%> - " + e.getMessage());
		<%}%>
		e.printStackTrace();
	}
	globalMap.put("conn_<%=cid%>", ftp_<%=cid %>);
<%
}
%>
