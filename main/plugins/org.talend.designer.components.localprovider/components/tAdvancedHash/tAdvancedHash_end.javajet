<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.IConnection
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.ElementParameterParser
		java.util.List
		org.talend.core.model.process.EConnectionType
		org.talend.core.model.process.IHashableInputConnections
		org.talend.core.model.process.IHashConfiguration
		org.talend.core.model.process.IDataConnection
		org.talend.designer.mapper.external.data.ExternalMapperData
		org.talend.designer.mapper.external.data.ExternalMapperTable
	"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	List<IConnection> connections = (List<IConnection>) node.getIncomingConnections();

	if (connections != null && connections.size() > 0) {
        for (IConnection connection : connections) {
        	String connectionName = connection.getName();
			INode validTarget = ((IDataConnection) connection).getLinkNodeForHash();
			boolean memoryStorage = true;
			
			boolean isOneOfReloadLookupMode = false;
			
			if(validTarget != null) {
				IHashConfiguration hashConfiguration = null;				
				boolean bSortOnDisk = "true".equals(ElementParameterParser.getValue(node, "__SORT_ON_DISK__")); 
				
			    if (validTarget instanceof IHashableInputConnections){
					IHashableInputConnections target = (IHashableInputConnections) validTarget;
					hashConfiguration = target.getHashConfiguration(connection.getName());
					
					if("tMap".equals(validTarget.getComponent().getName())) {
    					ExternalMapperData externalData = (ExternalMapperData) (validTarget.getExternalData());
        				List<ExternalMapperTable> inputTables = externalData.getInputTables();
    					for (ExternalMapperTable inputTable : inputTables) {
                			if (inputTable.getName().equals(connection.getName())) {
                				boolean isReloadLookupMode = org.talend.designer.mapper.model.table.LOOKUP_MODE.RELOAD.name().equals(inputTable.getLookupMode());
    							boolean isCacheOrReloadLookupMode = org.talend.designer.mapper.model.table.LOOKUP_MODE.CACHE_OR_RELOAD.name().equals(inputTable.getLookupMode());
    							isOneOfReloadLookupMode = isReloadLookupMode || isCacheOrReloadLookupMode;
                				break;
                			}
            			}
					}
				} 
				memoryStorage = !(hashConfiguration != null && hashConfiguration.isPersistent() || bSortOnDisk);
            
			boolean includeParallelComps = false;
   			INode partitionNode = validTarget.getDesignSubjobStartNode();
   			if ("tCollector".equals(partitionNode.getComponent().getName())) {
				includeParallelComps = true;
				partitionNode = partitionNode.getIncomingConnections(EConnectionType.STARTS).get(0).getSource();
			}
%>
tHash_Lookup_<%=connectionName%>.endPut();
<%
			if (includeParallelComps && memoryStorage && !isOneOfReloadLookupMode) {
%>
java.util.List<java.util.Map<String,Object>> mapsList_<%=cid%> = 
	(java.util.List<java.util.Map<String,Object>>)globalMap.get("THREAD_MAPS_<%=partitionNode.getUniqueName()%>_"+jobName);
	if (mapsList_<%=cid%> != null) {
	

			for (java.util.Map<String,Object> map : mapsList_<%=cid%>) {
					org.talend.designer.components.lookup.memory.ConcurrentAdvancedMemoryLookup
			   							<<%=connectionName%>Struct> tmp = (org.talend.designer.components.lookup.memory.ConcurrentAdvancedMemoryLookup
			   							<<%=connectionName%>Struct>)tHash_Lookup_<%=connectionName%>;
				if (globalMap != map) {
				
					
					//map.put("MAP_POPULATED_<%=connectionName%>",Boolean.TRUE);			   							
					
					map.put("tHash_Lookup_<%=connectionName%>",new org.talend.designer.components.lookup.memory.ConcurrentAdvancedMemoryLookup
			   							<<%=connectionName%>Struct>(tmp));			   							
			   		while (map.get("tHash_Lookup_<%=connectionName%>") == null) {
			   			Thread.sleep(1);
			   		}
			   	
				} 
			}

	}

} 
} catch (java.lang.Exception ex) {
	globalMap.put("THREADS_HAVE_ERROR",ex);
	throw ex;
} catch (Error er) {
	globalMap.put("THREADS_HAVE_ERROR",er);
	throw er;
}

}//end synchronized


<%
			
			}
			
			}
		}
	}
%>
