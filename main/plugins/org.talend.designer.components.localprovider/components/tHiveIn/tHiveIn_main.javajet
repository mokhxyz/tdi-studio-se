<%@ jet
imports="
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.metadata.MappingTypeRetriever
        org.talend.core.model.metadata.MetadataTalendType
		org.talend.designer.runprocess.ProcessorException
		org.talend.designer.runprocess.ProcessorUtilities
		java.util.List
		java.util.Map
		java.util.Set
		java.util.HashSet
		"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	final String cid = node.getUniqueName();
	String processId = node.getProcess().getId();

	String dbname = ElementParameterParser.getValue(node, "__DBNAME__");
	boolean useParquet = "true".equals(ElementParameterParser.getValue(node,"__USE_PARQUET__"));
	String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	boolean isLog4jEnabled = "true".equals(org.talend.core.model.process.ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));

	String dbquery= ElementParameterParser.getValue(node, "__QUERY__");
	dbquery = org.talend.core.model.utils.NodeUtil.replaceCRLFInMEMO_SQL(dbquery);
%>

	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Hive/GetAzureConnection.javajet"%>
<%
	if("false".equals(useExistingConn)) { // This variable is declared and initialized in the GetAzureConnection.javajet
		boolean setMemory = "true".equals(ElementParameterParser.getValue(node, "__SET_MEMORY__"));
		if(setMemory) {
			String mapMemory = ElementParameterParser.getValue(node,"__MAPREDUCE_MAP_MEMORY_MB__");
			String reduceMemory = ElementParameterParser.getValue(node,"__MAPREDUCE_REDUCE_MEMORY_MB__");
			String amMemory = ElementParameterParser.getValue(node,"__YARN_APP_MAPREDUCE_AM_RESOURCE_MB__");
%>
			bw_<%=cid%>.write("SET mapreduce.map.memory.mb=" + <%=mapMemory%> + ";");
			bw_<%=cid%>.write("SET mapreduce.reduce.memory.mb=" + <%=reduceMemory%> + ";");
			bw_<%=cid%>.write("SET yarn.app.mapreduce.am.resource.mb=" + <%=amMemory%> + ";");
<%
		}

		List<Map<String, String>> advProps = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__ADVANCED_PROPERTIES__");
		if(advProps!=null) {
			for(Map<String, String> item : advProps){
%>
				bw_<%=cid%>.write("SET "+<%=item.get("PROPERTY")%>+"="+<%=item.get("VALUE")%> + ";");
<%
			}
		}
%>
		String dbname_<%=cid%> = <%=dbname%>;
		if(dbname_<%=cid%>!=null && !"".equals(dbname_<%=cid%>.trim()) && !"default".equals(dbname_<%=cid%>.trim())) {
			bw_<%=cid%>.write("use " + dbname_<%=cid%> + ";");
		}
<%
	}

	// Register jars

	java.util.List<String> jarsToRegister = null;
	java.util.List<String> jars = null;
	String[] commandLine = new String[] {"<command>"};
	try {
		commandLine = ProcessorUtilities.getCommandLine("win32",true, processId, "",org.talend.designer.runprocess.IProcessor.NO_STATISTICS,org.talend.designer.runprocess.IProcessor.NO_TRACES, new String[]{});
	} catch (ProcessorException e) {
		e.printStackTrace();
	}

	jarsToRegister = new java.util.ArrayList();

    if(useParquet) {
	  jarsToRegister.add("snappy-java");
	  jarsToRegister.add("parquet-hive-bundle");
	}
	jarsToRegister.add("jets3t");

	for (int j = 0; j < commandLine.length; j++) {
		if(commandLine[j].contains("jar")) {
			jars = java.util.Arrays.asList(commandLine[j].split(";"));
			break;
		}
	}


	if(jarsToRegister!=null && jars!=null) {
%>
		routines.system.GetJarsToRegister getJarsToRegister_<%=cid %> = new routines.system.GetJarsToRegister();
<%
		for(int i=0; i<jarsToRegister.size(); i++) {
			String jarToRegister = jarsToRegister.get(i);
			for(int j=0; j<jars.size(); j++) {
				if(jars.get(j).contains(jarToRegister)) {
%>
					bw_<%=cid%>.write("ADD JAR " + wasbPath_<%=cid%> + new java.io.File(getJarsToRegister_<%=cid %>.replaceJarPaths("<%=jars.get(j)%>")).getName() + ";");
					libjars_<%=cid%>.append(getJarsToRegister_<%=cid %>.replaceJarPaths("<%=jars.get(j)%>") + ",");
<%
				}
			}
		}
	}

	// End of parquet format handling.
%>

	bw_<%=cid%>.write(<%=dbquery%> + ";");
	globalMap.put("<%=cid.replaceAll("tHiveIn", "tHiveInput")%>_QUERY", <%=dbquery%>);

	bw_<%=cid%>.close();
	if(libjars_<%=cid%>.length() > 0) {
			instance_<%=cid%>.setLibJars(libjars_<%=cid%>.toString().substring(0, libjars_<%=cid%>.length()-1));
	}
	instance_<%=cid%>.callWS(instance_<%=cid%>.sendFiles());
	int exitCode_<%=cid%> = instance_<%=cid%>.execute();
	if(exitCode_<%=cid%> > 0) {

<%
		if(("true").equals(dieOnError)) {
%>
			throw new Exception("The Hive job failed. Please read the logs for more details");
<%
		} else {
%>
			System.err.println("The Hive job failed. Please read the logs for more details");
<%
			if(isLog4jEnabled) {
%>
				log.error("<%=cid%> - The Hive job failed. Please read the logs for more details");
<%
			}
		}
%>
	}

	java.io.InputStream <%=ElementParameterParser.getValue(node, "__INPUT_STREAM_NAME__")%> = instance_<%=cid%>.getStdOut();
