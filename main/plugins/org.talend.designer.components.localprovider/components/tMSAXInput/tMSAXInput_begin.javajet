<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List
		"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
        
String axHost = ElementParameterParser.getValue(node, "__HOST__");
String axDomain = ElementParameterParser.getValue(node, "__DOMAIN__");
String axUser = ElementParameterParser.getValue(node, "__USER__");

String axTable = ElementParameterParser.getValue(node, "__TABLE__");
String dbquery = ElementParameterParser.getValue(node, "__QUERY__");
	   dbquery = dbquery.replaceAll("\n"," ");
	   dbquery = dbquery.replaceAll("\r"," ");
String connectionType = ElementParameterParser.getValue(node, "__CONNECTION_TYPE__");
String assemblyName = ElementParameterParser.getValue(node, "__ASSEMBLY_NAME__");
String port = ElementParameterParser.getValue(node, "__PORT__");
String aosServer = ElementParameterParser.getValue(node, "__AOS_SERVER_INSTANCE__");
String company = ElementParameterParser.getValue(node, "__COMPANY__");
String language = ElementParameterParser.getValue(node, "__LANGUAGE__");
String configurationFile = ElementParameterParser.getValue(node, "__CONFIGURATION_FILE__");

List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
	if (metadata!=null) {
        List<IMetadataColumn> columnList = metadata.getListColumns();
    	class VariantTool{
    		public String vStr(String value){
    			return "new org.jinterop.dcom.core.JIVariant(new org.jinterop.dcom.core.JIString("+value+"))";
    		}
    		public String vInt(int value){
    			return "new org.jinterop.dcom.core.JIVariant("+value+")";
    		}
    	}
    	VariantTool vTool = new VariantTool();
        %>
        int nb_line_<%=cid%> = 0;
        
		<%
		String passwordFieldName = "__PASS__";
		%>

		<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>        
        
        <%
        if("DCOM".equals(connectionType)){
        %>
            //connect to com server
            org.jinterop.dcom.common.JISystem.setAutoRegisteration(true);
            org.jinterop.dcom.core.JISession session_<%=cid%> = org.jinterop.dcom.core.JISession.createSession(<%=axDomain%>, <%=axUser%>, decryptedPassword_<%=cid%>);
            org.jinterop.dcom.core.JIClsid clsid_<%=cid%> = org.jinterop.dcom.core.JIClsid.valueOf("71421B8A-81A8-4373-BD8D-E0D83B0B3DAB");
            org.jinterop.dcom.core.JIComServer comServer_<%=cid%> = new org.jinterop.dcom.core.JIComServer(clsid_<%=cid%>, <%=axHost%>, session_<%=cid%>);

            //get IAxapta3 interface
            org.jinterop.dcom.core.IJIComObject comObject_<%=cid%> = comServer_<%=cid%>.createInstance();
            org.jinterop.dcom.win32.IJIDispatch  axapta3_<%=cid%> = (org.jinterop.dcom.win32.IJIDispatch) org.jinterop.dcom.win32.ComFactory.createCOMInstance(
                    org.jinterop.dcom.win32.ComFactory.IID_IDispatch, comObject_<%=cid%>);

		    //logon ax server
		    axapta3_<%=cid%>.callMethod("Logon", 
			    new Object[] { <%=vTool.vStr("\"\"")%>, <%=vTool.vStr("\"\"")%>, <%=vTool.vStr("\"\"")%>, <%=vTool.vStr("\"\"")%> });
	
		    //init record
		    org.jinterop.dcom.core.JIVariant[] results_<%=cid%> = axapta3_<%=cid%>.callMethodA("CreateRecord", new Object[]{<%=vTool.vStr(axTable)%> });
		    org.jinterop.dcom.win32.IJIDispatch record_<%=cid%> = (org.jinterop.dcom.win32.IJIDispatch) results_<%=cid%>[0].getObjectAsComObject(comObject_<%=cid%>);
		
		    //exe the SQL query
		    String sqlstmt_<%=cid%> = <%=dbquery%>;
		    org.jinterop.dcom.core.JIVariant sqlStmtVar_<%=cid%> = new org.jinterop.dcom.core.JIVariant(new org.jinterop.dcom.core.JIString(sqlstmt_<%=cid%>));
		    record_<%=cid%>.callMethod("ExecuteStmt", new Object[] { sqlStmtVar_<%=cid%>});

			java.util.Calendar calendar_<%=cid%> = java.util.Calendar.getInstance();
			calendar_<%=cid%>.set(0, 0, 0, 0, 0, 0);
			java.util.Date year0_<%=cid%> = calendar_<%=cid%>.getTime();
			globalMap.put("<%=cid %>_QUERY",<%=dbquery%>);
			
			//loop record
			while(record_<%=cid%>.get("Found").getObjectAsBoolean()){
				nb_line_<%=cid%>++;
				<%
		        if(conns != null && conns.size()>0){
		         	IConnection conn = conns.get(0);
		         	String firstConnName = conn.getName();
		         	for(IMetadataColumn column:columnList){
		             	String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
		             	String defVal = JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate);
		             	if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))
		             	{
						%> 	
							{
								org.jinterop.dcom.core.JIVariant[] field_<%=cid%> =  record_<%=cid%>.get("field", new Object[] { <%=vTool.vStr("\""+column.getLabel()+"\"")%> });
								<%
			            		if(("byte[]").equals(typeToGenerate)){
			            			typeToGenerate = "Bytes";
			            		}else if(("java.util.Date").equals(typeToGenerate)){
			            			typeToGenerate = "Date";
			                    }else if(("Integer").equals(typeToGenerate)){
			                      	typeToGenerate = "Int";
			                    }else{
			                    	typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
			                    }
								%>
							 	if(field_<%=cid%>!=null && field_<%=cid%>.length>0 && field_<%=cid%>[0].getObject() != null)
							 	{
									<%
					 				if (("List").equals(typeToGenerate)) {
									%>
										<%=firstConnName%>.<%=column.getLabel()%> = (List)field_<%=cid%>[0].getObjectAsArray().getArrayInstance();
									<%
									}else if(("Object").equals(typeToGenerate)){
									%>
										<%=firstConnName%>.<%=column.getLabel()%> = field_<%=cid%>[0].getObject();
									<%
									}else if(("String").equals(typeToGenerate)){
									%>
										<%=firstConnName%>.<%=column.getLabel()%> = field_<%=cid%>[0].getObjectAsString().getString();
									<%
									}else{
									%>
										<%=firstConnName%>.<%=column.getLabel()%> = field_<%=cid%>[0].getObjectAs<%=typeToGenerate%>();
									<%
									}
									%>
					 			}else{
									<%
				    				if(column.isNullable()){
									%>
				 						<%=firstConnName%>.<%=column.getLabel()%> = null;
									<%
						 			}else{
									%>    
						 				throw new RuntimeException("Null value in non-Nullable column");
									<%
				            		}
									%>
			 					}
			 				}	
						<%
			    		}
			 		}
		         	if(conns.size()>1){
		         		for(int connNO = 1; connNO < conns.size(); connNO++){
		        			IConnection conn2 = conns.get(connNO);
		        			if((conn2.getName().compareTo(firstConnName)!=0)&&(conn2.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))){
		        				for(IMetadataColumn column:columnList){
								%>
				 		   			<%=conn2.getName()%>.<%=column.getLabel()%>=<%=firstConnName%>.<%=column.getLabel()%>;
								<% 
	        					}
	        				}
	         			}
	         		}
				}
			//}while on end part
		}else{
		%>
		    //init .NET businnes connector
		    org.talend.net.Object netBC_<%=cid%> = org.talend.net.Object.createInstance(<%=assemblyName%>,"Microsoft.Dynamics.BusinessConnectorNet.Axapta");
		    //logon ax server
		    org.talend.net.Object cred_<%=cid%> = org.talend.net.Object.createInstance(
                "System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "System.Net.NetworkCredential",
                new java.lang.Object[] { <%=axUser%>, decryptedPassword_<%=cid%>, <%=axDomain%> });
		    
		    netBC_<%=cid%>.invoke("LogonAs", new Object[]{<%=axUser%>,<%=axDomain%>,cred_<%=cid%>,<%=company%>,<%=language%>,<%=aosServer%>+"@"+<%=axHost%>+":"+<%=port%>,<%=configurationFile%>});

         	//Create a record for a specific table.
	        org.talend.net.Object dynRec_<%=cid%> = netBC_<%=cid%>.invoke("CreateAxaptaRecord",new Object[]{<%=axTable%>});
	        dynRec_<%=cid%>.invoke("ExecuteStmt", new Object[]{<%=dbquery%>});
		    while(((Boolean)dynRec_<%=cid%>.accessGenericProperty("Found")).booleanValue()){
		    	nb_line_<%=cid%>++;
				<%
		        if(conns != null && conns.size()>0){
		         	IConnection conn = conns.get(0);
		         	String firstConnName = conn.getName();
	             	if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
			         	for(IMetadataColumn column:columnList){
			             	String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
			             	JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
							String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
							String columnName = column.getLabel();	
							%> 	
							{
								Object field_<%=cid%> =  dynRec_<%=cid%>.invokeGeneric("get_Field",new Object[]{"<%=column.getLabel()%>"});
								if(field_<%=cid%> != null){
									<%
									if(javaType == JavaTypesManager.STRING){
									%>
										<%=firstConnName%>.<%=columnName%> = (String)field_<%=cid%>;	
									<%
									}else if(javaType == JavaTypesManager.INTEGER){
									%>
										<%=firstConnName%>.<%=columnName%> = (Integer)field_<%=cid%>;	
									<%	
									}else if(javaType == JavaTypesManager.LONG){
									%>
										<%=firstConnName%>.<%=columnName%> = (Long)field_<%=cid%>;	
									<%	
									}else if(javaType == JavaTypesManager.FLOAT){
									%>
										<%=firstConnName%>.<%=columnName%> = (Float)field_<%=cid%>;	
									<%	
									}else if(javaType == JavaTypesManager.BOOLEAN){
									%>
										<%=firstConnName%>.<%=columnName%> = (Boolean)field_<%=cid%>;	
									<%	
									}else if(javaType == JavaTypesManager.BYTE){
									%>
										<%=firstConnName%>.<%=columnName%> = (Byte)field_<%=cid%>;	
									<%	
									}else if(javaType == JavaTypesManager.CHARACTER){
									%>
										<%=firstConnName%>.<%=columnName%> = (Character)field_<%=cid%>;	
									<%	
									}else if(javaType == JavaTypesManager.DOUBLE){
									%>
										<%=firstConnName%>.<%=columnName%> = (Double)field_<%=cid%>;	
									<%	
									}else if(javaType == JavaTypesManager.BYTE_ARRAY){
									%>
										<%=firstConnName%>.<%=columnName%> = field_<%=cid%>.toString().getBytes();	
									<%	
									}else if(javaType == JavaTypesManager.DATE){
									%>
										<%=firstConnName%>.<%=columnName%> = (Date)field_<%=cid%>;
									<%
									}else if(javaType == JavaTypesManager.SHORT){
									%>
										<%=firstConnName%>.<%=columnName%> = (Short)field_<%=cid%>;
									<%
									}else if(javaType == JavaTypesManager.BIGDECIMAL) {
									%> 
										<%=firstConnName%>.<%=columnName%> = (BigDecimal)field_<%=cid%>;
									<%
									} else { 
									%>
										<%=firstConnName%>.<%=columnName%> = ParserUtils.parseTo_<%=typeToGenerate%>(field_<%=cid%>.toString());
									<%
									}
									%>
								}else{
									<%
				    				if(column.isNullable()){
									%>
				 						<%=firstConnName%>.<%=column.getLabel()%> = null;
									<%
						 			}else{
									%>    
						 				throw new RuntimeException("Null value in non-Nullable column");
									<%
				            		}
									%>
								}
							}
						<%
			    		}
			 		}
				}
			//}while on end part
		}			
	}
}
%>

