<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.IConnection
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		org.talend.core.model.process.IHashableInputConnections
		org.talend.core.model.process.IHashConfiguration
		org.talend.core.model.process.IHashableColumn
		org.talend.core.model.process.IMatchingMode
		java.util.List
		java.util.ArrayList
		java.util.Map
		java.util.HashMap
		java.util.Comparator
		java.util.Collections
		org.talend.core.model.process.IDataConnection
		org.talend.designer.xmlmap.XmlMapComponent
		org.eclipse.emf.common.util.EList
		org.talend.designer.xmlmap.model.emf.xmlmap.InputXmlTree
		org.talend.designer.xmlmap.model.emf.xmlmap.OutputXmlTree
		org.talend.designer.xmlmap.model.emf.xmlmap.VarTable
		org.talend.designer.xmlmap.model.emf.xmlmap.TreeNode
		org.talend.designer.xmlmap.model.emf.xmlmap.OutputTreeNode
		org.talend.designer.xmlmap.model.emf.xmlmap.LookupConnection
		org.talend.designer.xmlmap.model.emf.xmlmap.XmlMapData
		org.talend.designer.xmlmap.model.emf.xmlmap.NodeType
		org.talend.designer.xmlmap.model.emf.xmlmap.InputLoopNodesTable
	"
	skeleton="tAdvancedXMLMapHash_java.skeleton"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();


    List<IConnection> connections = (List<IConnection>) node.getIncomingConnections();
    
	if (connections != null && connections.size() > 0) {
        for (IConnection connection : connections) {
        	String connectionName = connection.getName();
        	%>
			   		// connection name:<%=connectionName%>
			   		// source node:<%=connection.getSource()%> | target node:<%=connection.getTarget()%>
			   		// linked node: <%=((IDataConnection) connection).getLinkNodeForHash()%>
			   <%
			INode validTarget = ((IDataConnection) connection).getLinkNodeForHash();
			if(validTarget != null) {
				boolean isXMLMapComponent = "tXMLMap".equals(validTarget.getComponent().getName());
				boolean findFromBasicType = false;
				boolean findFromDocumentType = false;
				boolean unvalidLookupKeyExistForHash = false;
				List<InputLoopNodesTable> allInputLoopNodesTables = new ArrayList<InputLoopNodesTable>();
				LoopHelper loopHelper = null;
				IMetadataTable metadataTable = connection.getMetadataTable();
				List<IMetadataColumn> listColumns = metadataTable.getListColumns();
				Map<InputLoopNodesTable,List<String>> outputLoopToUnvalidLookupKeys = new HashMap<InputLoopNodesTable,List<String>>();
				if(isXMLMapComponent) {//TD110 
					XmlMapComponent xmlMapComponent = (XmlMapComponent)validTarget;
					XmlMapData xmlMapData=(XmlMapData)ElementParameterParser.getObjectValueXMLTree(xmlMapComponent);
					EList<InputXmlTree> inputTablesWithInvalid = xmlMapData.getInputTrees();
					Map<String, InputXmlTree> nameToTable = new HashMap<String, InputXmlTree>();
					for(InputXmlTree inputTable : inputTablesWithInvalid) {
						nameToTable.put(inputTable.getName(),inputTable);
					}
					InputXmlTree currentInputTree = nameToTable.get(connectionName);
					if(currentInputTree!=null && currentInputTree.isLookup()) {
						EList<TreeNode> treeNodes = currentInputTree.getNodes();
						for(TreeNode treeNode : treeNodes) {
							String columnType = treeNode.getType();
							List<TreeNode> allLeaf = new ArrayList<TreeNode>();
							getAllLeaf(treeNode,allLeaf);
							for(TreeNode leaf : allLeaf) {
								if(leaf == null) {
									continue;
								}
								String expressionKey = leaf.getExpression();
								if (expressionKey != null && !"".equals(expressionKey.trim())) {
									if("id_Document".equals(columnType)) {
										findFromDocumentType = true; 
									} else {
										findFromBasicType = true;
									}	
								}
								
							}
						}
					}
					
					/////////////////////////////////////////////////////////////////////////////////////////////
					//multiloop logic
					EList<OutputXmlTree> outputTables = xmlMapData.getOutputTrees();
					EList<VarTable> varTables = xmlMapData.getVarTables();
					
					List<IConnection> inputConnections = (List<IConnection>)xmlMapComponent.getIncomingConnections();
					HashMap<String, IConnection> hNameToConnection = new HashMap<String, IConnection>();
					for(IConnection conn : inputConnections){
						hNameToConnection.put(conn.getName(), conn);
					}
					
					List<IConnection> outputConnections = (List<IConnection>) xmlMapComponent.getOutgoingConnections();
					Map<String, IConnection> nameToOutputConnection = new HashMap<String, IConnection>();
				    for (IConnection conn : outputConnections) {
					  		nameToOutputConnection.put(conn.getName(), conn);
					}
					
					//filter unvalid input tables
					List<InputXmlTree> inputTables = new ArrayList<InputXmlTree>();
					for(int i=0; i<inputTablesWithInvalid.size(); i++){
						InputXmlTree  currentTree = inputTablesWithInvalid.get(i);
						if(hNameToConnection.get(currentTree.getName()) != null){
							inputTables.add(currentTree);
						}
					}
					
					InputXmlTree mainTable = inputTables.get(0);
					TreeNode documentInMain = null;
					for(TreeNode currentNode : mainTable.getNodes()) {
						if("id_Document".equals(currentNode)) {
							documentInMain = currentNode;
						}
					}
					
					//filter unvalid output tables
					ArrayList<OutputXmlTree> outputTablesSortedByReject = new ArrayList<OutputXmlTree>();
					for(OutputXmlTree outputTable : outputTables) {
						if(nameToOutputConnection.get(outputTable.getName())!=null) {
							outputTablesSortedByReject.add(outputTable);
						}
					}
					// sorting outputs : rejects tables after not rejects table
					Collections.sort(outputTablesSortedByReject, new Comparator<OutputXmlTree>() {
				
						public int compare(OutputXmlTree o1, OutputXmlTree o2) {
							if (o1.isReject() != o2.isReject()) {
								if (o1.isReject()) {
									return 1;
								} else {
									return -1;
								}
							}
							if (o1.isRejectInnerJoin() != o2.isRejectInnerJoin()) {
								if (o1.isRejectInnerJoin()) {
									return 1;
								} else {
									return -1;
								}
							}
							return 0;
						}
				
					});
					
					boolean parallelRelationExist = false;
					
					for(OutputXmlTree outputTable : outputTablesSortedByReject) {
						List<OutputTreeNode> loopNodes = new ArrayList<OutputTreeNode>();
						boolean docExist = false;
						for(OutputTreeNode currentNode : outputTable.getNodes()) {
							if("id_Document".equals(currentNode.getType())) {
								getAllLoopNodes(currentNode,loopNodes);
								docExist = true;
							}
						}
						
						if(docExist) {
							for(OutputTreeNode loop : loopNodes) {
								InputLoopNodesTable inputLoopTable = loop.getInputLoopNodesTable();
								if(inputLoopTable!=null && inputLoopTable.getInputloopnodes()!=null && inputLoopTable.getInputloopnodes().size()>0) {
									allInputLoopNodesTables.add(loop.getInputLoopNodesTable());
								}
							}
						} else {//only flat column exist
							allInputLoopNodesTables.addAll(getValidInputLoopNodesTables(outputTable.getInputLoopNodesTables()));
						}
					}
					
					if(allInputLoopNodesTables.size()>0) {
						for(int i=0;i<allInputLoopNodesTables.size()-1;i++) {
							InputLoopNodesTable inputLoopNodesTable = allInputLoopNodesTables.get(i);
							List<TreeNode> inputLoopNodes = inputLoopNodesTable.getInputloopnodes();
							int size = inputLoopNodes.size();
							
							InputLoopNodesTable nextInputLoopNodesTable = allInputLoopNodesTables.get(i+1);
							List<TreeNode> nextInputLoopNodes = nextInputLoopNodesTable.getInputloopnodes();
							int nextSize = nextInputLoopNodes.size();
							if((size != nextSize) || (!inputLoopNodes.containsAll(nextInputLoopNodes))) {
								parallelRelationExist = true;
								break;
							}
						}
					}
					
					if(parallelRelationExist && findFromBasicType && mainTable.isMultiLoops()) {
						loopHelper = new LoopHelper(documentInMain,outputTablesSortedByReject,inputTables);
						for(int i=0;i<allInputLoopNodesTables.size();i++) {
							InputLoopNodesTable inputLoopNodesTable = allInputLoopNodesTables.get(i);
							List<TreeNode> inputLoopNodes = inputLoopNodesTable.getInputloopnodes();
							loopHelper.initForOneOutputTableLoop(inputLoopNodes);
							List<String> unvalidLookupKeys = new ArrayList<String>();
							outputLoopToUnvalidLookupKeys.put(inputLoopNodesTable,unvalidLookupKeys);
							if(currentInputTree!=null && currentInputTree.isLookup()) {
								EList<TreeNode> treeNodes = currentInputTree.getNodes();
								for(TreeNode treeNode : treeNodes) {
									//only check the flat column,because hash only ready for flat column
									if(!loopHelper.validLookupKey(treeNode)) {
										unvalidLookupKeyExistForHash = true;
										unvalidLookupKeys.add(treeNode.getName());
									} else {
										String expressionKey = treeNode.getExpression();
										if (expressionKey == null || "".equals(expressionKey.trim())) {
											unvalidLookupKeys.add(treeNode.getName());
										}
									}
									
								}
								
							}
						}
					}
					
				}//TD110
				List<IHashableColumn> hashableColumns = null;
				IMatchingMode matchingMode = null;
				String tempFolder = null;
				String rowsBufferSize = null;
				IHashConfiguration hashConfiguration = null;				
				String matchingModeStr = null;
				boolean bSortOnDisk = "true".equals(ElementParameterParser.getValue(node, "__SORT_ON_DISK__")); 
				
			    if (validTarget instanceof IHashableInputConnections){
					IHashableInputConnections target = (IHashableInputConnections) validTarget;
					hashConfiguration = target.getHashConfiguration(connection.getName());
				} else{
				    List<java.util.Map<String, String>> listBlockings = (List<java.util.Map<String, String>>)ElementParameterParser.getObjectValue(node, "__BLOCKING_DEFINITION__");
				  	matchingModeStr = (listBlockings == null || listBlockings.size() == 0) ? "ALL_ROWS" : "ALL_MATCHES";
                    tempFolder = ElementParameterParser.getValue(node, "__TMP_DIRECTORY__");
				  	rowsBufferSize = ElementParameterParser.getValue(node, "__ROWS_BUFFER_SIZE__");
				}

					if(hashConfiguration == null) {
						hashableColumns = new ArrayList(0);
						
						//System.out.println(connectionName + " ### " + hashConfiguration + "IS NULL ##### " + validTarget + " " + validTarget.getClass());
						
					} else {
						tempFolder = hashConfiguration.getTemporaryDataDirectory();
						hashableColumns = hashConfiguration.getHashableColumns();
						matchingMode = hashConfiguration.getMatchingMode();
						rowsBufferSize = hashConfiguration.getRowsBufferSize();
					}
					
					if (matchingModeStr == null){
					  if(matchingMode == null) {
						  if(hashableColumns.size() > 0) {
							matchingModeStr = "UNIQUE_MATCH";
						  } else {
							matchingModeStr = "ALL_ROWS";
						  }
					  } else {
						matchingModeStr = matchingMode.toString();
					  }
					}
					if(isXMLMapComponent && findFromBasicType && findFromDocumentType) {
						matchingModeStr = "ALL_MATCHES";
					}
					boolean isAllRows = "ALL_ROWS".equals(matchingModeStr);
			   %>
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_<%=connectionName%> = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.<%= matchingModeStr %>;
			   
			   <%
				if (hashConfiguration != null && hashConfiguration.isPersistent() || bSortOnDisk) {
				%>
					org.talend.designer.components.lookup.persistent.Persistent<%= isAllRows ? "" : "Sorted" %>LookupManager<<%=connectionName%>Struct> tHash_Lookup_<%=connectionName%> = 
	   					new org.talend.designer.components.lookup.persistent.Persistent<%= isAllRows ? "" : "Sorted" %>LookupManager<<%=connectionName%>Struct>(matchingModeEnum_<%=connectionName%>, <%= tempFolder %> + "/"+ jobName +"_tMapData_" + pid +"_Lookup_<%=connectionName%>_"
	   					, new org.talend.designer.components.persistent.IRowCreator() {
	   						public <%=connectionName%>Struct createRowInstance() {
	   							return new <%=connectionName%>Struct();
	   						}
	   					}
	   					<% if(!isAllRows) { %>
	   						, <%= rowsBufferSize %>
	   					<% } %>
	   					); 

	   				tHash_Lookup_<%=connectionName%>.initPut();

		   	   	   globalMap.put("tHash_Lookup_<%=connectionName%>", tHash_Lookup_<%=connectionName%>);
	   			<%	
	   			} else {
	   			%>
	   				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<<%=connectionName%>Struct> tHash_Lookup_<%=connectionName%> = 
	   					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<<%=connectionName%>Struct>getLookup(matchingModeEnum_<%=connectionName%>);

		   	   	   globalMap.put("tHash_Lookup_<%=connectionName%>", tHash_Lookup_<%=connectionName%>);
		   	   	   
				<%
				}
				
				
				if(unvalidLookupKeyExistForHash) {
					for(int i=0;i<allInputLoopNodesTables.size();i++) {
						String loopKey = "loopKey"+i;
						InputLoopNodesTable inputLoopNodesTable = allInputLoopNodesTables.get(i);
						List<String> unvalidLookupKeys = outputLoopToUnvalidLookupKeys.get(inputLoopNodesTable);
%>
						class <%=connectionName%><%=loopKey%>Struct extends <%=connectionName%>Struct {
							
							{
								this.loopKey = "<%=loopKey%>";
							}
							
							public int hashCode() {
								if(this.hashCodeDirty){
									final int prime = PRIME;
									int result = DEFAULT_HASHCODE;
<%
									for (IMetadataColumn column : listColumns) {
                						String columnName = column.getLabel();
                						if(unvalidLookupKeys.contains(columnName)) {
                							continue;
                						}
                						JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());

										if (JavaTypesManager.isJavaPrimitiveType(column.getTalendType(), column.isNullable())) {
										
										 	String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
										 	if(javaType == JavaTypesManager.BOOLEAN) {
											%>
							        			result = prime * result + (this.<%=column.getLabel() %> ? 1231 : 1237);
											<%
											} else {	
											%>
												result = prime * result + (int) this.<%=column.getLabel() %>;
											<%
											}
											
										} else if(javaType == JavaTypesManager.BYTE_ARRAY) {
					
											%>
											result = prime * result + java.util.Arrays.hashCode(this.<%=column.getLabel() %>);
											<%
										
										} else {
										%>
											result = prime * result + ((this.<%=column.getLabel() %> == null) ? 0 : this.<%=column.getLabel() %>.hashCode());
										<%
										}
										
                					}
%>
									result = prime * result + ((this.loopKey == null) ? 0 : this.loopKey.hashCode());
									
									this.hashCode = result;
    								this.hashCodeDirty = false;		
								}
								return this.hashCode;
							}
							
							public boolean equals(Object obj) {
								if (this == obj) return true;
								if (obj == null) return false;
								if(!(obj instanceof <%=connectionName%>Struct)) return false;
								final <%=connectionName%>Struct other = (<%=connectionName%>Struct) obj;
								if(!this.loopKey.equals(other.loopKey)) return false;
<%	
								for (IMetadataColumn column: listColumns) {
									String columnName = column.getLabel();
            						if(unvalidLookupKeys.contains(columnName)) {
            							continue;
            						}
									JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
				
									if (JavaTypesManager.isJavaPrimitiveType(column.getTalendType(), column.isNullable())) {
									%>
										if (this.<%=columnName %> != other.<%=columnName %>) 
											return false;
									<%
									} else if(javaType == JavaTypesManager.BYTE_ARRAY) {
									%>
										if(!java.util.Arrays.equals(this.<%=columnName %>, other.<%=columnName %>)) {
											return false;
										}
									<%
									} else {
									%>
										if (this.<%=columnName %> == null) {
											if (other.<%=columnName %> != null) 
												return false;
										} else if (!this.<%=columnName %>.equals(other.<%=columnName %>)) 
											return false;
									<%
									}
				
								}
%>
								return true;
							}
							
							
						}
<%
					}
				}
				
			} else {
				%> 
				/*
				 * Valid target not found for connection "<%= connectionName%>"
				 */ 
				<%
			}
		}
	}

%>
            
