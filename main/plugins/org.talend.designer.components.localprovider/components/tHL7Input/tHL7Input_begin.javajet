<%@ jet 
    imports="
        org.talend.core.model.process.INode 
        org.talend.core.model.process.ElementParameterParser 
        org.talend.core.model.metadata.IMetadataTable 
        org.talend.core.model.metadata.IMetadataColumn 
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.metadata.types.JavaType
        java.util.List 
        java.util.Map
    " 
%>
<% 
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String fileName = ElementParameterParser.getValue(node,"__FILENAME__");
String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
String startMsg = ElementParameterParser.getValue(node,"__START_MSG__");
String endMsg = ElementParameterParser.getValue(node,"__END_MSG__");

boolean isNoValidate = ("true").equals(ElementParameterParser.getValue(node,"__NOVALIDATE__"));

String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
boolean advancedSeparator = (advancedSeparatorStr!=null&&!("").equals(advancedSeparatorStr))?("true").equals(advancedSeparatorStr):false;
String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER);
List<Map<String, String>> schemas = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SCHEMAS__");

List< ? extends IConnection> connections = node.getOutgoingSortedConnections();

if(connections!=null && connections.size()>0){
%> 
System.setProperty("org.apache.commons.logging.Log", "org.apache.commons.logging.impl.NoOpLog");

class TalendHL7Reader_<%=cid %> implements ca.uhn.hl7v2.llp.HL7Reader{

//    private static final ca.uhn.log.HapiLog log = ca.uhn.log.HapiLogFactory.getHapiLog(MinLLPReader.class);
    
    private java.io.BufferedReader myReader;

    private char endMsg = '\u001c'; //character indicating the
                                              //termination of an HL7 message
    private char startMsg = '\u000b';//character indicating the
                                               //start of an HL7 message

    //NB: The above is as per the minimal lower layer protocol.
    
    /** Creates a MinLLPReader which reads from the given InputStream. The stream
        is assumed to be an ASCII bit stream.
    */
    public TalendHL7Reader_<%=cid %>(java.io.InputStream in, String charsetName) throws IOException
    {
        setInputStream(in, charsetName);
    }
    
    public void setEndMsgChar(char endMsg){
    	this.endMsg= endMsg;
    }
    
    public void setStartMsgChar(char startMsg){
    	this.startMsg = startMsg;
    }

    /**
     * Sets the InputStream from which to read messages.  The InputStream must be set 
     * before any calls to <code>getMessage()</code>.
     */
    public synchronized void setInputStream(java.io.InputStream in, String charsetName) throws IOException 
    {
     	myReader = new java.io.BufferedReader(new java.io.InputStreamReader(in, charsetName));
    }

	public void setInputStream(java.io.InputStream arg0)
			throws IOException {
	}

    /** Calls the same method in the underlying BufferedReader. */
    /**private int read(char[] parm1, int parm2, int parm3) throws java.io.IOException
    {
        return myReader.read(parm1, parm2, parm3);
    }*/

    /** Reads an HL7 encoded message from this Reader's InputStream.
        @return The message, in string format, without the lower level
        protocol delimeters. Returns null if a -1 is received on the initial
         read.
     */
     private boolean isFirst = true;
    public synchronized String getMessage() throws java.io.IOException 
    {
        StringBuffer s_buffer = new StringBuffer();

        boolean end_of_message = false;

        int c = 0;
        try {
            do {
                c = myReader.read();
            } while (c == ' ' || c == '\t' || c == '\r' || c == '\n');
        } catch (java.lang.Exception e) {
            return null;
        }

        // trying to read when there is no data (stream may have
        // been closed at other end)
        if (c == -1) {
            return null;
        }

        if (c != startMsg && !isFirst) {
            //throw new java.io.IOException("no start of message indicator was found.");
            return null;
        }

        if (isFirst && c != startMsg) {
            s_buffer.append((char) c);
        }

        while (!end_of_message) {
            c = myReader.read();

            if (c == -1) {
                break;
            }

            if (c == endMsg) {
                end_of_message = true;
            } else {
                s_buffer.append((char) c);
            }
        } // end while
        isFirst = false;
        if (s_buffer.length() > 0) {
            return s_buffer.toString();
        } else {
            return null;
        }
    }

    /** 
     * Closes the underlying BufferedReader.
     */
    public synchronized void close() throws java.io.IOException
    {
    	if(myReader!=null){
        	myReader.close();
        }
    }
}

class TalendSegment_<%=cid %>{

	public List<ca.uhn.hl7v2.model.Segment> result = new java.util.ArrayList<ca.uhn.hl7v2.model.Segment>();
	
	public void findAllSegment(ca.uhn.hl7v2.model.Group messParent){
        String[] childNames = messParent.getNames();
        for (int i = 0; i < childNames.length; i++) {
            try {
                ca.uhn.hl7v2.model.Structure[] childReps = messParent.getAll(childNames[i]);
                for (int j = 0; j < childReps.length; j++) {
                	if (childReps[j] instanceof ca.uhn.hl7v2.model.Group) {
                		findAllSegment((ca.uhn.hl7v2.model.Group)childReps[j]);
                	}else if (childReps[j] instanceof ca.uhn.hl7v2.model.Segment) {
                		result.add((ca.uhn.hl7v2.model.Segment)childReps[j]);
                	}
                }
            } catch (ca.uhn.hl7v2.HL7Exception e) {
                e.printStackTrace();
            }
        }
	}
	public List<ca.uhn.hl7v2.model.Segment> getResult(){
		return this.result;
	}

	public int[] getIndices(String strSpec){
		int[] result = new int[4];
		java.util.StringTokenizer tok = new java.util.StringTokenizer(strSpec, "-", false);
		if(tok.hasMoreTokens())
			tok.nextToken();
		int i=1;
		while(tok.hasMoreTokens()){
			String tmp = tok.nextToken();
			if(i==1){ // find the rep
				if(tmp.indexOf("(")>0 && tmp.indexOf(")")>tmp.indexOf("(")){
					result[0] = Integer.parseInt(tmp.substring(0, tmp.indexOf("(")));
					result[1] = Integer.parseInt(tmp.substring(tmp.indexOf("(")+1, tmp.indexOf(")")))-1;
				}else{
					result[0] = Integer.parseInt(tmp);
					result[1] = 0;
				}
			}else{					
				result[i]=Integer.parseInt(tmp);
			}
			i++;
		}
		
		if(result[2]==0){
			result[2]=1;
		}
		if(result[3]==0){
			result[3]=1;
		}
		
		return result;
	}
	
} 

int nb_line_<%=cid %>=0;   	
ca.uhn.hl7v2.parser.Parser parser_<%=cid %> = new ca.uhn.hl7v2.parser.PipeParser();
<%
if(isNoValidate){
%>
ca.uhn.hl7v2.validation.impl.NoValidation noValid_<%=cid %> = new ca.uhn.hl7v2.validation.impl.NoValidation();
parser_<%=cid %>.setValidationContext(noValid_<%=cid %>);
<%
}
%>
      //READ DATA
    java.io.InputStream is_<%=cid %> = null;
    Object file_<%=cid %> = <%=fileName %>;    
    if(file_<%=cid %> instanceof java.io.InputStream){
    	is_<%=cid %> = (java.io.InputStream)file_<%=cid %>;
    }else{
    	is_<%=cid %> = new java.io.FileInputStream((String)file_<%=cid %>);
    }
	TalendHL7Reader_<%=cid %> reader_<%=cid %> = new TalendHL7Reader_<%=cid %>(is_<%=cid %>, <%=encoding %>);

	reader_<%=cid %>.setStartMsgChar(<%=startMsg%>);
	reader_<%=cid %>.setEndMsgChar(<%=endMsg%>);

	String str_<%=cid %> = null;
	int[] index_<%=cid %> = null;
	
	while((str_<%=cid %> = reader_<%=cid %>.getMessage())!=null){
		str_<%=cid %> = str_<%=cid %>.replace('\n', '\r');
    	ca.uhn.hl7v2.model.Message message_<%=cid %> = parser_<%=cid %>.parse(str_<%=cid %>);
    	ca.uhn.hl7v2.util.Terser terser_<%=cid %> = new ca.uhn.hl7v2.util.Terser(message_<%=cid %>);
    	
    	TalendSegment_<%=cid %> talendSeg_<%=cid %> = new TalendSegment_<%=cid %>();
    	talendSeg_<%=cid %>.findAllSegment(message_<%=cid %>);
    	java.util.Iterator<ca.uhn.hl7v2.model.Segment> iterSeg_<%=cid %> = talendSeg_<%=cid %>.getResult().iterator();
    	
    	while(iterSeg_<%=cid %>.hasNext()){
			ca.uhn.hl7v2.model.Segment seg_<%=cid %> = iterSeg_<%=cid %>.next();
<%
for(IConnection conn : connections){
	if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
		Map<String, String> mapping = null;
		for(Map<String, String> schemaMap : schemas){
//			System.out.println("schema:"+schemaMap.get("SCHEMA")+"\tconn:"+conn.getName());
			if(conn.getName().contains(schemaMap.get("SCHEMA"))){
				mapping = schemaMap;
				break;
			}
		}
		IMetadataTable metadata = conn.getMetadataTable();
		if(metadata!=null){
%>
    		<%=conn.getName() %> = null;
    		
    		if("<%=metadata.getLabel() %>".equals(seg_<%=cid %>.getName())){
    			<%=conn.getName() %> = new <%=conn.getName() %>Struct();
<%
			List<IMetadataColumn> columns = metadata.getListColumns();
			int sizeListColumns = columns.size();
			String[] arrXpath = ((String)mapping.get("MAPPING")).split(",");

			boolean noStringTypeExist = false;

    		for (int valueN=0; valueN<sizeListColumns; valueN++) {
    			IMetadataColumn column = columns.get(valueN);
    			JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
    			if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT){
    			}else{
    				noStringTypeExist = true;
    				break;
    			}
    		}
    		boolean hasStringDefault = false;
    		for (int valueM=0; valueM<sizeListColumns; valueM++) {
    			IMetadataColumn column = columns.get(valueM);
    			JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
    			if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT){
    				if(hasStringDefault==false && column.getDefault()!=null && column.getDefault().length() > 0 ){
    					hasStringDefault = true;
    					break;
    				}
    			}
    		}
    		if(noStringTypeExist || hasStringDefault){
%>
	String temp_<%=cid %> = ""; 
<%
			}
			for (int i=0;i < arrXpath.length;i++) {
				String query = arrXpath[i];
				if(i < sizeListColumns){
					IMetadataColumn column = columns.get(i);
					
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
					
                    if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT){
                    	String defaultValue = column.getDefault();
                    	if(defaultValue!=null && defaultValue.length()>0){
%>
	index_<%=cid %> = talendSeg_<%=cid %>.getIndices(<%=arrXpath[i] %>);
	temp_<%=cid %>=ca.uhn.hl7v2.util.Terser.get(seg_<%=cid %>,index_<%=cid%>[0],index_<%=cid%>[1],index_<%=cid%>[2],index_<%=cid%>[3]);
	if(temp_<%=cid %>.length() > 0){
		<%=conn.getName() %>.<%=column.getLabel() %> = temp_<%=cid %>;
	}else{
	<%=conn.getName() %>.<%=column.getLabel() %> = <%=defaultValue %>;
	}
<%
                    	}else{%>
	index_<%=cid %> = talendSeg_<%=cid %>.getIndices(<%=arrXpath[i] %>);
	<%=conn.getName() %>.<%=column.getLabel() %>=ca.uhn.hl7v2.util.Terser.get(seg_<%=cid %>,index_<%=cid%>[0],index_<%=cid%>[1],index_<%=cid%>[2],index_<%=cid%>[3]);
<%
						}
					}else{
%>
	index_<%=cid %> = talendSeg_<%=cid %>.getIndices(<%=arrXpath[i] %>);
	temp_<%=cid %>=ca.uhn.hl7v2.util.Terser.get(seg_<%=cid %>,index_<%=cid%>[0],index_<%=cid%>[1],index_<%=cid%>[2],index_<%=cid%>[3]);
	if(temp_<%=cid %>.length() > 0) {
<%
					if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
					} else if(javaType == JavaTypesManager.BYTE_ARRAY){ 
%><%=conn.getName() %>.<%=column.getLabel() %> = temp_<%=cid %>.getBytes(<%=encoding%>);
<%
					}else if(javaType == JavaTypesManager.DATE) { 
%><%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(temp_<%=cid %>, <%= patternValue %>);
<%
					}else if(advancedSeparator && JavaTypesManager.isNumberType(javaType, column.isNullable())) { 
%><%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(ParserUtils.parseTo_Number(temp_<%=cid %>, <%= thousandsSeparator %>, <%= decimalSeparator %>));
<%
					} else { 
%><%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(temp_<%=cid %>);
<%
					}
%>
	} else {
<%
					String defaultValue = JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate, column.getDefault());
					if(defaultValue == null) {
%>throw new RuntimeException("Value is empty for column : '<%= column.getLabel() %>' in '<%=conn.getName() %>' connection, value is invalid or this column should be nullable or have a default value.");
<%
					} else {
%><%=conn.getName() %>.<%=column.getLabel() %> = <%=defaultValue %>;
<%
					}
%>
	}
<%
                    }
				}
			}
		}
%>
		}
<%
	}
}
%>
<%
}
%>
