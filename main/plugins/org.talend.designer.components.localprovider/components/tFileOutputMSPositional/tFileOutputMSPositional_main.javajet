<%@ jet
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.IConnectionCategory
	java.util.List
	org.talend.core.model.utils.TalendTextUtils
	java.util.Map
"
%>
<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String incomingName = (String)codeGenArgument.getIncomingName();
    
String cid = node.getUniqueName();
        
List< ? extends IConnection> conns = node.getIncomingConnections();
boolean hasDataLink = false;
if(conns!=null){
	for(int i=0;i<conns.size();i++){
		IConnection connTemp = conns.get(i);
	    if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
	   		hasDataLink = true;
	   		break;
	    }
	}
}
    
if(hasDataLink){//HSS_____0
    
    List<Map<String, String>> schemas_o = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SCHEMAS__");
	
	List<Map<String, String>> schemas = new java.util.ArrayList<Map<String, String>>();
	List<String> connections = new java.util.ArrayList<String>();
    Map<String, List<IMetadataColumn>> connectionMapColumnList = new java.util.HashMap<String, List<IMetadataColumn>>();
	
	for(Map<String, String> schema_o : schemas_o){//HSS_____0_____1
		Map<String, String> schema = new java.util.HashMap<String, String>();
		schema.put("SCHEMA", TalendTextUtils.removeQuotes(schema_o.get("SCHEMA")));
		schema.put("PARENT_ROW", TalendTextUtils.removeQuotes(schema_o.get("PARENT_ROW")));
		schema.put("KEY_COLUMN", TalendTextUtils.removeQuotes(schema_o.get("KEY_COLUMN")));
		schema.put("PARENT_KEY_COLUMN", TalendTextUtils.removeQuotes(schema_o.get("PARENT_KEY_COLUMN")));
		schema.put("PATTERN", TalendTextUtils.removeQuotes(schema_o.get("PATTERN")));
		schema.put("PADDING_CHAR", TalendTextUtils.removeQuotes(schema_o.get("PADDING_CHAR")));
		schema.put("KEEP", TalendTextUtils.removeQuotes(schema_o.get("KEEP")));
		schema.put("ALIGN", TalendTextUtils.removeQuotes(schema_o.get("ALIGN")));
		if(("").equals(schema.get("PARENT_ROW"))){//put the root schema in the first place on list.
			for(int i=0;i<conns.size();i++){//HSS_____0_____1_____1
	    		IConnection connTemp = conns.get(i);
	    		if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
	    			IMetadataTable tempMetadataTable = connTemp.getMetadataTable();
					if(tempMetadataTable.getTableName().equals(schema.get("SCHEMA"))){
						schema.put("CONNECTION", connTemp.getName());
		    			List<IMetadataColumn> listColumns = tempMetadataTable.getListColumns();
		    			connections.add(0, connTemp.getName());
		    			connectionMapColumnList.put(connTemp.getName(), listColumns);
					}
	    		}
	    	}//HSS_____0_____1_____1
			schemas.add(0, schema);
		}else{
			for(int i=0;i<conns.size();i++){//HSS_____0_____1_____1
	    		IConnection connTemp = conns.get(i);
	    		if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
	    			IMetadataTable tempMetadataTable = connTemp.getMetadataTable();
					if(tempMetadataTable.getTableName().equals(schema.get("SCHEMA"))){
						schema.put("CONNECTION", connTemp.getName());
		    			List<IMetadataColumn> listColumns = tempMetadataTable.getListColumns();
		    			connections.add(connTemp.getName());
		    			connectionMapColumnList.put(connTemp.getName(), listColumns);
					}
	    		}
	    	}//HSS_____0_____1_____1
			schemas.add(schema);
		}
	}//HSS_____0_____1
    
	//get the right input connection and the previous input node and metadatas
	    
    List< ? extends IConnection> incomingConns = node.getIncomingConnections();
    	
    if (incomingName == null && incomingConns.size() > 0) {
    	   incomingName = incomingConns.get(0).getName(); 
    }
    
    int i = 0;
    for(; i<connections.size(); i++){
    	if(connections.get(i).equals(incomingName)){
    		break;
    	}
    }
%>
<%=incomingName %>Struct <%=incomingName %>_<%=cid %> = new <%=incomingName %>Struct(); 
<%
    List<IMetadataColumn> listColumns = connectionMapColumnList.get(incomingName);
    if(!listColumns.isEmpty()){
		for(IMetadataColumn column : listColumns){
%>
<%=incomingName %>_<%=cid %>.<%=column.getLabel() %> = <%=incomingName %>.<%=column.getLabel() %>;
<%
		}
	}
	
    if(i==0){
%>
<%=incomingName %>List_<%=cid %>.add(<%=incomingName %>_<%=cid %>);
nb_line_<%=cid %> ++;
<%
	}else{
		
%>
<%=incomingName %>Map_<%=cid %>.put(String.valueOf(<%=incomingName %>.<%=schemas.get(i).get("KEY_COLUMN") %>), <%=incomingName %>_<%=cid %>);
nb_line_<%=cid %> ++;
<%
	}
	
	log4jFileUtil.debugWriteData(node);
}//HSS_____0
%>
