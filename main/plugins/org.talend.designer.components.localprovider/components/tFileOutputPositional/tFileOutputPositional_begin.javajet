<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.IConnection
	org.talend.core.model.process.IConnectionCategory
    
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
	org.talend.core.model.utils.NodeUtil
    java.util.List
    java.util.Map
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

List<IMetadataTable> metadatas = node.getMetadataList();
   
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
    
    	String cid = node.getUniqueName();
    	
    	String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
        if (encoding!=null) {
            if (("").equals(encoding)) {
                encoding = "undef";
            }
        }
        
        String separator = ElementParameterParser.getValue(
            node,
            "__ROWSEPARATOR__"
        );
        
        String filename = ElementParameterParser.getValue(
            node,
            "__FILENAME__"
        );
		
		boolean useByte = ("true").equals(ElementParameterParser.getValue(node, "__USE_BYTE__"));
		
        boolean isIncludeHeader = ("true").equals(ElementParameterParser.getValue(node,"__INCLUDEHEADER__"));

        boolean isAppend = ("true").equals(ElementParameterParser.getValue(node,"__APPEND__"));
        
		boolean useStream = ("true").equals(ElementParameterParser.getValue(node,"__USESTREAM__"));
		String outStream = ElementParameterParser.getValue(node,"__STREAMNAME__");
        
        String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
		boolean advancedSeparator = (advancedSeparatorStr!=null&&!("").equals(advancedSeparatorStr))?("true").equals(advancedSeparatorStr):false;
		String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
		String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER);        
 
        List<Map<String, String>> formats =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,
                "__FORMATS__"
            );
        
        boolean compress = ("true").equals(ElementParameterParser.getValue(node,"__COMPRESS__"));
        
        boolean isInRowMode = ("true").equals(ElementParameterParser.getValue(node,"__ROW_MODE__"));
        String writerClass = null;
    	if(isInRowMode){
    		writerClass = "routines.system.BufferedOutput";
    	}else{
    		writerClass = "java.io.BufferedWriter";
    	}
		String dynamic = ElementParameterParser.getValue(node, "__DYNAMIC__");
		boolean useExistingDynamic = "true".equals(ElementParameterParser.getValue(node, "__USE_EXISTING_DYNAMIC__"));
        String dyn = dynamic+"_DYNAMIC";
		if(useExistingDynamic){
%>
			routines.system.Dynamic dynamic_<%=cid %> = (routines.system.Dynamic)globalMap.get("<%=dyn%>");
			int maxColumnCount_<%=cid %> = dynamic_<%=cid %>.getColumnCount();
			dynamic_<%=cid %>.clearColumnValues();
<%
		}
%>
		int nb_line_<%=cid%> = 0;
		resourceMap.put("nb_line_<%=cid %>", nb_line_<%=cid %>);
		
<%
		if(useByte){
%>
class Arrays_<%=cid %>{
    public byte[] copyOfRange(byte[] original, int from, int to) {
        int newLength = to - from;
        if (newLength < 0)
            throw new IllegalArgumentException(from + " > " + to);
        byte[] copy = new byte[newLength];
        System.arraycopy(original, from, copy, 0,
                         Math.min(original.length - from, newLength));
        return copy;
    }
}
byte[] byteArray_<%=cid %> = new byte[0];
Arrays_<%=cid %> arrays_<%=cid %> = new Arrays_<%=cid %>();
<%
		}
%>		
		class PositionUtil_<%=cid%>{
		
<%
		    List<IMetadataColumn> columns = metadata.getListColumns();
    		int sizeColumns = columns.size();
    		if(isIncludeHeader){
    		for (int i = 0; i < sizeColumns; i++) {
    			IMetadataColumn column = columns.get(i);
    			Map<String, String> format=formats.get(i);
    			if(i%100==0){
%>
              void writeHeader_<%=i/100%>(String tempStringB<%=cid %>,int tempLengthB<%=cid %>,final <%=writerClass %> out<%=cid %><% if(useByte){ %>,byte[] byteArray_<%=cid %>,Arrays_<%=cid %> arrays_<%=cid %><% } %>)throws IOException,java.io.UnsupportedEncodingException{
              
                 int tempLengthM<%=cid %>= 0;
<%
                }
%>
    			//get  and format output String begin
<%
				if("id_Dynamic".equals(column.getTalendType())){
					if(useExistingDynamic){
%>
						routines.system.Dynamic dynamic_<%=cid %> = (routines.system.Dynamic)globalMap.get("<%=dyn%>");
						int maxColumnCount_<%=cid %> = dynamic_<%=cid %>.getColumnCount();
						for (int i=0;i<maxColumnCount_<%=cid %>;i++) {
							routines.system.DynamicMetadata dynamicMetadataColumn_<%=cid%> = dynamic_<%=cid %>.getColumnMetadata(i);
							int currentFieldLength_<%=cid%> = dynamicMetadataColumn_<%=cid%>.getLength();
							tempStringB<%=cid %> = dynamicMetadataColumn_<%=cid%>.getName();
<%
	    					if(useByte){
%>
    							tempLengthB<%=cid %> = tempStringB<%=cid %>.getBytes(<%=encoding %>).length;
<%
    						}else{
%>
    							tempLengthB<%=cid %> = tempStringB<%=cid %>.length();
<%
    						}
%>
	    					if(tempLengthB<%=cid %><currentFieldLength_<%=cid%>){
<%
								if (("\'L\'").equals(format.get("ALIGN"))) {
%>
			    					for(int j=0;j<currentFieldLength_<%=cid%>-tempLengthB<%=cid %>;j++){
			    						tempStringB<%=cid %>= tempStringB<%=cid %> + <%=format.get("PADDING_CHAR")%>;
			    					}
<%
								} else if (("\'R\'").equals(format.get("ALIGN"))) {
%>
									for(int j=0;j<currentFieldLength_<%=cid%>-tempLengthB<%=cid %>;j++){
			    						tempStringB<%=cid %>= <%=format.get("PADDING_CHAR")%> + tempStringB<%=cid %>;
			    					}
<%
								} else {
%>
									int temp_<%=cid%> = currentFieldLength_<%=cid%>-tempLengthB<%=cid %>;
									for(int j=0;j<temp_<%=cid%>/2;j++){
			    						tempStringB<%=cid %>= <%=format.get("PADDING_CHAR")%> + tempStringB<%=cid %> + <%=format.get("PADDING_CHAR")%>;
			    					}
			    					if(temp_<%=cid%>%2==1){
			    						tempStringB<%=cid %> = tempStringB<%=cid %> + <%=format.get("PADDING_CHAR")%>;
			    					}
<%
								}
%>
							}else if(tempLengthB<%=cid %> > currentFieldLength_<%=cid%>){
<%
                    			if (("\'A\'").equals(format.get("KEEP"))) {
                    			} else if (("\'R\'").equals(format.get("KEEP"))) {
									if(useByte){
%>
                    					byteArray_<%=cid %>=arrays_<%=cid %>.copyOfRange(tempStringB<%=cid %>.getBytes(<%=encoding %>),tempLengthB<%=cid %> - currentFieldLength_<%=cid%>,tempLengthB<%=cid %>);
	                    				tempStringB<%=cid %> = new String(byteArray_<%=cid %>,<%=encoding %>);
<%
                        			}else{
%>
										tempStringB<%=cid %> = tempStringB<%=cid %>.substring(tempLengthB<%=cid %>-currentFieldLength_<%=cid%>);
<%
									}
								} else if (("\'M\'").equals(format.get("KEEP"))) {
%>
									int begin<%=cid %>=(tempLengthB<%=cid %>-currentFieldLength_<%=cid%>)/2;
<%
									if(useByte){
%>
										byteArray_<%=cid %>=arrays_<%=cid %>.copyOfRange(tempStringB<%=cid %>.getBytes(<%=encoding %>),begin<%=cid %>,begin<%=cid %> + currentFieldLength_<%=cid%>);
		                    			tempStringB<%=cid %> = new String(byteArray_<%=cid %>,<%=encoding %>);
<%
									}else{
%>
    	                    			tempStringB<%=cid %> = tempStringB<%=cid %>.substring(begin<%=cid %>, begin<%=cid %>+currentFieldLength_<%=cid%>);
<%
	                    			}
                    			} else {
                    				if(useByte){
%>
	                    				byteArray_<%=cid %>=arrays_<%=cid %>.copyOfRange(tempStringB<%=cid %>.getBytes(<%=encoding %>),0,currentFieldLength_<%=cid%>);
                    					tempStringB<%=cid %> = new String(byteArray_<%=cid %>,<%=encoding %>);
<%
                    				}else{
%>
                    					tempStringB<%=cid %> = tempStringB<%=cid %>.substring(0, currentFieldLength_<%=cid%>);
<%									}
                    			}
%>
							}
	    					out<%=cid %>.write(tempStringB<%=cid %>);
						}
<%
					}
				}else{//not dynamic begin
%>				
    			tempStringB<%=cid %>="<%=column.getLabel() %>";
    			<%if(useByte){%>
    			tempLengthB<%=cid %>=tempStringB<%=cid %>.getBytes(<%=encoding %>).length;
    			<%}else{%>
    			tempLengthB<%=cid %>=tempStringB<%=cid %>.length();
    			<%}%>
    			
            	if (tempLengthB<%=cid %> > <%=format.get("SIZE")%>) {
<%
                    if (("\'A\'").equals(format.get("KEEP"))) {
                    } else if (("\'R\'").equals(format.get("KEEP"))) {
						if(useByte){
%>
                    		byteArray_<%=cid %>=arrays_<%=cid %>.copyOfRange(tempStringB<%=cid %>.getBytes(<%=encoding %>),tempLengthB<%=cid %> - <%=format.get("SIZE")%>,tempLengthB<%=cid %>);
	                    	tempStringB<%=cid %> = new String(byteArray_<%=cid %>,<%=encoding %>);
<%
                        }else{
%>
	                        tempStringB<%=cid %> = tempStringB<%=cid %>.substring(tempLengthB<%=cid %>-<%=format.get("SIZE")%>);
<%
						}
                    } else if (("\'M\'").equals(format.get("KEEP"))) {
%>
                        int begin<%=cid %>=(tempLengthB<%=cid %>-<%=format.get("SIZE")%>)/2;
<%
						if(useByte){
%>
							byteArray_<%=cid %>=arrays_<%=cid %>.copyOfRange(tempStringB<%=cid %>.getBytes(<%=encoding %>),begin<%=cid %>,begin<%=cid %> + <%=format.get("SIZE")%>);
		                    tempStringB<%=cid %> = new String(byteArray_<%=cid %>,<%=encoding %>);
<%
						}else{
%>
    	                    tempStringB<%=cid %> = tempStringB<%=cid %>.substring(begin<%=cid %>, begin<%=cid %>+<%=format.get("SIZE")%>);
<%
	                    }
                    } else {
                    	if(useByte){
%>
	                    	byteArray_<%=cid %>=arrays_<%=cid %>.copyOfRange(tempStringB<%=cid %>.getBytes(<%=encoding %>),0,<%=format.get("SIZE")%>);
                    		tempStringB<%=cid %> = new String(byteArray_<%=cid %>,<%=encoding %>);
<%
                    	}else{
%>
                    		tempStringB<%=cid %> = tempStringB<%=cid %>.substring(0, <%=format.get("SIZE")%>);
<%						}
                    }
%>
                }else if(tempLengthB<%=cid %><<%=format.get("SIZE")%>){
                    StringBuilder result<%=cid %> = new StringBuilder();
<%
                    if (("\'L\'").equals(format.get("ALIGN"))) {
%>
                        result<%=cid %>.append(tempStringB<%=cid %>);
                        for(int i<%=cid %>=0; i<%=cid %>< <%=format.get("SIZE")%>-tempLengthB<%=cid %>; i<%=cid %>++){
                            result<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
                        }
                        tempStringB<%=cid %> = result<%=cid %>.toString();
<%
                    } else if (("\'R\'").equals(format.get("ALIGN"))) {
%>
                        for(int i<%=cid %>=0; i<%=cid %>< <%=format.get("SIZE")%>-tempLengthB<%=cid %>; i<%=cid %>++){
                            result<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
                        }
                        result<%=cid %>.append(tempStringB<%=cid %>);
                        tempStringB<%=cid %> = result<%=cid %>.toString();
<%
                    } else {
%>
                        int temp<%=cid %>= (<%=format.get("SIZE")%>-tempLengthB<%=cid %>)/2;
                        for(int i<%=cid %>=0;i<%=cid %><temp<%=cid %>;i<%=cid %>++){
                            result<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
                        }
                        result<%=cid %>.append(tempStringB<%=cid %>);
                        for(int i<%=cid %>=0;i<%=cid %><temp<%=cid %>;i<%=cid %>++){
                            result<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
                        }
                        if((temp<%=cid %>+temp<%=cid %>)!=(<%=format.get("SIZE")%>-tempLengthB<%=cid %>)){
                            result<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
                        }
                        tempStringB<%=cid %> = result<%=cid %>.toString();
<%
                    } 
%>       
                }
                //get  and format output String end
    			out<%=cid %>.write(tempStringB<%=cid %>);
<%
			}//not dynamic end
	          if((i+1)%100==0){
%>
              }
<%
              }
    	}
    		  if(sizeColumns>0&&(sizeColumns%100)>0){
%>
              }  
<%
              }
        }	
%>
<%
	  	List< ? extends IConnection> conns = node.getIncomingConnections();
	    for (IConnection conn : conns) {
		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
           for (int i = 0; i < sizeColumns; i++) {
				IMetadataColumn column = columns.get(i);
				Map<String,String> format=formats.get(i);
				JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
				String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
				if(i%100==0){
%>
				  void setValue_<%=i/100%>(final <%=NodeUtil.getPrivateConnClassName(conn) %>Struct <%=conn.getName() %>,StringBuilder sb_<%=cid %>,String tempStringM<%=cid %>,int tempLengthM<%=cid %><% if(useByte){ %>,byte[] byteArray_<%=cid %>,Arrays_<%=cid %> arrays_<%=cid %><% } %>)throws IOException,java.io.UnsupportedEncodingException{
<%
                }
                if("id_Dynamic".equals(column.getTalendType())){
					if(useExistingDynamic){
%>
						routines.system.Dynamic dynamic_map_<%=cid %> =(routines.system.Dynamic)globalMap.get("<%=dyn%>");
						routines.system.Dynamic dynamic_<%=cid %> = <%=conn.getName()%>.<%=column.getLabel()%>;//
						int maxColumnCount_<%=cid %> = dynamic_map_<%=cid %>.getColumnCount();
						String temp_<%=cid%>= "";
						for (int i=0;i<maxColumnCount_<%=cid %>;i++) {
							routines.system.DynamicMetadata metadata_<%=cid%> = dynamic_map_<%=cid %>.getColumnMetadata(i);
							temp_<%=cid%> = String.valueOf(dynamic_<%=cid %>.getColumnValue(i));
							String type_<%=cid%> = metadata_<%=cid%>.getType();
							if("id_BigDecimal".equals(type_<%=cid%>)){
								int precision_<%=cid%> = metadata_<%=cid%>.getPrecision();
								if(precision_<%=cid%> !=0){
									temp_<%=cid%> = (new BigDecimal(temp_<%=cid%>)).setScale(precision_<%=cid%>,java.math.RoundingMode.HALF_UP).toPlainString();
								}
							}
<%
						if(advancedSeparator){
%>							
							if("id_BigDecimal".equals(type_<%=cid%>) || "id_Short".equals(type_<%=cid%>) || "id_Integer".equals(type_<%=cid%>) || "id_Double".equals(type_<%=cid%>) || "id_Float".equals(type_<%=cid%>) || "id_Long".equals(type_<%=cid%>)){
								temp_<%=cid%> = FormatterUtils.format_Number(temp_<%=cid%>, <%= thousandsSeparator %>, <%= decimalSeparator %>);
							}
<%
						}
%>
							int columnLength_<%=cid%> = metadata_<%=cid%>.getLength();
<%
							if(useByte){
%>
    							int temp_length_<%=cid%> = temp_<%=cid%>.getBytes(<%=encoding %>).length;
<%
    						}else{
%>
    							int temp_length_<%=cid%> = temp_<%=cid%>.length();
<%
    						}
%>
							if(temp_length_<%=cid%> < columnLength_<%=cid%>){
<%
								if (("\'L\'").equals(format.get("ALIGN"))) {
%>
									sb_<%=cid %>.append(temp_<%=cid%>);
			    					for(int j=0;j<columnLength_<%=cid%>-temp_length_<%=cid%>;j++){
			    						sb_<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
			    					}
<%
								} else if (("\'R\'").equals(format.get("ALIGN"))) {
%>
			    					for(int j=0;j<columnLength_<%=cid%>-temp_length_<%=cid%>;j++){
			    						sb_<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
			    					}
									sb_<%=cid %>.append(temp_<%=cid%>);
<%
								} else {
%>
									int tempNum_<%=cid%> = columnLength_<%=cid%>-temp_length_<%=cid%>;
									for(int j=0;j<tempNum_<%=cid%>/2;j++){
			    						sb_<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
			    					}
			    					sb_<%=cid %>.append(temp_<%=cid%>);
									for(int j=0;j<tempNum_<%=cid%>/2;j++){
			    						sb_<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
			    					}
			    					if(tempNum_<%=cid%>%2==1){
			    						sb_<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
			    					}
<%
								}
%>
							}else{
<%
			                    if (("\'A\'").equals(format.get("KEEP"))) {
%>
			                        sb_<%=cid %>.append(temp_<%=cid%>);
<%
			                    } else if (("\'R\'").equals(format.get("KEEP"))) {
			                    	 if(useByte){
%>
			                    		byteArray_<%=cid %>=arrays_<%=cid %>.copyOfRange(temp_<%=cid%>.getBytes(<%=encoding %>),temp_length_<%=cid%> - columnLength_<%=cid%>,temp_length_<%=cid%>);
				                    	sb_<%=cid %>.append(new String(byteArray_<%=cid %>,<%=encoding %>));
<%
			                         }else{
%>
			    	                    sb_<%=cid %>.append(temp_<%=cid%>.substring(temp_length_<%=cid%>-columnLength_<%=cid%>));
<%
			                    	 }
			                    } else if (("\'M\'").equals(format.get("KEEP"))) {
%>
			                        int begin<%=cid %>=(temp_length_<%=cid%>-columnLength_<%=cid%>)/2;
<%
									if(useByte){
%>
										byteArray_<%=cid %>=arrays_<%=cid %>.copyOfRange(temp_<%=cid%>.getBytes(<%=encoding %>),begin<%=cid %>,begin<%=cid %>+columnLength_<%=cid%>);
				                    	sb_<%=cid %>.append(new String(byteArray_<%=cid %>,<%=encoding %>));
<%
									}else{
%>
			    	                    sb_<%=cid %>.append(temp_<%=cid%>.substring(begin<%=cid %>, begin<%=cid %>+columnLength_<%=cid%>));
<%
			                    	}
			                    } else {
			                    	if(useByte){
%>
			                    		byteArray_<%=cid %>=arrays_<%=cid %>.copyOfRange(temp_<%=cid%>.getBytes(<%=encoding %>),0,columnLength_<%=cid%>);
			                    		sb_<%=cid %>.append(new String(byteArray_<%=cid %>,<%=encoding %>));
<%
			                    	}else{
%>
										sb_<%=cid %>.append(temp_<%=cid%>.substring(0, columnLength_<%=cid%>));
<%
									}
								}
%>
							}
						}
<%
					}
				}else{
%>
				//get  and format output String begin
    			tempStringM<%=cid %>=<%				
				if(JavaTypesManager.isJavaPrimitiveType( column.getTalendType(), column.isNullable()) ) {%>
					String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>)<%					
				} else {%>
					(<%=conn.getName() %>.<%=column.getLabel() %> == null) ? 
					"": <%
					if(javaType == JavaTypesManager.DATE && patternValue!=null){
					%>FormatterUtils.format_Date(<%=conn.getName() %>.<%=column.getLabel() %>, <%= patternValue %>)<%
					}else if(javaType == JavaTypesManager.BYTE_ARRAY){
					%>java.nio.charset.Charset.defaultCharset().decode(java.nio.ByteBuffer.wrap(<%=conn.getName() %>.<%=column.getLabel() %>)).toString()<%
					}else if(javaType == JavaTypesManager.STRING){
					%><%=conn.getName() %>.<%=column.getLabel() %><%
					} else if(advancedSeparator && JavaTypesManager.isNumberType(javaType, column.isNullable())) { 
							%>
        							<% if(javaType == JavaTypesManager.BIGDECIMAL) {%>
        							FormatterUtils.format_Number(<%=column.getPrecision() == null? conn.getName() + "." + column.getLabel() : conn.getName() + "." + column.getLabel() + ".setScale(" + column.getPrecision() + ", java.math.RoundingMode.HALF_UP)" %>.toPlainString(), <%= thousandsSeparator %>, <%= decimalSeparator %>)					
        							<% } else { %>
        							FormatterUtils.format_Number(String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>), <%= thousandsSeparator %>, <%= decimalSeparator %>)						
        							<% } %>
							<%
					}else if (javaType == JavaTypesManager.BIGDECIMAL) {
					%><%=column.getPrecision() == null? conn.getName() + "." + column.getLabel() : conn.getName() + "." + column.getLabel() + ".setScale(" + column.getPrecision() + ", java.math.RoundingMode.HALF_UP)" %>.toPlainString()	
					<% }else{
					%>String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>)<%
					}
				}%> ;
				<%if(useByte){%>
    			tempLengthM<%=cid %>=tempStringM<%=cid %>.getBytes(<%=encoding %>).length;
    			<%}else{%>
    			tempLengthM<%=cid %>=tempStringM<%=cid %>.length();
    			<%}%>
    			
            	if (tempLengthM<%=cid %> >=<%=format.get("SIZE")%>) {
                    <%
                    if (("\'A\'").equals(format.get("KEEP"))) {%>
                        sb_<%=cid %>.append(tempStringM<%=cid %>);
                    <%
                    } else if (("\'R\'").equals(format.get("KEEP"))) {
                    	 if(useByte){%>
                    		byteArray_<%=cid %>=arrays_<%=cid %>.copyOfRange(tempStringM<%=cid %>.getBytes(<%=encoding %>),tempLengthM<%=cid %> - <%=format.get("SIZE")%>,tempLengthM<%=cid %>);
	                    	sb_<%=cid %>.append(new String(byteArray_<%=cid %>,<%=encoding %>));
<%
                         }else{
%>
    	                    sb_<%=cid %>.append(tempStringM<%=cid %>.substring(tempLengthM<%=cid %>-<%=format.get("SIZE")%>));
<%
                    	 }
                    } else if (("\'M\'").equals(format.get("KEEP"))) {
%>
                        int begin<%=cid %>=(tempLengthM<%=cid %>-<%=format.get("SIZE")%>)/2;
<%
						if(useByte){
%>
							byteArray_<%=cid %>=arrays_<%=cid %>.copyOfRange(tempStringM<%=cid %>.getBytes(<%=encoding %>),begin<%=cid %>,begin<%=cid %>+<%=format.get("SIZE")%>);
	                    	sb_<%=cid %>.append(new String(byteArray_<%=cid %>,<%=encoding %>));
<%
						}else{
%>
    	                    sb_<%=cid %>.append(tempStringM<%=cid %>.substring(begin<%=cid %>, begin<%=cid %>+<%=format.get("SIZE")%>));
<%
                    	}
                    } else {
                    	if(useByte){
%>
                    		byteArray_<%=cid %>=arrays_<%=cid %>.copyOfRange(tempStringM<%=cid %>.getBytes(<%=encoding %>),0,<%=format.get("SIZE")%>);
                    		sb_<%=cid %>.append(new String(byteArray_<%=cid %>,<%=encoding %>));
<%
                    	}else{
%>
                    		sb_<%=cid %>.append(tempStringM<%=cid %>.substring(0, <%=format.get("SIZE")%>));
<%
                    	}
                    }%>
                }else if(tempLengthM<%=cid %><<%=format.get("SIZE")%>){
                   
                    <%
                    if (("\'L\'").equals(format.get("ALIGN"))) {
                    %>
                        sb_<%=cid %>.append(tempStringM<%=cid %>);
                        for(int i_<%=cid %>=0; i_<%=cid %>< <%=format.get("SIZE")%>-tempLengthM<%=cid %>; i_<%=cid %>++){
                            sb_<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
                        }
                        
                    <%
                    } else if (("\'R\'").equals(format.get("ALIGN"))) {%>
                        for(int i_<%=cid %>=0; i_<%=cid %>< <%=format.get("SIZE")%>-tempLengthM<%=cid %>; i_<%=cid %>++){
                            sb_<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
                        }
                        sb_<%=cid %>.append(tempStringM<%=cid %>);
                        
                    <%
                    } else {%>
                        int temp<%=cid %>= (<%=format.get("SIZE")%>-tempLengthM<%=cid %>)/2;
                        for(int i_<%=cid %>=0;i_<%=cid %><temp<%=cid %>;i_<%=cid %>++){
                            sb_<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
                        }
                        sb_<%=cid %>.append(tempStringM<%=cid %>);
                        for(int i=temp<%=cid %>+tempLengthM<%=cid %>;i<<%=format.get("SIZE")%>;i++){
                            sb_<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
                        }

                        
                    <%
                    } %>       
                }
                //get  and format output String end				
			<%
				if((i+1)%100==0){
%>
                 }
<%
				}
				}//other columns (not dynamic)	end
			}
		}
                if(sizeColumns>0&&(sizeColumns%100)>0){
%>
                   }
<%
                 }
          }
%>
		
		}
		
		PositionUtil_<%=cid%> positionUtil_<%=cid%>=new PositionUtil_<%=cid%>();
		
<%
		if(!useStream){// the part of file path
%>
		String fileNewName_<%=cid%> = <%=filename%>;
		java.io.File createFile<%=cid%> = new java.io.File(fileNewName_<%=cid%>);
		boolean isFileGenerated_<%=cid %> = true;
		resourceMap.put("createFile<%=cid%>", createFile<%=cid%>);
		resourceMap.put("isFileGenerated_<%=cid%>", isFileGenerated_<%=cid%>);
<%
			if(isAppend){
%>
		if(createFile<%=cid%>.exists()){
			isFileGenerated_<%=cid %> = false;
			resourceMap.put("isFileGenerated_<%=cid%>", isFileGenerated_<%=cid%>);
		}
<%
			}
			if(("true").equals(ElementParameterParser.getValue(node,"__CREATE__"))){
%>
        //create directory only if not exists
        java.io.File parentFile_<%=cid%> = createFile<%=cid%>.getParentFile();
        if(parentFile_<%=cid%> != null && !parentFile_<%=cid%>.exists()) {
            parentFile_<%=cid%>.mkdirs();
        }
<%
			}
			if(compress && !isAppend){// compress the dest file
%>
        String fullName_<%=cid%> = null;
        String extension_<%=cid%> = null;
        String directory_<%=cid%> = null;
        if((fileNewName_<%=cid%>.indexOf("/") != -1)) {
            if(fileNewName_<%=cid%>.lastIndexOf(".") < fileNewName_<%=cid%>.lastIndexOf("/")) {
                fullName_<%=cid%> = fileNewName_<%=cid%>;
                extension_<%=cid%> = "";
            } else {
                fullName_<%=cid%> = fileNewName_<%=cid%>.substring(0, fileNewName_<%=cid%>.lastIndexOf("."));
                extension_<%=cid%> = fileNewName_<%=cid%>.substring(fileNewName_<%=cid%>.lastIndexOf("."));
            }           
            directory_<%=cid%> = fileNewName_<%=cid%>.substring(0, fileNewName_<%=cid%>.lastIndexOf("/"));            
        } else {
            if(fileNewName_<%=cid%>.lastIndexOf(".") != -1) {
                fullName_<%=cid%> = fileNewName_<%=cid%>.substring(0, fileNewName_<%=cid%>.lastIndexOf("."));
                extension_<%=cid%> = fileNewName_<%=cid%>.substring(fileNewName_<%=cid%>.lastIndexOf("."));
            } else {
                fullName_<%=cid%> = fileNewName_<%=cid%>;
                extension_<%=cid%> = "";
            }
            directory_<%=cid%> = "";
        }
		String zipName_<%=cid %> = fullName_<%=cid%> + ".zip";
		java.io.File file_<%=cid%> = new java.io.File(zipName_<%=cid %>);
		resourceMap.put("file_<%=cid%>", file_<%=cid%>);
	    java.util.zip.ZipOutputStream zipOut_<%=cid %>=new java.util.zip.ZipOutputStream(
	    			new java.io.BufferedOutputStream(new java.io.FileOutputStream(zipName_<%=cid%>)));
	    zipOut_<%=cid %>.putNextEntry(new java.util.zip.ZipEntry(createFile<%=cid%>.getName()));
		final <%=writerClass %> out<%=cid %> = new <%=writerClass %>(new java.io.OutputStreamWriter(zipOut_<%=cid %>,<%= encoding%>));
		resourceMap.put("out<%=cid %>", out<%=cid %>);
<%
			}else{
%>
		final <%=writerClass %> out<%=cid %> = new <%=writerClass %>(new java.io.OutputStreamWriter(
        		new java.io.FileOutputStream(fileNewName_<%=cid%>, <%= isAppend%>),<%= encoding%>));
        		resourceMap.put("out<%=cid %>", out<%=cid %>);
<%
			}
		}else{ //the part of the output stream
			if(compress && !isAppend){// compress the dest output stream
%>
	    java.util.zip.ZipOutputStream zipOut_<%=cid %>=new java.util.zip.ZipOutputStream(
	    			new java.io.BufferedOutputStream(<%=outStream %>));
	    zipOut_<%=cid %>.putNextEntry(new java.util.zip.ZipEntry("TalendOutputPositional"));
		java.io.OutputStreamWriter outWriter_<%=cid %> = new java.io.OutputStreamWriter(zipOut_<%=cid %>,<%= encoding%>);
		resourceMap.put("outWriter_<%=cid %>", outWriter_<%=cid %>);
		final <%=writerClass %> out<%=cid %> = new <%=writerClass %>(outWriter_<%=cid %>);
		resourceMap.put("out<%=cid %>", out<%=cid %>);
<%
			}else{
%>
		java.io.OutputStreamWriter outWriter_<%=cid %> = new java.io.OutputStreamWriter(<%=outStream %>,<%= encoding%>);
		resourceMap.put("outWriter_<%=cid %>", outWriter_<%=cid %>);
		final <%=writerClass %> out<%=cid %> = new <%=writerClass %>(outWriter_<%=cid %>); 
		resourceMap.put("out<%=cid %>", out<%=cid %>); 
<%
			}
		}
		
		if(isIncludeHeader){      	
			if(!useStream){
%>
		if(createFile<%=cid%>.length()==0){
<%
			}
			
%>
    		
    		String tempStringB<%=cid %>=null;
    		int tempLengthB<%=cid %>=0;
<%
    		for (int i = 0; i < sizeColumns; i++) {
    			if(i%100==0){
%>
            positionUtil_<%=cid%>.writeHeader_<%=i/100%>(tempStringB<%=cid %>,tempLengthB<%=cid %>,out<%=cid %><% if(useByte){ %>,byteArray_<%=cid %>,arrays_<%=cid %><% }%>);
<%
                }
            }
%>
    		out<%=cid %>.write(<%=separator%>);
<%
			if(!useStream){
%>
    	}
<%
			}
		}
    }
}
%>
