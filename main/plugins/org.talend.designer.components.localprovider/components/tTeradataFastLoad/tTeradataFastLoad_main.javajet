<%@ jet 
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.MappingTypeRetriever
	org.talend.core.model.metadata.MetadataTalendType
	org.talend.core.model.process.IConnectionCategory
	java.util.List
	java.util.ArrayList
	java.util.LinkedList
    java.util.Map
    java.util.HashMap
"
skeleton="../templates/db_output_bulk.skeleton"
%>
<%@ include file="../templates/Log4j/Log4jDBConnUtil.javajet"%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();	
	String cid = node.getUniqueName();
    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	String tableName = ElementParameterParser.getValue(node,"__TABLE__");
    String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
	String incomingConnName = null;
	
	List<? extends IConnection> conns = node.getIncomingConnections();
	if(conns!=null && conns.size()>0){
		IConnection conn = conns.get(0);
		incomingConnName = conn.getName();
	}
	
	// Manager manager = null;
	boolean isDynamic = false;
	List<IMetadataTable> metadatas = node.getMetadataList();
	if(metadatas != null && metadatas.size()>0){
		IMetadataTable metadata = metadatas.get(0);
		if(metadata != null){
			isDynamic = metadata.isDynamicSchema();
		}
	}
	
    String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }
    List<IMetadataColumn> rejectColumnList = null;
    IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
    if(metadataTable != null) {
        rejectColumnList = metadataTable.getListColumns();      
    }
    
    List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
    boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));

	List<IMetadataColumn> columnList = getColumnList(node);
	List<IMetadataColumn> columnsWithoutDynamic =  new LinkedList<IMetadataColumn>();
	for(IMetadataColumn column:columnList){
		if (!"id_Dynamic".equals(column.getTalendType())) {
			columnsWithoutDynamic.add(column);
		}
	}

class Operation{
	public static final int NORMAL_TYPE = 0;
	public static final int INSERT_TYPE = 1;
	public static final int UPDATE_TYPE = 2;
	
	public String generateType(String typeToGenerate){
		if(("byte[]").equals(typeToGenerate)){
 	  		typeToGenerate = "Bytes";
 	   	}else if(("java.util.Date").equals(typeToGenerate)){
 	   		typeToGenerate = "Date";
 	  	}else if(("java.util.Timestamp").equals(typeToGenerate)){
            typeToGenerate = "Timestamp";
        }else if(("Integer").equals(typeToGenerate)){
 	   		typeToGenerate = "Int";
 	   	}else{
			typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
		}
		return typeToGenerate;
	}
	
	public void generateSetStmt(String typeToGenerate, IMetadataColumn column,
								int counter,String incomingConnName,String cid,int stmtType){
		boolean isObject = false;								
		String prefix = null;								
		if(stmtType == Operation.NORMAL_TYPE){
			prefix = "pstmt_";
		}else if(stmtType == Operation.INSERT_TYPE){
			prefix = "pstmtInsert_";
		}else if(stmtType == Operation.UPDATE_TYPE){
			prefix = "pstmtUpdate_";
		}
		%>

	<%if(("Character").equals(typeToGenerate)){
	isObject = true;
	%>
if(<%=incomingConnName%>.<%=column.getLabel()%>==null){
	<%=prefix+cid%>.setNull(<%=counter%>,java.sql.Types.CHAR);
	<%
	}else if(("Date").equals(typeToGenerate)){
	isObject = true;
	%>
if(<%=incomingConnName%>.<%=column.getLabel()%>==null){
	<%=prefix+cid%>.setNull(<%=counter%>,java.sql.Types.DATE);
	<%
	}else if(("Timestamp").equals(typeToGenerate)){
    isObject = true;
    %>
if(<%=incomingConnName%>.<%=column.getLabel()%>==null){
    <%=prefix+cid%>.setNull(<%=counter%>,java.sql.Types.TIMESTAMP);
    <%
    }else if(("byte[]").equals(typeToGenerate)){
	isObject = true;
	%>
if(<%=incomingConnName%>.<%=column.getLabel()%>==null){
	<%=prefix+cid%>.setNull(<%=counter%>,java.sql.Types.ARRAY);			
	<%
	}else if(("Long").equals(typeToGenerate)||("Byte").equals(typeToGenerate)||("Integer").equals(typeToGenerate)||("Short").equals(typeToGenerate)){
	isObject = true;
	%>
if(<%=incomingConnName%>.<%=column.getLabel()%>==null){
	<%=prefix+cid%>.setNull(<%=counter%>,java.sql.Types.INTEGER);
	<%
	}else if(("String").equals(typeToGenerate)){
	isObject = true;
	%>
if(<%=incomingConnName%>.<%=column.getLabel()%>==null){
	<%=prefix+cid%>.setNull(<%=counter%>,java.sql.Types.VARCHAR);
	<%
	}else if(("Object").equals(typeToGenerate)){
	isObject = true;
	%>
if(<%=incomingConnName%>.<%=column.getLabel()%>==null){
	<%=prefix+cid%>.setNull(<%=counter%>,java.sql.Types.OTHER);
	<%
	}else if(("Boolean").equals(typeToGenerate)){
	isObject = true;
	%>
if(<%=incomingConnName%>.<%=column.getLabel()%>==null){
	<%=prefix+cid%>.setNull(<%=counter%>,java.sql.Types.BOOLEAN);	
	<%
	}else if(("Double").equals(typeToGenerate)){
	isObject = true;
	%>
if(<%=incomingConnName%>.<%=column.getLabel()%>==null){
	<%=prefix+cid%>.setNull(<%=counter%>,java.sql.Types.DOUBLE);	
	<%
	}else if(("Float").equals(typeToGenerate)){
	isObject = true;
	%>
if(<%=incomingConnName%>.<%=column.getLabel()%>==null){
	<%=prefix+cid%>.setNull(<%=counter%>,java.sql.Types.FLOAT);	
	<%
	}
if(isObject){
	%>

}else{

	<%
}
	typeToGenerate = generateType(typeToGenerate);
	
	if(("Char").equals(typeToGenerate)||("Character").equals(typeToGenerate)){
	%>
	<%if(isObject){%>
	if(<%=incomingConnName%>.<%=column.getLabel()%>==null){
	<%}else{%>
	if(("null").equals(String.valueOf(<%=incomingConnName%>.<%=column.getLabel()%>).toLowerCase())){
	<%}%>
		<%=prefix+cid%>.setNull(<%=counter%>,java.sql.Types.CHAR);
		
	}else if(<%=incomingConnName%>.<%=column.getLabel()%> == '\0'){
	
		<%=prefix+cid%>.setString(<%=counter%>,"");
		
	}else{
		
		<%=prefix+cid%>.setString(<%=counter%>,String.valueOf(<%=incomingConnName%>.<%=column.getLabel()%>));
	}
	<%
	}else if(("Date").equals(typeToGenerate)){
	%>
	if(<%=incomingConnName%>.<%=column.getLabel()%>!=null){
	
		<%=prefix+cid%>.setDate(<%=counter%>,new java.sql.Date(<%=incomingConnName%>.<%=column.getLabel()%>.getTime()));
		
	}else{
	
		<%=prefix+cid%>.setNull(<%=counter%>,java.sql.Types.DATE);
		
	}
	<%
	}else if(("Timestamp").equals(typeToGenerate)){
	%>
	if(<%=incomingConnName%>.<%=column.getLabel()%>!=null){
	    
	   <%=prefix+cid%>.setTimestamp(<%=counter%>,new java.sql.Timestamp(<%=incomingConnName%>.<%=column.getLabel()%>.getTime()));
	        
	}else{
	    
	   <%=prefix+cid%>.setNull(<%=counter%>,java.sql.Types.TIMESTAMP);
	        
    }
	<%
	}else{
	%>
	<%=prefix+cid%>.set<%=typeToGenerate%>(<%=counter%>,<%=incomingConnName%>.<%=column.getLabel()%>);
	<%
	}
if(isObject){
	%>
}
<%
		} /* "if(isObject)" end */
	} /* "public void generateSetStmt" end */
} /* "class Operation" end */

Operation operation = new Operation();
if(incomingConnName != null && columnList != null){
		if(isDynamic) {
			StringBuilder insertColName = new StringBuilder();
			StringBuilder insertValueStmt = new StringBuilder();
			for (IMetadataColumn column : columnsWithoutDynamic) {
				insertColName.append(column.getLabel()).append(", ");
				insertValueStmt.append("?, ");
			}
			%>
			if (nb_line_<%=cid%> == 0) {
				String insert_<%=cid%> = "INSERT INTO " + tableName_<%=cid%> + " (<%=insertColName.toString()%> "+DynamicUtils.getInsertIntoStmtColumnsList(<%=incomingConnName%>.<%=getDynamicColumn()%>, "teradata_id")+") VALUES (<%=insertValueStmt.toString()%>"+DynamicUtils.getInsertIntoStmtValuesList(<%=incomingConnName%>.<%=getDynamicColumn()%>, "teradata_id")+")";
				pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
			}
			<%
		}
		
		int counter = 1;
		for(IMetadataColumn column: columnsWithoutDynamic) {
			String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
			operation.generateSetStmt(typeToGenerate,column,counter,incomingConnName,cid,0);
			counter++;
		}
		
		if(isDynamic) {
		%>
			DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=getDynamicColumn()%>, pstmt_<%=cid%>, <%=counter-1%>, "teradata_id");
		<%
		}
		%>
		
		try{
				pstmt_<%=cid %>.addBatch();
		   }catch(java.lang.Exception e){
		            <% if (("true").equals(dieOnError)) { %>
		                throw(e);
					<% } else {
						log4jCodeGenerateUtil.logError(node,"error");
		                if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
			                    for(IMetadataColumn column : columnList) {
				                        %>
				                        <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
				                        <%
			                    } %>
		                    <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
		                    <%
		                } else {
		                    %>
		                    System.err.print(e.getMessage());
		                    <%
		                }
		            } 
		            %>
		        }
			<%

			if(outgoingConns != null && outgoingConns.size() > 0) {
			    for(IConnection outgoingConn : outgoingConns) {
			        if(!outgoingConn.getName().equals(rejectConnName) &&
			        	outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA) ) {
			            for(IMetadataColumn column : columnList) {
			                %>
			                <%=outgoingConn.getName()%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
			                <%
			            }
			        }
			    }
			}
		%>
	    commitCounter_<%=cid%>++;
	    nb_line_<%=cid%>++;
<%
	////////////commit every////////////
	if(!("").equals(commitEvery) && !("0").equals(commitEvery)){
	%>
        if(commitEvery_<%=cid%> <= commitCounter_<%=cid%>){
			int[] resultArr = pstmt_<%=cid %>.executeBatch();
			pstmt_<%=cid %>.clearBatch();
        	commitCounter_<%=cid%>=0;
        	int sum = 0;
        	for(int i : resultArr){
  		    	sum += (i<0 ? 0 : i);
        	}
        	insertedCount_<%=cid%> += sum;
        }
	<%
	}
}
%>
