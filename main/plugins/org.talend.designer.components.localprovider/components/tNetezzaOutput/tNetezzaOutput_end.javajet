<%@ jet
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.MappingTypeRetriever
    org.talend.core.model.metadata.MetadataTalendType
	java.util.List
	java.util.ArrayList
	java.util.Map
	java.util.HashMap
"
skeleton="../templates/db_output_bulk.skeleton"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/DBLogUtil.javajet"%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	dbLog = new DBLogUtil(node);
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	String cid = node.getUniqueName();
	String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
	List<Map<String, String>> addCols = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__ADD_COLS__");
    boolean useFieldOptions = ("true").equals(ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__"));
    List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
	String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
	String tableName = ElementParameterParser.getValue(node,"__TABLE__");
    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	boolean useBatchSize = ("true").equals(ElementParameterParser.getValue(node,"__USE_BATCH_SIZE__"));

	String rejectConnName = null;
	List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
	if(rejectConns != null && rejectConns.size() > 0) {
	    IConnection rejectConn = rejectConns.get(0);
	    rejectConnName = rejectConn.getName();
	}

	boolean useBatch = (rejectConnName == null)
	                   && (
	                        ("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)
	                      )
	                   && useBatchSize;

    if(("INSERT_OR_UPDATE").equals(dataAction)) {
        %>
        if(pstmtUpdate_<%=cid%> != null){

            pstmtUpdate_<%=cid %>.close();

        }
        if(pstmtInsert_<%=cid %> != null){

            pstmtInsert_<%=cid %>.close();

        }
        if(pstmt_<%=cid %> != null) {

            pstmt_<%=cid %>.close();

        }
        <%
    } else if(("UPDATE_OR_INSERT").equals(dataAction)) {
        %>
        if(pstmtUpdate_<%=cid%> != null){

            pstmtUpdate_<%=cid %>.close();

        }
        if(pstmtInsert_<%=cid %> != null){

            pstmtInsert_<%=cid %>.close();

        }
        <%
    } else {
        %>
        <%
        if (useBatch) {
	    %>
	    try {
	    	if(pstmt_<%=cid %> != null && batchSizeCounter_<%=cid%> > 0 ) {
	    		<%dbLog.batch().executeTry(dbLog.str(dataAction));%>
				pstmt_<%=cid %>.executeBatch();
				<%dbLog.batch().executeDone(dbLog.str(dataAction));%>
				pstmt_<%=cid %>.clearBatch();
		    	<%if (("INSERT").equals(dataAction)) {
		    	%>
		    	insertedCount_<%=cid%> +=pstmt_<%=cid %>.getUpdateCount();
		    	<%
		    	}else if (("UPDATE").equals(dataAction)) {
		    	%>
		    	updatedCount_<%=cid%> += pstmt_<%=cid %>.getUpdateCount();
		    	<%
		    	}else if (("DELETE").equals(dataAction)) {
		    	%>
		    	deletedCount_<%=cid%> += pstmt_<%=cid %>.getUpdateCount();
		    	<%
		    	}%>
		    }
	    }catch (java.sql.BatchUpdateException e){
	    	<%if(("true").equals(dieOnError)) {
	    	%>
	    		throw(e);
	    	<%
	    	}else {
	        	dbLog.logPrintedException("e.getMessage()");
	        	%>
	    	System.err.println(e.getMessage());
	    	<%
	    	}%>
		}catch (java.sql.SQLException e){
			<%if(("true").equals(dieOnError)) {
			%>
				throw(e);
			<%
			}else {
				dbLog.logPrintedException("e.getMessage()");
				%>
				System.err.println(e.getMessage());
			<%
			}%>
		}
	    <%
	    }%>

	        if(pstmt_<%=cid %> != null) {
	            pstmt_<%=cid %>.close();

	        }
	        <%
	    }
	    %>

    <%
	if(!("true").equals(useExistingConn))
	{
		if(!("").equals(commitEvery) && !("0").equals(commitEvery))
		{
    		%>
			if(commitCounter_<%=cid%> > 0){
				<%dbLog.commit().commitTry(null, dbLog.var("commitCounter"));%>
				conn_<%=cid%>.commit();
				<%dbLog.commit().commitDone(null);%>
			}
    		<%
		}

    	%>
		<%dbLog.conn().closeTry(null);%>
		conn_<%=cid%> .close();
		<%dbLog.conn().closeDone(null);%>
		resourceMap.put("finish_<%=cid%>", true);
    	<%
	}
    %>

<%@ include file="../templates/DB/Output/DBOutputEndGlobalVars.javajet"%>
