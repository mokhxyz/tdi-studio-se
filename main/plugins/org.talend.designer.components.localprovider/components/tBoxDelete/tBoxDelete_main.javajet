<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    java.util.List
" 
%>
	<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%>
<%
		CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
		INode node = (INode)codeGenArgument.getArgument();
		String cid = node.getUniqueName();
		
		String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
		String accessToken = ElementParameterParser.getValue(node, "__ACCESS_TOKEN__");
		String refreshToken = ElementParameterParser.getValue(node, "__REFRESH_TOKEN__");
		
		String clientId = ElementParameterParser.getValue(node, "__CLIENT_ID__");
		String clientSecret = ElementParameterParser.getValue(node, "__CLIENT_SECRET__");
		
		String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	    String connectionKey = "\"conn_" + connection+"\"";
		
		String filePath = ElementParameterParser.getValue(node, "__PATH__");
		boolean deleteFolder = "true".equals(ElementParameterParser.getValue(node, "__DELETE_FOLDER__"));
		boolean dieOnError = "true".equals(ElementParameterParser.getValue(node, "__DIE_ON_ERROR__"));
		
		final boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
		String dataInputConnection = null;
        
        List< ? extends IConnection> inputConnections = node.getIncomingConnections();
	    for(IConnection conn : inputConnections) {
	        if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
	        	dataInputConnection = conn.getName();
	        	break;
	        } // if(conn) end
	    } // for(conns) end

%>

		String <%=cid%>_filePath = <%=filePath%>;
		if (<%=cid%>_filePath == null || "".equals(<%=cid%>_filePath.trim()))
		{
			throw new Exception("File path can not be null");
		}
		String <%=cid%>_remoteFilePath = normalizePath(<%=cid%>_filePath);
		String <%=cid%>_remoteFileName = getFolderFromPath(<%=cid%>_remoteFilePath);
		com.box.boxjavalibv2.dao.BoxItem <%=cid%>_boxItem = null;
		com.box.boxjavalibv2.dao.BoxFolder <%=cid%>_boxFolder = null;
		
		String parentPath = normalizePath(<%=cid%>_remoteFilePath.replace(<%=cid%>_remoteFileName, ""));
                
        <%=cid%>_boxFolder = <%=cid%>_client.getFoldersManager().getFolder("0", null);
    
        List<String> <%=cid%>_paths = new java.util.ArrayList<String>(java.util.Arrays.asList(parentPath.split("/")));

        <%=cid%>_boxFolder = getBoxFolderRecursively(<%=cid%>_paths, <%=cid%>_boxFolder, <%=cid%>_client);
    
        com.box.boxjavalibv2.dao.BoxCollection <%=cid%>_searchResults = <%=cid%>_boxFolder.getItemCollection();
        for (com.box.boxjavalibv2.dao.BoxTypedObject <%=cid%>_entry : <%=cid%>_searchResults.getEntries())
        {
            if(<%=cid%>_entry.getValue("name").equals(<%=cid%>_remoteFileName)){
               if("folder".equals(<%=cid%>_entry.getType())){
                   <%=cid%>_boxItem = (com.box.boxjavalibv2.dao.BoxItem)<%=cid%>_client.getFoldersManager().getFolder(<%=cid%>_entry.getId(),null);  
               }else{
                   <%=cid%>_boxItem = (com.box.boxjavalibv2.dao.BoxItem)<%=cid%>_client.getFilesManager().getFile(<%=cid%>_entry.getId(),null);
               }   
            }
        }
		
		if (<%=cid%>_boxItem == null)
		{
			throw new Exception("Nothing found under path " + <%=cid%>_filePath);
		}
		if (<%=cid%>_boxItem.getType().equalsIgnoreCase("file"))
		{
			<%=cid%>_client.getFilesManager().deleteFile(<%=cid%>_boxItem.getId(), null);
		}
		else if (<%=cid%>_boxItem.getType().equalsIgnoreCase("folder"))
		{
			com.box.boxjavalibv2.requests.requestobjects.BoxFolderDeleteRequestObject <%=cid%>_delObject = com.box.boxjavalibv2.requests.requestobjects.BoxFolderDeleteRequestObject.deleteFolderRequestObject(true);
	       	<%=cid%>_client.getFoldersManager().deleteFolder(<%=cid%>_boxItem.getId(), <%=cid%>_delObject);
		}
		globalMap.put("<%=cid %>_REMOVED_PATH",getBoxItemPath(<%=cid%>_boxItem));

			
