<%@ jet
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.MappingTypeRetriever
	org.talend.core.model.metadata.MetadataTalendType
	org.talend.core.model.process.IConnection
	java.util.ArrayList
	java.util.HashMap
	java.util.List
	java.util.Map
"
skeleton="../templates/db_output_bulk.skeleton"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/DBLogUtil.javajet"%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();

	String cid = node.getUniqueName();
	dbLog = new DBLogUtil(node);
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");

	String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");

	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");

	String tableName = ElementParameterParser.getValue(node,"__TABLE__");

	List<Map<String, String>> addCols =
        (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__ADD_COLS__");

    boolean useFieldOptions = ("true").equals(ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__"));

    List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");

	String incomingConnName = null;
    List<IMetadataColumn> columnList = getColumnList(node);

    List< ? extends IConnection> conns = node.getIncomingConnections();
    if(conns!=null && conns.size()>0){
        IConnection conn = conns.get(0);
        incomingConnName = conn.getName();
    }

	String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");

    boolean isDynamic = false;
    List<IMetadataTable> metadatas = node.getMetadataList();
    if ((metadatas!=null)&&(metadatas.size()>0)) {
        IMetadataTable metadata = metadatas.get(0);
		isDynamic = metadata.isDynamicSchema();
    }

    List<Column> stmtStructure =  getManager(dbmsId, cid).createColumnList(columnList, useFieldOptions, fieldOptions, addCols);

    List<Column> colStruct =  new ArrayList();
    for(Column colStmt:stmtStructure){
    	if (!colStmt.isReplaced()&&!colStmt.isAddCol()&&!colStmt.isDynamic()) {
            colStruct.add(colStmt);
        }
    }

    isDynamic = isDynamic && !getManager(dbmsId, cid).isDynamicColumnReplaced();

    boolean useBatch = "true".equals(ElementParameterParser.getValue(node, "__USE_BATCH__"));
    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");

    String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }

    boolean extendedInsert = false;
    if ("INSERT".equalsIgnoreCase(dataAction)) {
        extendedInsert = "true".equals(ElementParameterParser.getValue(node, "__EXTENDINSERT__"));
    }

    useBatch = (rejectConnName == null)
             && (
                  ("INSERT".equals(dataAction) && !extendedInsert) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)
                )
             && useBatch;

	Map<String, StringBuilder> actionSQLMap = getManager(dbmsId, cid).createProcessSQL(stmtStructure);
    StringBuilder insertColName = actionSQLMap.get(INSERT_COLUMN_NAME);
    StringBuilder insertValueStmt = actionSQLMap.get(INSERT_VALUE_STMT);
    StringBuilder updateSetStmt = actionSQLMap.get(UPDATE_SET_STMT);
    StringBuilder updateWhereStmt = actionSQLMap.get(UPDATE_WHERE_STMT);
    StringBuilder deleteWhereStmt = actionSQLMap.get(DELETE_WHERE_STMT);



	String numPerInsert = ElementParameterParser.getValue(node, "__NB_ROWS_PER_INSERT__");

	if(extendedInsert){
		class ExtendInsertOperation{
			public String generateType(String typeToGenerate){
				if(("byte[]").equals(typeToGenerate)){
					typeToGenerate = "Bytes";
				}else if(("java.util.Date").equals(typeToGenerate)){
					typeToGenerate = "Date";
				}else if(("Integer").equals(typeToGenerate)){
					typeToGenerate = "Int";
				}else if(("List").equals(typeToGenerate)){
					typeToGenerate = "Object";
				}else{
					typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
				}
				return typeToGenerate;
			}

			public void generateSetStmt(String typeToGenerate,Column column,String cid){
				boolean isObject = false;
				String prefix = "pstmt_";

				if(("Character").equals(typeToGenerate)) {
					isObject = true;
					%>
					if(bufferL<%=cid%>.<%=column.getName()%>==null){
						<%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.CHAR);
					<%
				}else if(("Date").equals(typeToGenerate)){
					isObject = true;
					%>
					if(bufferL<%=cid%>.<%=column.getName()%>==null){
						<%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.DATE);
					<%
				}else if(("byte[]").equals(typeToGenerate)){
					isObject = true;
					%>
					if(bufferL<%=cid%>.<%=column.getName()%>==null){
						<%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.ARRAY);
					<%
				}else if(("Long").equals(typeToGenerate)||("Byte").equals(typeToGenerate)||("Integer").equals(typeToGenerate)||("Short").equals(typeToGenerate)){
					isObject = true;
					%>
					if(bufferL<%=cid%>.<%=column.getName()%>==null){
						<%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.INTEGER);
					<%
				}else if(("String").equals(typeToGenerate)){
					isObject = true;
					%>
					if(bufferL<%=cid%>.<%=column.getName()%>==null){
						<%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.VARCHAR);
					<%
				}else if(("Object").equals(typeToGenerate)){
					isObject = true;
					%>
					if(bufferL<%=cid%>.<%=column.getName()%>==null){
						<%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.OTHER);
					<%
				}else if(("Boolean").equals(typeToGenerate)){
					isObject = true;
					%>
					if(bufferL<%=cid%>.<%=column.getName()%>==null){
						<%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.BOOLEAN);
					<%
				}else if(("Double").equals(typeToGenerate)){
					isObject = true;
					%>
					if(bufferL<%=cid%>.<%=column.getName()%>==null){
						<%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.DOUBLE);
					<%
				}else if(("Float").equals(typeToGenerate)){
					isObject = true;
					%>
					if(bufferL<%=cid%>.<%=column.getName()%>==null){
						<%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.FLOAT);
					<%
				}
				if(isObject){
					%>

					}else{

					<%
				}
				typeToGenerate = generateType(typeToGenerate);

				if(("Char").equals(typeToGenerate)||("Character").equals(typeToGenerate)){
					%>
				<%
				if(isObject) {
					%>
					if(bufferL<%=cid%>.<%=column.getName()%>==null){
				<%
				} else {
					%>
					if(("null").equals(String.valueOf(bufferL<%=cid%>.<%=column.getName()%>).toLowerCase())){
				<%
				}
				%>
				<%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.CHAR);

				} else if(bufferL<%=cid%>.<%=column.getName()%> == '\0') {

					<%=prefix+cid%>.setString(count<%=cid%>,"");

				} else {

					<%=prefix+cid%>.setString(count<%=cid%>,String.valueOf(bufferL<%=cid%>.<%=column.getName()%>));
				}
				<%
				}else if(("Date").equals(typeToGenerate)){
					%>
					if(bufferL<%=cid%>.<%=column.getName()%>!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_<%=cid %> = bufferL<%=cid%>.<%=column.getName()%>.getTime();
						if (date_<%=cid %> < year1_<%=cid %> || date_<%=cid %> >= year10000_<%=cid %>) {
							<%=prefix+cid%>.setString(count<%=cid%>, "0000-00-00 00:00:00");
						} else {
							<%=prefix+cid%>.setTimestamp(count<%=cid%>, new java.sql.Timestamp(date_<%=cid %>));
						}
					}else{

						<%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.DATE);

					}
					<%
				}else{
					%>
					<%=prefix+cid%>.set<%=typeToGenerate%>(count<%=cid%>,bufferL<%=cid%>.<%=column.getName()%>);
					<%
				}
				if(isObject){
					%>

					}

				<%
				}
			}
		}
		ExtendInsertOperation eiOperation = new ExtendInsertOperation();
	%>


	    if(rowCount<%=cid%>!=0){

	        StringBuilder extendInsertValue_<%=cid%> = new StringBuilder();
	        for(int i_<%=cid%>=0 ; i_<%=cid%> < rowCount<%=cid%> ; i_<%=cid%>++){
<%
			List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
			if(isDynamic) {
            	if(conns_dynamic!=null && conns_dynamic.size()>0){
            		IConnection conn = conns_dynamic.get(0);
            		if(!("".equals(insertColName.toString()))) {
%>
        			extendInsertValue_<%=cid%>.append("(<%=insertValueStmt.toString()%>,"+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")");
<%
					} else {
%>
        			extendInsertValue_<%=cid%>.append("("+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")");
<%
					}
				}
			} else {
%>
				extendInsertValue_<%=cid%>.append("(<%=insertValueStmt.toString()%>)");
<%
			}
%>
     			if (i_<%=cid%> != rowCount<%=cid%> - 1) extendInsertValue_<%=cid%>.append(",");
	        }

<%
			if(isDynamic) {
            	if(conns_dynamic!=null && conns_dynamic.size()>0){
                	IConnection conn = conns_dynamic.get(0);
                	if(!("".equals(insertColName.toString()))) {
%>
                	insert_<%=cid%> = "INSERT INTO \"" + tableName_<%=cid%> + "\" (<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES " + extendInsertValue_<%=cid%>.toString();
<%
					} else {
%>
                	insert_<%=cid%> = "INSERT INTO \"" + tableName_<%=cid%> + "\" ("+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES " + extendInsertValue_<%=cid%>.toString();
<%
            		}
        		}
        	} else {
%>
				insert_<%=cid%> = "INSERT INTO \"" + tableName_<%=cid%> + "\" (<%=insertColName.toString()%>) VALUES "+extendInsertValue_<%=cid%>.toString();
<%
        	}
%>
        	pstmt_<%=cid %> =  conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
<%
			int insertableCount = 0;
			for(Column column : colStruct) {
				if(column.isInsertable()) {
					insertableCount++;
				}
			}
%>
			rowCount<%=cid%> = 0;
	        for(BufferLine_<%=cid%> bufferL<%=cid%> : exInsertColValueList<%=cid%>){
				int count<%=cid%> = rowCount<%=cid%> *
					(<%=insertableCount%>
<%
					if(isDynamic) {
						Column dynamicColumn = getColumn(getDynamicColumn());
%>
						+ bufferL<%=cid%>.<%=dynamicColumn.getName()%>.getColumnCount()
<%
					}
%>
					)
				+ 1;
<%
	            for(Column column : colStruct) {
	                if(column.isInsertable()) {
	                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
	                    eiOperation.generateSetStmt(typeToGenerate, column, cid);
	                    %>
	                    count<%=cid%>++;
	                    <%
	                }
	            }

	            if(isDynamic) {
					Column dynamicColumn = getColumn(getDynamicColumn());
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
					if("Dynamic".equals(typeToGenerate)) {
					%>
					DynamicUtils.writeColumnsToDatabse(bufferL<%=cid%>.<%=dynamicColumn.getName()%>, pstmt_<%=cid%>, count<%=cid%>-1, "<%=dbmsId%>");
					<%
					}
				}
%>

	            rowCount<%=cid%>++;
	        }
	        insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
	    }
	<%
	} // end extended insert case


    if(("INSERT_OR_UPDATE").equals(dataAction)) {
        %>
        if(pstmtUpdate_<%=cid%> != null){

            pstmtUpdate_<%=cid %>.close();

        }
        if(pstmtInsert_<%=cid %> != null){

            pstmtInsert_<%=cid %>.close();

        }
        if(pstmt_<%=cid %> != null) {

            pstmt_<%=cid %>.close();

        }
        <%
    } else if(("UPDATE_OR_INSERT").equals(dataAction)) {
        %>
        if(pstmtUpdate_<%=cid%> != null){

            pstmtUpdate_<%=cid %>.close();

        }
        if(pstmtInsert_<%=cid %> != null){

            pstmtInsert_<%=cid %>.close();

        }
        <%
    } else {
        %>
                <%
                   if(useBatch){
                %>
                        int[] status_<%=cid%> = null;
                        int countSum_<%=cid%> = 0;
                        try {
                            if(pstmt_<%=cid %>!=null && batchSizeCounter_<%=cid%> > 0 ){
                                <%dbLog.batch().executeTry(dbLog.str(dataAction));%>
                                status_<%=cid%> = pstmt_<%=cid %>.executeBatch();
                                <%dbLog.batch().executeDone(dbLog.str(dataAction));%>
                                for(int countEach_<%=cid%>: status_<%=cid%>) {
                                    countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
                                }
                            }
                        }catch (java.sql.BatchUpdateException e){
                            <%
                            if(("true").equals(dieOnError)) {
                            %>
                                throw(e);
                            <%
                            }else {
                            dbLog.logPrintedException("e.getMessage()");
                            %>
                            for(int countEach_<%=cid%>: e.getUpdateCounts()) {
                                countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
                            }
                            System.err.println(e.getMessage());
                            <%
                            }
                            %>
                        }
                        if(pstmt_<%=cid %>!=null && batchSizeCounter_<%=cid%> > 0 ){
                            try {
                                tmp_batchUpdateCount_<%=cid%> = pstmt_<%=cid %>.getUpdateCount();
                            }catch (java.sql.SQLException e){

                            }
                            tmp_batchUpdateCount_<%=cid%> = tmp_batchUpdateCount_<%=cid%> > countSum_<%=cid%> ? tmp_batchUpdateCount_<%=cid%> : countSum_<%=cid%>;
                            <%if (("INSERT").equals(dataAction)) {
                            %>
                                insertedCount_<%=cid%> += tmp_batchUpdateCount_<%=cid%>;
                            <%
                            }else if (("UPDATE").equals(dataAction)) {
                            %>
                                updatedCount_<%=cid%> += tmp_batchUpdateCount_<%=cid%>;
                            <%
                            }else if (("DELETE").equals(dataAction)) {
                            %>
                                deletedCount_<%=cid%> += tmp_batchUpdateCount_<%=cid%>;
                            <%
                            }
                            %>
                        }
        <%
            }
        %>
                        if(pstmt_<%=cid %> != null) {
                            pstmt_<%=cid %>.close();
                        }
        <%
    }
    %>

    <%
	if(!("true").equals(useExistingConn))
	{
		if(!("").equals(commitEvery) && !("0").equals(commitEvery))
		{
			%>
		if (commitCounter_<%=cid%> > 0) {
			<%dbLog.commit().commitTry(null, dbLog.var("commitCounter"));%>
			conn_<%=cid%>.commit();
			<%dbLog.commit().commitDone(null);%>
		}
            <%
		}
		%>
		<%dbLog.conn().closeTry(null);%>
    	conn_<%=cid%> .close();
		<%dbLog.conn().closeDone(null);%>
    	resourceMap.put("finish_<%=cid%>", true);
    	<%
	}
%>
<%@ include file="../templates/DB/Output/DBOutputEndGlobalVars.javajet"%>
