<%@ jet
imports="
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.process.IConnection
        org.talend.core.model.metadata.MappingTypeRetriever
        org.talend.core.model.metadata.MetadataTalendType
		org.talend.core.model.metadata.types.JavaTypesManager
		java.util.List
		java.util.ArrayList
		java.util.Map
		java.util.HashMap
"
skeleton="../templates/db_output_bulk.skeleton"
%>
    <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/DBLogUtil.javajet"%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
    dbLog = new DBLogUtil(node);
	String cid = node.getUniqueName();

    List<Map<String, String>> addCols =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,"__ADD_COLS__" );

    boolean useFieldOptions = ("true").equals(ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__"));

    List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");

    String dbname= ElementParameterParser.getValue(node, "__DBNAME__");

    String dbhost = ElementParameterParser.getValue(node, "__HOST__");

	String dbport = ElementParameterParser.getValue(node, "__PORT__");

	String dbschema = ElementParameterParser.getValue(node, "__SCHEMA_DB__");

	String dbuser= ElementParameterParser.getValue(node, "__USER__");
	
	String dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__"); 

	String table = ElementParameterParser.getValue(node,"__TABLE__");//work for sub script. TODO : move it
	String tableName = ElementParameterParser.getValue(node,"__TABLE__");
	boolean tableNameWithSchema = "true".equals(ElementParameterParser.getValue(node, "__TABLE_WITH_SCHEMA__"));

	String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");

	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");

	String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");

	String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");

	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");

    boolean useBatch = "true".equals(ElementParameterParser.getValue(node, "__USE_BATCH__"));
    String batchSize = ElementParameterParser.getValue(node, "__BATCH_SIZE__");

    String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }

    boolean extendedInsert = false;
    if ("INSERT".equalsIgnoreCase(dataAction)) {
        extendedInsert = ("true").equals(ElementParameterParser.getValue(node, "__EXTENDINSERT__"));
    }

    useBatch = (rejectConnName == null)
             && (
                  ("INSERT".equals(dataAction) && !extendedInsert) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)
                )
             && useBatch;

    String dbVersion = "" ;

	String numPerInsert = ElementParameterParser.getValue(node, "__NB_ROWS_PER_INSERT__");
%>

<%
Manager manager = getManager(dbmsId, cid, node);
boolean isDynamic = false;
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
	isDynamic = metadata.isDynamicSchema();
}
List<IMetadataColumn> columnList = getColumnList(node);
List<Column> stmtStructure = null;
if(columnList != null && columnList.size() > 0) {
    stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, useFieldOptions, fieldOptions, addCols);
    isDynamic = isDynamic && !getManager(dbmsId, cid).isDynamicColumnReplaced();
}
%>

String dbschema_<%=cid%> = null;
<%
if(("true").equals(useExistingConn)) {
	%>
	dbschema_<%=cid%> = (String)globalMap.get("schema_" + "<%=ElementParameterParser.getValue(node,"__CONNECTION__")%>");
	<%
} else {
	%>
	dbschema_<%=cid%> = <%=dbschema%>;
	<%
}
%>
String tableName_<%=cid%> = <%=tableName%>;
String schemaForSearch_<%=cid%> = null;
String tableForSearch_<%=cid%> = tableName_<%=cid%>;
<%
if(tableNameWithSchema){
%>
    if(tableName_<%=cid%>!=null && tableName_<%=cid%>.trim().length()>0){
    	tableName_<%=cid%> = tableName_<%=cid%>.replace("\".\"",".");
    	String[] names_<%=cid%> = tableName_<%=cid%>.split("\\.");
    	if(names_<%=cid%>.length > 0){
    		tableForSearch_<%=cid%> = names_<%=cid%>[names_<%=cid%>.length-1];
    	}
    	if(names_<%=cid%>.length > 1){
    		schemaForSearch_<%=cid%> = names_<%=cid%>[names_<%=cid%>.length-2];
    	}
    	tableName_<%=cid%> = tableName_<%=cid%>.replace(".","\".\"");
    }
<%
}else{
%>
    if(dbschema_<%=cid%> != null && dbschema_<%=cid%>.trim().length() > 0) {
    	tableName_<%=cid%> = dbschema_<%=cid%> + "\".\"" + tableName_<%=cid%>;
    }
<%
}
%>

<%
if(("UPDATE").equals(dataAction) || ("INSERT_OR_UPDATE").equals(dataAction) || ("UPDATE_OR_INSERT").equals(dataAction)) {
    int updateKeyCount = 0;
    if(stmtStructure != null) {
        for(Column column : stmtStructure) {
            if(column.isUpdateKey() && !column.isDynamic()) {
                updateKeyCount++;
            }
        }
        %>
        int updateKeyCount_<%=cid%> = <%=updateKeyCount%>;
        if(updateKeyCount_<%=cid%> < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
        <%
    }
} else if(("DELETE").equals(dataAction)) {
    int deleteKeyCount = 0;
    if(stmtStructure != null) {
        for(Column column : stmtStructure) {
            if(column.isDeleteKey() && !column.isDynamic()) {
                deleteKeyCount++;
            }
        }
        %>
        int deleteKeyCount_<%=cid%> = <%=deleteKeyCount%>;
        if(deleteKeyCount_<%=cid%> < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
        <%
    }
}
%>
int nb_line_<%=cid%> = 0;
int nb_line_update_<%=cid%> = 0;
int nb_line_inserted_<%=cid%> = 0;
int nb_line_deleted_<%=cid%> = 0;
int nb_line_rejected_<%=cid%> = 0;

int deletedCount_<%=cid%>=0;
int updatedCount_<%=cid%>=0;
int insertedCount_<%=cid%>=0;
int rejectedCount_<%=cid%>=0;

java.util.Calendar calendar_<%=cid %> = java.util.Calendar.getInstance();
calendar_<%=cid %>.set(1, 0, 1, 0, 0, 0);
long year1_<%=cid %> = calendar_<%=cid %>.getTime().getTime();
calendar_<%=cid %>.set(10000, 0, 1, 0, 0, 0);
long year10000_<%=cid %> = calendar_<%=cid %>.getTime().getTime();
long date_<%=cid %>;

boolean whetherReject_<%=cid%> = false;

<%
if (useBatch) {
%>
   int batchSize_<%=cid%> = <%=batchSize%>;
   int batchSizeCounter_<%=cid%>=0;
   int tmp_batchUpdateCount_<%=cid%> = 0;
<%
}
%>

java.sql.Connection conn_<%=cid%> = null;
<%
if(("true").equals(useExistingConn)) {
	String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	String conn = "conn_" + connection;
	%>
	conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
	<%dbLog.conn().useExistConn("conn_"+cid+".getMetaData().getURL()", "conn_"+cid+".getMetaData().getUserName()");%>
	<%
} else {
	%>

    java.lang.Class.forName("com.amazon.redshift.jdbc41.Driver");
    <%dbLog.conn().logJDBCDriver(dbLog.str("com.amazon.redshift.jdbc41.Driver"));%>
    
    <%
    if(dbproperties == null || ("\"\"").equals(dbproperties) || ("").equals(dbproperties)) {
	%>
		String url_<%=cid %> = "jdbc:redshift://"+<%=dbhost%>+":"+<%=dbport%>+"/"+<%=dbname%>;
	<%
	} else {
	%>
		String url_<%=cid%> = "jdbc:redshift://" + <%=dbhost%> + ":" + <%=dbport%> + "/" + <%=dbname%> + "?" + <%=dbproperties%>;
	<%
	}
    %>
    
    String dbUser_<%=cid %> = <%=dbuser%>;
    <%
    String passwordFieldName = "__PASS__";
    %>

    <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

    String dbPwd_<%=cid %> = decryptedPassword_<%=cid%>;
    <%dbLog.conn().connTry(dbLog.var("url"), dbLog.var("dbUser"));%>
    conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>,dbUser_<%=cid%>,dbPwd_<%=cid%>);
	<%dbLog.conn().connDone(dbLog.var("url"));%>
	resourceMap.put("conn_<%=cid%>", conn_<%=cid%>);
    conn_<%=cid%>.setAutoCommit(false);
	<%
}
dbLog.commit().logAutoCommit("conn_"+cid+".getAutoCommit()");

if(!("true").equals(useExistingConn)) {
	if(!("").equals(commitEvery) && !("0").equals(commitEvery)) {
	    %>
        int commitEvery_<%=cid%> = <%=commitEvery%>;
        int commitCounter_<%=cid%> = 0;
        <%
	}
}

if(!isDynamic) {
%>
int count_<%=cid%>=0;
<%
if(columnList != null && columnList.size()>0) {
	if("CLEAR".equals(tableAction)) {//truncate in fact
		tableAction = "TRUNCATE";
	}
%>
	<%@ include file="../templates/_tableActionForOutput.javajet"%>
<%
    Map<String, StringBuilder> actionSQLMap = getManager(dbmsId, cid).createProcessSQL(stmtStructure);
    StringBuilder insertColName = actionSQLMap.get(INSERT_COLUMN_NAME);
    StringBuilder insertValueStmt = actionSQLMap.get(INSERT_VALUE_STMT);
    StringBuilder updateSetStmt = actionSQLMap.get(UPDATE_SET_STMT);
    StringBuilder updateWhereStmt = actionSQLMap.get(UPDATE_WHERE_STMT);
    StringBuilder deleteWhereStmt = actionSQLMap.get(DELETE_WHERE_STMT);

	if(("INSERT").equals(dataAction)) {
		if(!extendedInsert) {
%>
			java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("INSERT INTO \"" + tableName_<%=cid%> + "\" (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)");
<%
		} else { //entended insert
%>
			int rowCount<%=cid%> = 0;
			class BufferLine_<%=cid%> {
<%
    	        for(Column column : stmtStructure) {
    	            if(!column.isReplaced() && !column.isAddCol() && column.isInsertable()) {
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
%>
                            <%=typeToGenerate%> <%=column.getName()%>;
<%
                    }
                }
%>

	            public BufferLine_<%=cid%>(
<%
                    int count = 0;
                    for(Column column : stmtStructure) {
                        if(!column.isReplaced() && !column.isAddCol() && column.isInsertable()) {
                            if(count != 0) {
%>
                                ,
<%
							}
                            String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
%>
                            <%=typeToGenerate%> <%=column.getName()%>
<%
                            count++;
                        }
                    }
%>
				){
<%
					for(Column column : stmtStructure) {
						if(!column.isReplaced() && !column.isAddCol() && column.isInsertable()) {
%>
							this.<%=column.getName()%> = <%=column.getName()%>;
<%
						}
					}
%>
				}
			}

			java.util.List<BufferLine_<%=cid%>> exInsertColValueList<%=cid%> = new java.util.ArrayList();
			BufferLine_<%=cid%> exInsertColValue<%=cid%> = null;


			StringBuilder extendInsertValueStmt_<%=cid%> = new StringBuilder();
			for(int i_<%=cid%>=0;i_<%=cid%> < <%=numPerInsert%>;i_<%=cid%>++){
				 extendInsertValueStmt_<%=cid%>.append("(<%=insertValueStmt.toString()%>)");
				 if (i_<%=cid%>!=<%=numPerInsert%>-1) extendInsertValueStmt_<%=cid%>.append(",");
			}

			String insert_<%=cid%> = "INSERT INTO \"" + tableName_<%=cid%> + "\" (<%=insertColName.toString()%>) VALUES " + extendInsertValueStmt_<%=cid%>.toString();
			java.sql.PreparedStatement pstmt_<%=cid %> =  conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
<%
		}
	} else if (("UPDATE").equals(dataAction)) {
	    %>
	    java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("UPDATE \"" + tableName_<%=cid%> + "\" SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>");
	    <%
	} else if (("INSERT_OR_UPDATE").equals(dataAction)) {
	    %>
	    java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_<%=cid%> + "\" WHERE <%=updateWhereStmt.toString()%>");
	    java.sql.PreparedStatement pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement("INSERT INTO \"" + tableName_<%=cid%> + "\" (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)");
	    java.sql.PreparedStatement pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement("UPDATE \"" + tableName_<%=cid%> + "\" SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>");
	    <%
	} else if (("UPDATE_OR_INSERT").equals(dataAction)) {
	    %>
	    java.sql.PreparedStatement pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement("UPDATE \"" + tableName_<%=cid%> + "\" SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>");
	    java.sql.PreparedStatement pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement("INSERT INTO \"" + tableName_<%=cid%> + "\" (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)");
	    <%
	} else if (("DELETE").equals(dataAction)) {
	    %>
	    java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("DELETE FROM \"" + tableName_<%=cid%> + "\" WHERE <%=deleteWhereStmt.toString()%>");
	    <%
	}
}
}//end !isDynamic

if(isDynamic) {
	if(extendedInsert) {
%>
	class BufferLine_<%=cid%> {
    <%
    for(Column column : stmtStructure) {
        if(!column.isReplaced() && !column.isAddCol() && column.isInsertable() && !column.isDynamic()) {
            String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
            %>
            <%=typeToGenerate%> <%=column.getName()%>;
            <%
        }
    }

    if(isDynamic) {
    	Column dynamicColumn = getColumn(getDynamicColumn());
		String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
		if("Dynamic".equals(typeToGenerate)) {
		%>
			routines.system.Dynamic <%=dynamicColumn.getName()%>;
		<%
		}
    }
	%>

	    public BufferLine_<%=cid%>(
	    <%
	    int count = 0;
	    for(Column column : stmtStructure) {
	        if(!column.isReplaced() && !column.isAddCol() && column.isInsertable() && !column.isDynamic()) {
	            if(count != 0) {
	                %>
	                ,
	                <%
	            }
	            String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
	            %>
	            <%=typeToGenerate%> <%=column.getName()%>
	            <%
	            count++;
	        }
	    }

		if(isDynamic) {
	    	Column dynamicColumn = getColumn(getDynamicColumn());
			String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
			if("Dynamic".equals(typeToGenerate)) {
			%>
				<%if(count>0){%>,<%}%> routines.system.Dynamic <%=dynamicColumn.getName()%>
			<%
			}
		}
	    %>
	    ){
	        <%
	        for(Column column : stmtStructure) {
	            if(!column.isReplaced() && !column.isAddCol() && column.isInsertable() && !column.isDynamic()) {
	                %>
	                this.<%=column.getName()%> = <%=column.getName()%>;
	                <%
	            }
	        }

			if(isDynamic) {
		    	Column dynamicColumn = getColumn(getDynamicColumn());
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
				if("Dynamic".equals(typeToGenerate)) {
				%>
					this.<%=dynamicColumn.getName()%>=<%=dynamicColumn.getName()%>;
				<%
				}
    		}
            %>
        }
    }

    java.util.List<BufferLine_<%=cid%>> exInsertColValueList<%=cid%> = new java.util.ArrayList();
    BufferLine_<%=cid%> exInsertColValue<%=cid%> = null;
    String insert_<%=cid%> = "";
    int rowCount<%=cid%> = 0;
<%
	}
%>
	java.sql.PreparedStatement pstmt_<%=cid %> =null;
	java.sql.PreparedStatement pstmtInsert_<%=cid %> =null;
	java.sql.PreparedStatement pstmtUpdate_<%=cid %> =null;
<%
}
%>
