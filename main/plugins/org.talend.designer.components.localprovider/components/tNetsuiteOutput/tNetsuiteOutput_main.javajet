<%@ jet 
	imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.Map
    	java.util.HashMap
		java.util.List
		java.util.ArrayList
	"
%>

<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    
    boolean dieonerror = "true".equals(ElementParameterParser.getValue(node,"__CEASE_FOR_ERROR__"));
    String action = ElementParameterParser.getValue(node, "__ACTION__");
    String modulenameKey = ElementParameterParser.getValue(node, "__MODULENAME__");
    
    Map<String, String> typeMap = new HashMap<String, String>();
	typeMap.put("Account", "com.netsuite.webservices.lists.accounting.Account");
	typeMap.put("AccountingPeriod", "com.netsuite.webservices.lists.accounting.AccountingPeriod");
	typeMap.put("AppDefinition", "com.netsuite.webservices.setup.customization.AppDefinition");
	typeMap.put("AppPackage", "com.netsuite.webservices.setup.customization.AppPackage");
	typeMap.put("BillingSchedule", "com.netsuite.webservices.lists.accounting.BillingSchedule");
	typeMap.put("Bin", "com.netsuite.webservices.lists.accounting.Bin");
	typeMap.put("Budget", "com.netsuite.webservices.transactions.financial.Budget");
	typeMap.put("CalendarEvent", "com.netsuite.webservices.activities.scheduling.CalendarEvent");
	typeMap.put("Campaign", "com.netsuite.webservices.lists.marketing.Campaign");
	typeMap.put("Charge", "com.netsuite.webservices.transactions.customers.Charge");
	typeMap.put("Classification", "com.netsuite.webservices.lists.accounting.Classification");
	typeMap.put("Contact", "com.netsuite.webservices.lists.relationships.Contact");
	typeMap.put("ContactCategory", "com.netsuite.webservices.lists.accounting.ContactCategory");
	typeMap.put("ContactRole", "com.netsuite.webservices.lists.accounting.ContactRole");
	typeMap.put("CouponCode", "com.netsuite.webservices.lists.marketing.CouponCode");
	typeMap.put("CurrencyRate", "com.netsuite.webservices.lists.accounting.CurrencyRate");
	typeMap.put("Customer", "com.netsuite.webservices.lists.relationships.Customer");
	typeMap.put("CustomerCategory", "com.netsuite.webservices.lists.accounting.CustomerCategory");
	typeMap.put("CustomerMessage", "com.netsuite.webservices.lists.accounting.CustomerMessage");
	typeMap.put("CustomerStatus", "com.netsuite.webservices.lists.relationships.CustomerStatus");
	typeMap.put("CustomList", "com.netsuite.webservices.setup.customization.CustomList");
	typeMap.put("CustomRecord", "com.netsuite.webservices.setup.customization.CustomRecord");
	typeMap.put("Department", "com.netsuite.webservices.lists.accounting.Department");
	typeMap.put("Employee", "com.netsuite.webservices.lists.employees.Employee");
	typeMap.put("EntityGroup", "com.netsuite.webservices.lists.relationships.EntityGroup");
	typeMap.put("ExpenseCategory", "com.netsuite.webservices.lists.accounting.ExpenseCategory");
	typeMap.put("File", "com.netsuite.webservices.documents.filecabinet.File");
	typeMap.put("Folder", "com.netsuite.webservices.documents.filecabinet.Folder");
	typeMap.put("GiftCertificate", "com.netsuite.webservices.lists.accounting.GiftCertificate");
	typeMap.put("GlobalAccountMapping", "com.netsuite.webservices.lists.accounting.GlobalAccountMapping");
	typeMap.put("InventoryNumber", "com.netsuite.webservices.lists.accounting.InventoryNumber");
	typeMap.put("Issue", "com.netsuite.webservices.lists.support.Issue");
	typeMap.put("ItemAccountMapping", "com.netsuite.webservices.lists.accounting.ItemAccountMapping");
	typeMap.put("ItemDemandPlan", "com.netsuite.webservices.transactions.demandplanning.ItemDemandPlan");
	typeMap.put("ItemRevision", "com.netsuite.webservices.lists.accounting.ItemRevision");
	typeMap.put("ItemSupplyPlan", "com.netsuite.webservices.transactions.demandplanning.ItemSupplyPlan");
	typeMap.put("Job", "com.netsuite.webservices.lists.relationships.Job");
	typeMap.put("JobStatus", "com.netsuite.webservices.lists.relationships.JobStatus");
	typeMap.put("JobType", "com.netsuite.webservices.lists.relationships.JobType");
	typeMap.put("Location", "com.netsuite.webservices.lists.accounting.Location");
	typeMap.put("ManufacturingCostTemplate", "com.netsuite.webservices.lists.supplychain.ManufacturingCostTemplate");
	typeMap.put("ManufacturingOperationTask", "com.netsuite.webservices.lists.supplychain.ManufacturingOperationTask");
	typeMap.put("ManufacturingRouting", "com.netsuite.webservices.lists.supplychain.ManufacturingRouting");
	typeMap.put("Message", "com.netsuite.webservices.general.communication.Message");
	typeMap.put("Nexus", "com.netsuite.webservices.lists.accounting.Nexus");
	typeMap.put("Note", "com.netsuite.webservices.general.communication.Note");
	typeMap.put("NoteType", "com.netsuite.webservices.lists.accounting.NoteType");
	typeMap.put("OtherNameCategory", "com.netsuite.webservices.lists.accounting.OtherNameCategory");
	typeMap.put("Partner", "com.netsuite.webservices.lists.relationships.Partner");
	typeMap.put("PartnerCategory", "com.netsuite.webservices.lists.accounting.PartnerCategory");
	typeMap.put("PaymentMethod", "com.netsuite.webservices.lists.accounting.PaymentMethod");
	typeMap.put("PayrollItem", "com.netsuite.webservices.lists.employees.PayrollItem");
	typeMap.put("PhoneCall", "com.netsuite.webservices.activities.scheduling.PhoneCall");
	typeMap.put("PriceLevel", "com.netsuite.webservices.lists.accounting.PriceLevel");
	typeMap.put("PricingGroup", "com.netsuite.webservices.lists.accounting.PricingGroup");
	typeMap.put("ProjectTask", "com.netsuite.webservices.activities.scheduling.ProjectTask");
	typeMap.put("PromotionCode", "com.netsuite.webservices.lists.marketing.PromotionCode");
	typeMap.put("ResourceAllocation", "com.netsuite.webservices.activities.scheduling.ResourceAllocation");
	typeMap.put("RevRecSchedule", "com.netsuite.webservices.lists.accounting.RevRecSchedule");
	typeMap.put("RevRecTemplate", "com.netsuite.webservices.lists.accounting.RevRecTemplate");
	typeMap.put("SalesRole", "com.netsuite.webservices.lists.accounting.SalesRole");
	typeMap.put("SiteCategory", "com.netsuite.webservices.lists.website.SiteCategory");
	typeMap.put("Solution", "com.netsuite.webservices.lists.support.Solution");
	typeMap.put("Subsidiary", "com.netsuite.webservices.lists.accounting.Subsidiary");
	typeMap.put("SupportCase", "com.netsuite.webservices.lists.support.SupportCase");
	typeMap.put("Task", "com.netsuite.webservices.activities.scheduling.Task");
	typeMap.put("Term", "com.netsuite.webservices.lists.accounting.Term");
	typeMap.put("TimeBill", "com.netsuite.webservices.transactions.employees.TimeBill");
	typeMap.put("TimeEntry", "com.netsuite.webservices.transactions.employees.TimeEntry");
	typeMap.put("TimeSheet", "com.netsuite.webservices.transactions.employees.TimeSheet");
	typeMap.put("Topic", "com.netsuite.webservices.lists.support.Topic");
	typeMap.put("UnitsType", "com.netsuite.webservices.lists.accounting.UnitsType");
	typeMap.put("Vendor", "com.netsuite.webservices.lists.relationships.Vendor");
	typeMap.put("VendorCategory", "com.netsuite.webservices.lists.accounting.VendorCategory");
	typeMap.put("WinLossReason", "com.netsuite.webservices.lists.accounting.WinLossReason");
	typeMap.put("AssemblyBuild", "com.netsuite.webservices.transactions.inventory.AssemblyBuild");
	typeMap.put("AssemblyUnbuild", "com.netsuite.webservices.transactions.inventory.AssemblyUnbuild");
	typeMap.put("BinTransfer", "com.netsuite.webservices.transactions.inventory.BinTransfer");
	typeMap.put("BinWorksheet", "com.netsuite.webservices.transactions.inventory.BinWorksheet");
	typeMap.put("CashRefund", "com.netsuite.webservices.transactions.customers.CashRefund");
	typeMap.put("CashSale", "com.netsuite.webservices.transactions.sales.CashSale");
	typeMap.put("Check", "com.netsuite.webservices.transactions.bank.Check");
	typeMap.put("CreditMemo", "com.netsuite.webservices.transactions.customers.CreditMemo");
	typeMap.put("CustomerDeposit", "com.netsuite.webservices.transactions.customers.CustomerDeposit");
	typeMap.put("CustomerPayment", "com.netsuite.webservices.transactions.customers.CustomerPayment");
	typeMap.put("CustomerRefund", "com.netsuite.webservices.transactions.customers.CustomerRefund");
	typeMap.put("Deposit", "com.netsuite.webservices.transactions.bank.Deposit");
	typeMap.put("DepositApplication", "com.netsuite.webservices.transactions.customers.DepositApplication");
	typeMap.put("Estimate", "com.netsuite.webservices.transactions.sales.Estimate");
	typeMap.put("ExpenseReport", "com.netsuite.webservices.transactions.employees.ExpenseReport");
	typeMap.put("InterCompanyJournalEntry", "com.netsuite.webservices.transactions.general.InterCompanyJournalEntry");
	typeMap.put("InventoryAdjustment", "com.netsuite.webservices.transactions.inventory.InventoryAdjustment");
	typeMap.put("InventoryCostRevaluation", "com.netsuite.webservices.transactions.inventory.InventoryCostRevaluation");
	typeMap.put("InventoryTransfer", "com.netsuite.webservices.transactions.inventory.InventoryTransfer");
	typeMap.put("Invoice", "com.netsuite.webservices.transactions.sales.Invoice");
	typeMap.put("ItemFulfillment", "com.netsuite.webservices.transactions.sales.ItemFulfillment");
	typeMap.put("ItemReceipt", "com.netsuite.webservices.transactions.purchases.ItemReceipt");
	typeMap.put("JournalEntry", "com.netsuite.webservices.transactions.general.JournalEntry");
	typeMap.put("Opportunity", "com.netsuite.webservices.transactions.sales.Opportunity");
	typeMap.put("PaycheckJournal", "com.netsuite.webservices.transactions.employees.PaycheckJournal");
	typeMap.put("PurchaseOrder", "com.netsuite.webservices.transactions.purchases.PurchaseOrder");
	typeMap.put("ReturnAuthorization", "com.netsuite.webservices.transactions.customers.ReturnAuthorization");
	typeMap.put("SalesOrder", "com.netsuite.webservices.transactions.sales.SalesOrder");
	typeMap.put("State", "com.netsuite.webservices.lists.accounting.State");
	typeMap.put("TransferOrder", "com.netsuite.webservices.transactions.inventory.TransferOrder");
	typeMap.put("VendorBill", "com.netsuite.webservices.transactions.purchases.VendorBill");
	typeMap.put("VendorCredit", "com.netsuite.webservices.transactions.purchases.VendorCredit");
	typeMap.put("VendorPayment", "com.netsuite.webservices.transactions.purchases.VendorPayment");
	typeMap.put("VendorReturnAuthorization", "com.netsuite.webservices.transactions.purchases.VendorReturnAuthorization");
	typeMap.put("WorkOrder", "com.netsuite.webservices.transactions.inventory.WorkOrder");
	typeMap.put("WorkOrderClose", "com.netsuite.webservices.transactions.inventory.WorkOrderClose");
	typeMap.put("WorkOrderCompletion", "com.netsuite.webservices.transactions.inventory.WorkOrderCompletion");
	typeMap.put("WorkOrderIssue", "com.netsuite.webservices.transactions.inventory.WorkOrderIssue");
    
    String modulename = typeMap.get(modulenameKey);
%>


<%
	IConnection conn = null;
    List<IMetadataTable> metadatas = node.getMetadataList();
    if ((metadatas!=null)&&(metadatas.size()>0)) {//1
        IMetadataTable metadata = metadatas.get(0);
        if (metadata!=null) {//2
            String cid = node.getUniqueName();
        	List< ? extends IConnection> conns = node.getIncomingConnections();
        	conn = conns.get(0);
    		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {//4
%>
                
                <%=modulename%> record_<%=cid%> = new <%=modulename%>();
                
<%
                if ("insert".equals(action) || "update".equals(action) || "upsert".equals(action)) { //************
                	List<IMetadataColumn> columns = metadata.getListColumns();
                    int sizeColumns = columns.size();
                    for (int i = 0; i < sizeColumns; i++) { //5  			
                    	IMetadataColumn column = columns.get(i);
                  		
                		JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
                		if(!javaType.isPrimitive() || column.isNullable()){
%>

        	    			if (<%=conn.getName() %>.<%=column.getLabel() %> == null) {
            					com.netsuite.webservices.platform.core.NullField fl_<%=cid %> = record_<%=cid%>.getNullFieldList();
            					
            					if (fl_<%=cid %>==null) {
            						record_<%=cid%>.setNullFieldList(new com.netsuite.webservices.platform.core.NullField());
            					}
            					
            					String label_<%=cid %> = "<%=column.getLabel()%>";
            					String field_<%=cid %> = label_<%=cid %>.substring(0, 1).toLowerCase() + label_<%=cid %>.substring(1);
            					nsMgr_<%=cid%>.setNullFieldValue(record_<%=cid%>.getNullFieldList(), field_<%=cid %>);
        	    			} else {

<%
            					String pattern = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
            					
            					if (javaType == JavaTypesManager.DATE && pattern != null && pattern.trim().length() != 0) {//Date
%>

                					java.util.GregorianCalendar cal_<%=cid%>_<%=i%> = new java.util.GregorianCalendar();
    							    cal_<%=cid%>_<%=i%>.setTime(<%=conn.getName() %>.<%=column.getLabel()%>);
    							    javax.xml.datatype.XMLGregorianCalendar gc_<%=cid%>_<%=i%> = javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar(cal_<%=cid%>_<%=i%>);
                						
                					record_<%=cid%>.set<%=column.getLabel()%>(gc_<%=cid%>_<%=i%>);

<%
								} else if (javaType == JavaTypesManager.BYTE_ARRAY) {//byte[]
%>

									record_<%=cid%>.set<%=column.getLabel()%>(java.nio.charset.Charset.defaultCharset().decode(java.nio.ByteBuffer.wrap(<%=conn.getName() %>.<%=column.getLabel() %>)).toString());

<%
								} else if (javaType == JavaTypesManager.OBJECT) {
%>

									nsMgr_<%=cid%>.invokeSetter(record_<%=cid%>,"<%=column.getLabel()%>",<%=conn.getName() %>.<%=column.getLabel()%>);

<%
								} else { //others
%>

									record_<%=cid%>.set<%=column.getLabel()%>(<%=conn.getName() %>.<%=column.getLabel() %>);

<%
								}
%>
        	    			}//if !=null
<%
							} else {
%>
								record_<%=cid%>.set<%=column.getLabel()%>(<%=conn.getName() %>.<%=column.getLabel() %>);
<%
							}
%>
			
				
<%
                    	}//5
					}//upsert, insert, update  ************
%> 

        	try {
 				
<%
                if ("insert".equals(action)) {
%>

            		String internalId_<%=cid%> = nsMgr_<%=cid%>.insert(record_<%=cid%>);
                    globalMap.put("<%=cid%>_CURRENT_INTERNALID", Integer.parseInt(internalId_<%=cid%>));

<%
				// InternalId no need
				} else if ("update".equals(action)) {
%>

					nsMgr_<%=cid%>.update(record_<%=cid%>);
					globalMap.put("<%=cid%>_CURRENT_INTERNALID", Integer.parseInt(<%=conn.getName() %>.InternalId));	

<%
				} else if ("upsert".equals(action)) {
%> 

                    String internalId_<%=cid%> = nsMgr_<%=cid%>.upsert(record_<%=cid%>);
                    globalMap.put("<%=cid%>_CURRENT_INTERNALID", Integer.parseInt(internalId_<%=cid%>));
		
<%
				// InternalId no need
				} else if ("delete".equals(action)) {
%>

					nsMgr_<%=cid%>.delete("<%=modulename %>", <%=conn.getName() %>.InternalId);
					globalMap.put("<%=cid%>_CURRENT_INTERNALID", Integer.parseInt(<%=conn.getName() %>.InternalId));	

<%
				}
				
				IConnection conn2 = null;
			    List<IMetadataTable> metadatas2 = node.getMetadataList();
			    if ((metadatas2 != null) && (metadatas2.size() > 0)) {//1
			        IMetadataTable metadata2 = metadatas2.get(0);
			        if (metadata != null) {//2
			        	List< ? extends IConnection> conns2 = node.getOutgoingConnections("FLOW");
			        	if(conns2.size() > 0){
			        		conn2 = conns2.get(0);
				    		if (conn2.getLineStyle().hasConnectionCategory(IConnectionCategory.FLOW)) {//4
								List<IMetadataColumn> columns2 = metadata2.getListColumns();
					            int sizeColumns2 = columns2.size();
					            for (int i = 0; i < sizeColumns2; i++) { //5  			
					            	IMetadataColumn column2 = columns2.get(i);
%>
									<%=conn2.getName()%>.<%=column2.getLabel()%> = <%=conn.getName()%>.<%=column2.getLabel()%>;
<%		            	
					            }
					        }
			        	}
				    }
				}
				
				String rejectConnName = null;
                List< ? extends IConnection> outConns = node.getOutgoingConnections("REJECT");
                if(outConns.size() > 0){
                	rejectConnName = outConns.get(0).getName();
                }
				
				if(rejectConnName != null) {
%>  
	
					<%=rejectConnName%> = null;   // reject line

				<%}%>				
				nb_line_<%=cid %>++;

        	} catch (Exception e_<%=cid %>) {

<%
				if(dieonerror){
%>

					throw e_<%=cid %>;

<%
				} else {
					if(conn2 != null) {
%>
						<%=conn2.getName()%> = null;   // main line
						
					<%}%>
					
					<%if(rejectConnName != null) {%>
                    	<%=rejectConnName %> = new <%=rejectConnName %>Struct();
<%
	                    List<IMetadataColumn> rejectColumnList = null;
	                    IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
	                    if(metadataTable != null) {
	                    	rejectColumnList = metadataTable.getListColumns();
	                        for(IMetadataColumn column2 : rejectColumnList) {
	                        	if(conn != null && !"errorCode".equals(column2.getLabel()) && !"errorMessage".equals(column2.getLabel())){
%>
                            		<%=rejectConnName%>.<%=column2.getLabel()%> = <%=conn.getName()%>.<%=column2.getLabel()%>;
                                        
<%
	                            }
	                        }
%>
						
							if(e_<%=cid %> instanceof org.talend.netsuite.NetsuiteException){
								org.talend.netsuite.NetsuiteException ne_<%=cid %> = (org.talend.netsuite.NetsuiteException)e_<%=cid %>;
								<%=rejectConnName%>.errorCode = ne_<%=cid %>.getCode();
		                    	<%=rejectConnName%>.errorMessage = ne_<%=cid %>.getMessage();
							} else {
								<%=rejectConnName%>.errorCode = "";
		                    	<%=rejectConnName%>.errorMessage = "";
							}

<%
                 	 }
                  }
%>

<%
                    if(rejectConnName == null){
%>

                        System.err.print(e_<%=cid %>.getMessage());

<%
                    }
                }
%>
			}

<%
    		}//4
    	}//2
	}//1
%>