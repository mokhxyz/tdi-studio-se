<%@ jet 
    imports="
        org.talend.core.model.process.INode 
        org.talend.core.model.process.ElementParameterParser
        org.talend.designer.codegen.config.CodeGeneratorArgument
    "
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/DBLogUtil.javajet"%>
<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    String uri = ElementParameterParser.getValue(node, "__URI__");
    String driver = ElementParameterParser.getValue(node, "__DRIVER__");
    String collection = ElementParameterParser.getValue(node, "__COLLECTION__");
    String user = ElementParameterParser.getValue(node, "__USERNAME__");
    String localOutput = ElementParameterParser.getValue(node, "__LOCALOUTPUT__");
    String xqueryFile = ElementParameterParser.getValue(node, "__XQUERY__");
    String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
    String useExistingConn = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");
    dbLog = new DBLogUtil(node);

    if(("true").equals(useExistingConn)){
        String col= "col_" + connection;
        dbLog.info(dbLog.str("uses an existing connection."));
%>
        org.xmldb.api.base.Collection col_<%=cid%> = (org.xmldb.api.base.Collection)globalMap.get("<%=col%>");
<%
    }else{
%>
        Class cl_<%=cid%> = Class.forName(<%=driver%>);
        <%dbLog.conn().logJDBCDriver(driver);%>
        <% dbLog.info(dbLog.str("Try to create a database instance.")); %>
        org.xmldb.api.base.Database database_<%=cid%> = (org.xmldb.api.base.Database) cl_<%=cid%>.newInstance();
        <% dbLog.info(dbLog.str("Create the instance successed.")); %>

        database_<%=cid%>.setProperty("create-database", "true");
        org.xmldb.api.DatabaseManager.registerDatabase(database_<%=cid%>);

        <%
        String passwordFieldName = "__PASSWORD__";
        %>
        
        <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
        <% dbLog.info(dbLog.str("Try to retrieve a Collection instance from the database for the given URI: "),uri,dbLog.str(".")); %>
        org.xmldb.api.base.Collection col_<%=cid%> = org.xmldb.api.DatabaseManager.getCollection(<%=uri%> + <%=collection%>,<%=user%>,decryptedPassword_<%=cid%>);
        <% dbLog.info(dbLog.str("Retrieves a Collection instance from the database successed.")); %>
<%
    }
%>
    java.io.BufferedReader f_<%=cid%> = new java.io.BufferedReader(new java.io.FileReader(<%=xqueryFile%>));
    String line_<%=cid%>;
    StringBuffer xml_<%=cid%> = new StringBuffer();
    while ((line_<%=cid%> = f_<%=cid%>.readLine()) != null)
        xml_<%=cid%>.append(line_<%=cid%>);
    f_<%=cid%>.close();
    String query_<%=cid%> = xml_<%=cid%>.toString();
    <% dbLog.debug(dbLog.str("The raw query string is '"),dbLog.var("query"),dbLog.str("'.")); %>
    org.exist.xmldb.XQueryService service_<%=cid%> = (org.exist.xmldb.XQueryService) col_<%=cid%>.getService("XQueryService", "1.0");
    service_<%=cid%>.setProperty(javax.xml.transform.OutputKeys.INDENT, "yes");
    service_<%=cid%>.setProperty(javax.xml.transform.OutputKeys.ENCODING, "UTF-8");
    org.xmldb.api.base.CompiledExpression compiled_<%=cid%> = service_<%=cid%>.compile(query_<%=cid%>);

    <% dbLog.info(dbLog.str("Try to execute query.")); %>
    org.xmldb.api.base.ResourceSet result_<%=cid%> = service_<%=cid%>.execute(compiled_<%=cid%>);
    <% dbLog.info(dbLog.str("Execute query successed.")); %>

    java.util.Properties outputProperties_<%=cid%> = new java.util.Properties();
    outputProperties_<%=cid%>.setProperty(javax.xml.transform.OutputKeys.INDENT, "yes");
    org.exist.util.serializer.SAXSerializer serializer_<%=cid%> = (org.exist.util.serializer.SAXSerializer) org.exist.util.serializer.SerializerPool.getInstance().borrowObject(org.exist.util.serializer.SAXSerializer.class);
    org.exist.util.serializer.SAXSerializer consoleSerializer_<%=cid%> = (org.exist.util.serializer.SAXSerializer) org.exist.util.serializer.SerializerPool.getInstance().borrowObject(org.exist.util.serializer.SAXSerializer.class);
    java.io.OutputStreamWriter writer_<%=cid%> = new java.io.OutputStreamWriter(new java.io.FileOutputStream(new java.io.File(<%=localOutput%>)));
    java.io.OutputStreamWriter consoleWriter_<%=cid%> = new java.io.OutputStreamWriter(System.out);
    serializer_<%=cid%>.setOutput(writer_<%=cid%>, outputProperties_<%=cid%>);
    consoleSerializer_<%=cid%>.setOutput(consoleWriter_<%=cid%>, outputProperties_<%=cid%>);
    for (int i_<%=cid%> = 0; i_<%=cid%> < (int) result_<%=cid%>.getSize(); i_<%=cid%>++) {
        org.xmldb.api.modules.XMLResource resource_<%=cid%> = (org.xmldb.api.modules.XMLResource) result_<%=cid%>.getResource((long) i_<%=cid%>);
        resource_<%=cid%>.getContentAsSAX(serializer_<%=cid%>);
        resource_<%=cid%>.getContentAsSAX(consoleSerializer_<%=cid%>);
    }
    org.exist.util.serializer.SerializerPool.getInstance().returnObject(serializer_<%=cid%>);
    org.exist.util.serializer.SerializerPool.getInstance().returnObject(consoleSerializer_<%=cid%>);
    writer_<%=cid%>.flush();
    consoleWriter_<%=cid%>.flush();
