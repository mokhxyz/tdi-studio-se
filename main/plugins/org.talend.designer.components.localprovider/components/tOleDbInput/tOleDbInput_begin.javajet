<%@ jet 
  imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    java.util.List
    java.util.Map
  " 
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/LogUtil.javajet"%>
<%
   CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    LogUtil logtpl = new LogUtil(node);
    String connUrl = ElementParameterParser.getValue(node,"__DBNAME__");
    String query = ElementParameterParser.getValue(node,"__QUERY__");
    query = query.replaceAll("\n","");
    query = query.replaceAll("\r","");
    String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
    String assemblyName = ElementParameterParser.getValue(node,"__ASSEMBLY_NAME__");
    String className = ElementParameterParser.getValue(node,"__CLASS_NAME__");
     boolean whetherTrimAllCol = ("true").equals(ElementParameterParser.getValue(node, "__TRIM_ALL_COLUMN__"));
    List<Map<String, String>> trimColumnList = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__TRIM_COLUMN__");
    List<IMetadataTable> metadatas = node.getMetadataList();
%>
<% logtpl.info("\"Try to create an OleDb instance with assembly name: \"",assemblyName,"\", driver class name: \"",className,"\", connection string: \"",connUrl,"\".\""); %>
org.talend.net.Object conn_<%=cid%> = org.talend.net.Object.createInstance(<%=assemblyName%>,<%=className%>, 
new java.lang.Object[] { 
<%=connUrl%> 
});

<% 
logtpl.info("\"Created an OleDb instance successfully.\"");
logtpl.info("\"Try to open an OleDb connection.\""); 
%>
conn_<%=cid%>.invokeGeneric("Open");
<% logtpl.info("\"Open an OleDb connection successfully.\""); %>

org.talend.net.Object cmd_<%=cid%> = org.talend.net.Object.createInstance(<%=assemblyName%>,"System.Data.OleDb.OleDbCommand",
new java.lang.Object[] { 
<%=query%>
, 
conn_<%=cid%> 
});

org.talend.net.Object reader_<%=cid%> = cmd_<%=cid%>.invoke("ExecuteReader");
<%
IMetadataTable metadata = metadatas.get(0);
    List<? extends IConnection> connsout = node.getOutgoingConnections();
    
    List<IMetadataColumn> columnsout = metadata.getListColumns();
    String populateOutput = "";
    String outName = null;
     if (connsout != null) {
        for (int i = 0; i < connsout.size(); i++) {
            IConnection connout = connsout.get(i);
            if (connout.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
               outName = connout.getName();               
               for (int j = 0; j < columnsout.size(); j++) {
                    IMetadataColumn columnout = columnsout.get(j);
               %>
               //<%=columnout.getTalendType()%>
               Integer id<%=columnout.getLabel()%>_<%=cid%> = (Integer)reader_<%=cid%>.invokeGeneric("GetOrdinal",
               new java.lang.Object[] { "<%=columnout.getLabel()%>" });
                
               <%
               populateOutput += "val_"+cid+" = reader_"+cid+".invokeGeneric(\"GetValue\","
                  + "new java.lang.Object[] { id"+columnout.getLabel()+"_"+cid+" });\nnew TypeConverter_"+cid+"().doConversion(val_"+cid+","+connout.getName()+",\""+columnout.getLabel()+"\");\n";
                  
        if (columnout.getTalendType().equals("id_String")) {
            boolean whetherTrimCol = false;
                if((trimColumnList != null && trimColumnList.size() > 0) && !whetherTrimAllCol) {
                    for(Map<String, String> trimColumn : trimColumnList) {
                        if(columnout.getLabel().equals(trimColumn.get("SCHEMA_COLUMN"))) {
                            if(("true").equals(trimColumn.get("TRIM"))) {
                                whetherTrimCol = true;
                                break;
                            }
                        }
                    }
                }
                
                if(whetherTrimAllCol || whetherTrimCol) {
                    populateOutput += connout.getName()+"."+columnout.getLabel()+" = "+connout.getName()+"."+columnout.getLabel()+".trim();\n";
                }
                
        }                   
               }
             }
         }
     }     
%>
class TypeConverter_<%=cid%> {
    void doConversion(Object val, Object targetStruct, String colName) {
            try {
            java.lang.reflect.Field f = targetStruct.getClass().getField(colName);
            f.setAccessible(true);
            f.set(targetStruct,val);
          } catch (java.lang.Exception ex) {
            throw new RuntimeException("Can not convert value of type: "+val.getClass().getName()+" to target column");
          }
    }
}
Boolean oBool_<%=cid%> = (Boolean)reader_<%=cid%>.invokeGeneric("Read");
boolean bool_<%=cid%> = oBool_<%=cid%> != null && oBool_<%=cid%>.booleanValue();
java.lang.Object val_<%=cid%>;
int nb_line_<%=cid%> = 0;
while (bool_<%=cid%>) {
    nb_line_<%=cid%>++;
    <% logtpl.debug("\"Try to retrieve record \"",logtpl.var("nb_line"),"\".\""); %>
     <%=populateOutput%>
