<%@ jet 
imports="
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.IConnection
	org.talend.core.model.process.IConnectionCategory
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.utils.NodeUtil
	java.util.List
	java.util.Map
" 
%>
	<%@ include file="../templates/DB/Input/HelpClass.javajet"%>
<%

	class DBInputBeginUtil extends DefaultDBInputUtil{
	    
		public void setURL(INode node) {
			
			String jdbcUrl = ElementParameterParser.getValue(node, "__URL__");
%>
			String url_<%=cid %> = <%=jdbcUrl%>;
<%
		}
		
		public void createStatement(INode node) {
			super.createStatement(node);
			String useCursor= ElementParameterParser.getValue(node, "__USE_CURSOR__");
			String cursorSize= ElementParameterParser.getValue(node, "__CURSOR_SIZE__");
		   String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
			String driverName = null;
		   if(("true").equals(useExistingConn)) {
		      String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
		      String conn = "conn_" + connection;
		      INode connectionNode = NodeUtil.getNodeByUniqueName(node.getProcess(),connection,false);
		      driverName = ElementParameterParser.getValue(connectionNode, "__DRIVER_CLASS__");
         } else {
				driverName = ElementParameterParser.getValue(node, "__DRIVER_CLASS__");
			}
			if(null != driverName && driverName.indexOf("mysql") != -1){
%>
				stmt_<%=cid %> = conn_<%=cid%>.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
				((com.mysql.jdbc.Statement)stmt_<%=cid %>).enableStreamingResults();
<%
			}else{
            if(("true").equals(useCursor)) {
%>
                stmt_<%=cid %>.setFetchSize(<%=cursorSize %>);
<%
			   }
		   }            
		}
		
		public void createConnection(INode node) {
			cid = node.getUniqueName();
			dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__");
			dbhost = ElementParameterParser.getValue(node, "__HOST__");
	    	dbport = ElementParameterParser.getValue(node, "__PORT__");
	    	dbname = ElementParameterParser.getValue(node, "__DBNAME__");
	    	dbuser = ElementParameterParser.getValue(node, "__USER__");

	 		boolean specify_alias = "true".equals(ElementParameterParser.getValue(node, "__SPECIFY_DATASOURCE_ALIAS__"));
	 		if(specify_alias){
				String alias = ElementParameterParser.getValue(node, "__DATASOURCE_ALIAS__");
%>
				java.util.Map<String, routines.system.TalendDataSource> dataSources_<%=cid%> = (java.util.Map<String, routines.system.TalendDataSource>) globalMap.get(KEY_DB_DATASOURCES);
				if (null != dataSources_<%=cid%>) {
        			String dsAlias_<%=cid%> = <%=(null != alias && !("".equals(alias)))?alias:"\"\""%>;
            		if (dataSources_<%=cid%>.get(dsAlias_<%=cid%>) == null) {
               			throw new RuntimeException("No DataSource with alias: " + dsAlias_<%=cid%> + " available!");
                  	}
            		conn_<%=cid%> = dataSources_<%=cid%>.get(dsAlias_<%=cid%>).getConnection();
        		} else {
<%
			}
%>
					String driverClass_<%=cid%> = <%=this.getDirverClassName(node) %>;
					java.lang.Class.forName(driverClass_<%=cid%>);
					<%this.setURL(node);%>
					String dbUser_<%=cid %> = <%=dbuser%>;

					<%
					String passwordFieldName = "__PASS__";
					%>

					<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

					String dbPwd_<%=cid %> = decryptedPassword_<%=cid%>;

					<%
					log4jCodeGenerateUtil.debugConnectionParams(node);
					log4jCodeGenerateUtil.connect();
					%>
<%
			if(specify_alias){
%>
				}
<%
			}
		}
		public String getDirverClassName(INode node){
			String driverJar = ElementParameterParser.getValue(node, "__DRIVER_JAR__");
			String driverClass = ElementParameterParser.getValue(node, "__DRIVER_CLASS__");
			return driverClass;
		}
		
		//-----------according schema type to generate ResultSet
		public void generateTimestampResultSet(String firstConnName, IMetadataColumn column, int currentColNo) {
%>
            java.util.Date date_<%=cid%> = null;
            try{
            	date_<%=cid%> = rs_<%=cid %>.getTimestamp(<%if(isDynamic){%>column_index_<%=cid%><%}else{%><%=currentColNo%><%}%>);
            }catch(java.lang.Exception e){
            	date_<%=cid%> = rs_<%=cid %>.getDate(<%if(isDynamic){%>column_index_<%=cid%><%}else{%><%=currentColNo%><%}%>);
            }
            <%=firstConnName%>.<%=column.getLabel()%> = date_<%=cid%>;
<%
	    }  
	    
	    //---------end according schema type to generate ResultSet
	}//end class
	
	dbInputBeginUtil = new DBInputBeginUtil();
%>
    
	<%@ include file="../templates/DB/Input/AbstractDBInputBegin.javajet"%>


