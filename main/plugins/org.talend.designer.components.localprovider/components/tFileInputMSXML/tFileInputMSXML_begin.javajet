<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.Map
    java.util.List
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
" 
%>
<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

String cid = node.getUniqueName();

final boolean isLog4jEnabled = "true".equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));

//List<Map<String, String>> mapping = (List<Map<String,String>>)ElementParameterParser.getObjectValueXML(node, "__MAPPING__");
String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
//String loopQuery = ElementParameterParser.getValue(node, "__LOOP_QUERY__"); 

String filename = ElementParameterParser.getValue(node, "__FILENAME__");
String rootpath = ElementParameterParser.getValue(node, "__ROOT_LOOP_QUERY__");

String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
boolean advancedSeparator = (advancedSeparatorStr!=null&&!("").equals(advancedSeparatorStr))?("true").equals(advancedSeparatorStr):false;
String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER);
List<Map<String, String>> schemas = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SCHEMAS__");

String mode = ElementParameterParser.getValue(node, "__GENERATION_MODE__");

boolean ignoreDTD="true".equals(ElementParameterParser.getValue(node, "__IGNORE_DTD__"));

String dieOnErrorStr = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
boolean dieOnError = (dieOnErrorStr!=null&&!("").equals(dieOnErrorStr))?("true").equals(dieOnErrorStr):false; 

String ignoreOrderStr = ElementParameterParser.getValue(node, "__IGNORE_ORDER__");
boolean ignoreOrder = (ignoreOrderStr!=null&&!("").equals(ignoreOrderStr))?("true").equals(ignoreOrderStr):false;

boolean trimAll = ("true").equals(ElementParameterParser.getValue(node,"__TRIMALL__"));

String checkDateStr = ElementParameterParser.getValue(node,"__CHECK_DATE__");
boolean checkDate = (checkDateStr!=null&&!("").equals(checkDateStr))?("true").equals(checkDateStr):false;

List< ? extends IConnection> connections = node.getOutgoingSortedConnections();

class XpathUtil {

	public  String[]  toXpathStringArray(String xpathList) {
		List<String> result = new java.util.ArrayList<String>();
		char[] charValues = xpathList.toCharArray();
		int inx = -1;
		int beginInx = 0;
		int leftInx = -1;
		int rightInx = -1;
		for (int i = 0; i < charValues.length; i++) {
			char ch = charValues[i];
			if ('[' == ch) {
				leftInx = i;
			} else if (']' == ch) {
				rightInx = i;
			} else if (',' == ch) {
				inx = i;
				if ((leftInx != -1 && rightInx != -1 && inx > leftInx && inx > rightInx)
						|| leftInx == -1
						|| (leftInx != -1 && xpathList
								.indexOf("]") == -1)) {
					result.add(addQuotesIfNotExist(xpathList.substring(beginInx, inx)));
					beginInx = inx + 1;
					leftInx = -1;
					rightInx = -1;
				}
			}
		}
		if (beginInx != 0) {
			result.add(addQuotesIfNotExist(xpathList.substring(beginInx)));
		}
		if (result.size() > 0) {
			return result.toArray(new String[0]);
		} else {
			return new String[] { xpathList };
		}
	}
	
	private  String addQuotesIfNotExist(String text) {
        if (text == null) {
            return null;
        }
        if (!text.startsWith("\"")) {
            text = "\"" + text;
        }
        if (!text.endsWith("\"")) {
            text = text + "\"";
        }
        return text;
    }
}

XpathUtil xpathUtil = new XpathUtil();

if(connections!=null && connections.size()>0){
%>
int nb_line_<%=cid %> = 0;
<%

log4jFileUtil.startRetriveDataInfo();

// *** dom4j begin *** //
if(("Dom4j").equals(mode)){
%>
class NameSpaceTool_<%=cid %> {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    public String addDefaultNSPrefix(String path, String loopPath) {
        if (defualtNSPath.size() > 0) {
        	String fullPath = loopPath;
        	if(!path.equals(fullPath)){
            	for (String tmp : path.split("/")) {
            		if (("..").equals(tmp)) {
                        fullPath = fullPath.substring(0, fullPath.lastIndexOf("/"));
                    } else {
                        fullPath += "/" + tmp;
                    }
            	}
            }
        	int[] indexs = new int[fullPath.split("/").length - 1];
            java.util.Arrays.fill(indexs, -1);
            int length = 0;
            for (int i = 0; i < defualtNSPath.size(); i++) {
                if (defualtNSPath.get(i).length() > length && fullPath.startsWith(defualtNSPath.get(i))) {
                    java.util.Arrays.fill(indexs, defualtNSPath.get(i).split("/").length - 2, indexs.length, i);
                    length = defualtNSPath.get(i).length();
                }
            }

            StringBuilder newPath = new StringBuilder();
            String[] pathStrs = path.split("/");
            for (int i = 0; i < pathStrs.length; i++) {
                String tmp = pathStrs[i];
                if (newPath.length() > 0) {
                    newPath.append("/");
                }
                if (tmp.length() > 0 && tmp.indexOf(":") == -1 && tmp.indexOf(".") == -1 /*&& tmp.indexOf("@") == -1*/) {
                    int index = indexs[i + indexs.length - pathStrs.length];
                    if (index >= 0) {
                    	//==== add by wliu to support both filter and functions==
						if(tmp.indexOf("[")>0 && tmp.indexOf("]")>tmp.indexOf("[")){//include filter
							String tmpStr=replaceElementWithNS(tmp,"pre"+index+":");
							newPath.append(tmpStr);
						}else{
							if(tmp.indexOf("@") != -1 || tmp.indexOf("(")<tmp.indexOf(")")){  // include attribute
								newPath.append(tmp);
							}else{
						//==add end=======	
                        		newPath.append("pre").append(index).append(":").append(tmp);
                        	}
                        }
                    } else {
                        newPath.append(tmp);
                    }
                } else {
                    newPath.append(tmp);
                }
            }
            return newPath.toString();
        }
        return path;
    }
    
	private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
    private java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(matches);
    
	private String replaceElementWithNS(String global, String pre){

        java.util.regex.Matcher match = pattern.matcher(global);
        StringBuffer sb = new StringBuffer();
        match.reset();
        while (match.find()) {
            String group = match.group();
            String tmp = "";
            if (group.toLowerCase().matches("\\b(div|mod|and|or)\\b.*") || group.matches("@.*")) {
                tmp = group;
            } else {
                tmp = tmp + pre + group;
            }
            match.appendReplacement(sb, tmp);
        }
        match.appendTail(sb);
        
        return sb.toString();
	}    
}

class XML_API_<%=cid %>{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
<%
      if(ignoreDTD){
%>
class IgnoreDTDEntityResolver_<%=cid%> implements org.xml.sax.EntityResolver {

 public org.xml.sax.InputSource resolveEntity(String publicId, String systemId)
   throws org.xml.sax.SAXException, java.io.IOException {
        return new org.xml.sax.InputSource(new java.io.ByteArrayInputStream("<?xml version='1.0' encoding='UTF-8'?>".getBytes()));
 }

}
<%
      }
%>
String rootpath_<%=cid %> = <%=rootpath %>;
if(rootpath_<%=cid %>.endsWith("/")){
	rootpath_<%=cid %> = rootpath_<%=cid %>.substring(0,rootpath_<%=cid %>.length()-1);
}


<%
	//get all the children collections of the loop node.
	for(IConnection conn : connections){
		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)){
			String query = null;
			for(Map<String, String> schemaMap : schemas){
				if(schemaMap.get("SCHEMA").equals(conn.getName())){
					query = schemaMap.get("LOOP_PATH");
				}
			}
%>
	String query_<%=conn.getName() %> = <%=query %>;
	if(query_<%=conn.getName() %>.startsWith("/")){
		query_<%=conn.getName() %> = query_<%=conn.getName() %>.substring(1);
	}
	String subLoop_<%=conn.getName() %> = rootpath_<%=cid %> + "/" + query_<%=conn.getName() %>;
<%
		}
	}
%>

org.dom4j.io.SAXReader reader_<%=cid %> = new org.dom4j.io.SAXReader();
<%
      if(ignoreDTD){
%>
reader_<%=cid %>.setEntityResolver(new IgnoreDTDEntityResolver_<%=cid%>());
<%
      }
%>
org.dom4j.Document doc_<%=cid %>= reader_<%=cid %>.read(new java.io.File(<%=filename %>).toURI().toString());

NameSpaceTool_<%=cid %> nsTool_<%=cid %> = new NameSpaceTool_<%=cid %>();
nsTool_<%=cid %>.countNSMap(doc_<%=cid %>.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_<%=cid %> = nsTool_<%=cid %>.xmlNameSpaceMap;  

org.dom4j.XPath x_<%=cid %> = doc_<%=cid %>.createXPath(nsTool_<%=cid %>.addDefaultNSPrefix(rootpath_<%=cid %>,rootpath_<%=cid %>));  
x_<%=cid %>.setNamespaceURIs(xmlNameSpaceMap_<%=cid %>);

java.util.List<org.dom4j.Element> nodeList_<%=cid %> = (java.util.List<org.dom4j.Element>)x_<%=cid %>.selectNodes(doc_<%=cid %>);	
XML_API_<%=cid %> xml_api_<%=cid %> = new XML_API_<%=cid %>();
String str_<%=cid %> = "";
org.dom4j.Node node_<%=cid %> = null;
boolean isSingleNode_<%=cid %> = true;
Object obj_<%=cid %> = null;

for (org.dom4j.Element loop_<%=cid %>: nodeList_<%=cid %>) {

<%	if(!ignoreOrder){//order %>
	java.util.Iterator<org.dom4j.Element> it_<%=cid %> = loop_<%=cid %>.elementIterator();
	
	while(it_<%=cid%>.hasNext()){
		nb_line_<%=cid %>++;
		
<%
		log4jFileUtil.debugRetriveData(node);
%>

		org.dom4j.Element temp_<%=cid %> = it_<%=cid %>.next();
<%	}else{ // out of order%>
	java.util.List<java.util.Map<String,org.dom4j.Element>> resultList_<%=cid %> = new java.util.ArrayList<java.util.Map<String,org.dom4j.Element>>();
<%
		for(IConnection conn : connections){
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)){
%>
	org.dom4j.XPath groupPath_<%=conn.getName() %> = loop_<%=cid %>.createXPath(nsTool_<%=cid %>.addDefaultNSPrefix(query_<%=conn.getName() %>,rootpath_<%=cid %>));
	groupPath_<%=conn.getName() %>.setNamespaceURIs(xmlNameSpaceMap_<%=cid %>);
	java.util.List<org.dom4j.Element> groupList_<%=conn.getName() %> = (java.util.List<org.dom4j.Element>)groupPath_<%=conn.getName() %>.selectNodes(loop_<%=cid %>);
	if(groupList_<%=conn.getName() %>!=null && groupList_<%=conn.getName() %>.size()>0){
		for(org.dom4j.Element ele_<%=cid %> : groupList_<%=conn.getName() %>){
			java.util.Map<String, org.dom4j.Element> map = new java.util.HashMap<String,org.dom4j.Element>();
			map.put("<%=conn.getName()%>", ele_<%=cid %>);
			resultList_<%=cid %>.add(map);
		}
	}
<%
			}
		}
%>
	for(java.util.Map<String,org.dom4j.Element> tempMap_<%=cid %> : resultList_<%=cid %> ){
<%
	}
// ***dom4j end and sax begin*** //
}else if(("SAX").equals(mode)){
%>
class XML_API_<%=cid%>{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_<%=cid%> xml_api_<%=cid%> = new XML_API_<%=cid%>();

<%
	//get all the children collections of the loop node.
	StringBuilder builderLoops = new StringBuilder();
	StringBuilder builderQueries = new StringBuilder();
	boolean isFirstArr = true;
	for(IConnection conn : connections){
		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)){
			String loopPath = null;
			String strQuery = null;
			for(Map<String, String> schemaMap : schemas){
				if(schemaMap.get("SCHEMA").equals(conn.getName())){
					loopPath = schemaMap.get("LOOP_PATH");
					strQuery = (String)schemaMap.get("MAPPING");
				}
			}
			
			if(isFirstArr == false){
				builderQueries.append(",");
				builderLoops.append(",");
			}
			builderLoops.append(loopPath);
			
			String[] arrQuery = xpathUtil.toXpathStringArray(strQuery);
			builderQueries.append("{");
			for(int i = 0; i < arrQuery.length; i++){
				if(arrQuery[i]!=null && !("").equals(arrQuery[i])){
					if(i == 0){
						builderQueries.append(arrQuery[i]);
					}else{
						builderQueries.append("," + arrQuery[i]);
					}
					
					if(arrQuery[i].indexOf("@")<0){
						builderQueries.append("," + arrQuery[i] + "+\"/@xsi:nil\"");
					}
				}
			}
			builderQueries.append("}");
			
			isFirstArr = false;
		}
	}
%>

String[] arrLoop_<%=cid%> = new String[]{<%=builderLoops.toString() %>};
String[][] arrQuery_<%=cid %> =new String[][]{<%=builderQueries.toString() %>};
String str_<%=cid %> = "";
String[] node_<%=cid%> = null;
boolean isSingleNode_<%=cid %> = true;
org.talend.xml.sax.SAXLooper looper_<%=cid%> = new org.talend.xml.sax.SAXLooper(<%=rootpath%>,arrLoop_<%=cid %>,arrQuery_<%=cid %>);
<%if(ignoreDTD){%>
looper_<%=cid%>.setIgnoreDTD(true);
<%}%>
looper_<%=cid%>.setEncoding(<%=encoding %>);
looper_<%=cid%>.parse(<%=filename %>);
	java.util.Iterator<java.util.Map<String, java.util.Map<String,String>>> it_<%=cid %>  = looper_<%=cid %>.multiIterator();
	while (it_<%=cid%>.hasNext()) {
	
		nb_line_<%=cid %>++;
		
<%
		log4jFileUtil.debugRetriveData(node);
%>
		
		java.util.Map<String, java.util.Map<String,String>> tmp_<%=cid %> = it_<%=cid %>.next();
<%
}
// *** sax end *** //
%>

		try{
<%
	for(IConnection conn : connections){
		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)){
			boolean hasEmptyRow = false;
			Map<String, String> mapping = null;
			String tmpQuery = null;
			for(Map<String, String> schemaMap : schemas){
				if(schemaMap.get("SCHEMA").equals(conn.getName())){
					hasEmptyRow = ("true").equals(schemaMap.get("CREATE_EMPTY_ROW"));
					mapping = schemaMap;
					tmpQuery = schemaMap.get("LOOP_PATH");
				}
			}
			IMetadataTable metadata = conn.getMetadataTable();
			if(metadata!=null){
%>
	<%=conn.getName() %> = null;
<%
				if(("Dom4j").equals(mode)){
					if(!ignoreOrder){ //order
%>
	String tmp_<%=conn.getName() %> = temp_<%=cid %>.getName();
	if(temp_<%=cid %>.getNamespacePrefix() !=null &&
			!temp_<%=cid %>.getNamespacePrefix().equals("")){
		tmp_<%=conn.getName() %> = temp_<%=cid %>.getNamespacePrefix() + ":" + tmp_<%=conn.getName() %>;
	}
	if(tmp_<%=conn.getName() %>.equals(query_<%=conn.getName() %>)){
<%
					}else{ //out of order
%>
	if(tempMap_<%=cid %>.get("<%=conn.getName() %>") != null){
		org.dom4j.Element temp_<%=cid %> = tempMap_<%=cid %>.get("<%=conn.getName() %>");
<%
					}
				}else{
%>
	if(tmp_<%=cid %>.get(<%=tmpQuery %>)!=null){
		
		java.util.Map<String, String> row_<%=cid %> = (java.util.Map<String, String>)tmp_<%=cid %>.get(<%=tmpQuery %>);
<%
				}
%>	
		<%=conn.getName() %>=new <%=conn.getName() %>Struct();
<%
				if(hasEmptyRow==false){
%>
		boolean hasEmptyRow_<%=cid %> = true;
<%
				}
				List<IMetadataColumn> columns = metadata.getListColumns();
				String[] arrXpath = xpathUtil.toXpathStringArray(((String)mapping.get("MAPPING")));
				for (int i=0;i < arrXpath.length;i++) {
					String query = arrXpath[i];
					if(("Dom4j").equals(mode)){
%>
		org.dom4j.XPath xTmp<%=conn.getName() + i %>_<%=cid %> = temp_<%=cid %>.createXPath(nsTool_<%=cid %>.addDefaultNSPrefix(<%=query %>, subLoop_<%=conn.getName() %>));
	    xTmp<%=conn.getName() + i %>_<%=cid %>.setNamespaceURIs(xmlNameSpaceMap_<%=cid %>); 
	    obj_<%=cid %> = xTmp<%=conn.getName() + i %>_<%=cid %>.evaluate(temp_<%=cid %>);
	    if(obj_<%=cid %> instanceof org.dom4j.Node) {
	    	node_<%=cid %> = (org.dom4j.Node)obj_<%=cid %>;
	    	isSingleNode_<%=cid %> = true;
	    } else {
	    	isSingleNode_<%=cid %> = false;
	    }
	    str_<%=cid %> = xTmp<%=conn.getName() + i %>_<%=cid %>.valueOf(temp_<%=cid %>)<%=trimAll?".trim()":""%>;
<%
					}else if(("SAX").equals(mode)){
%>
	str_<%=cid %> = row_<%=cid %>.get(<%=query %>)<%=trimAll?".trim()":""%>;
<%
						if(query!=null && query.indexOf("@")<0){
%>
	node_<%=cid %> = new String[]{str_<%=cid %>,row_<%=cid %>.get(<%=query %>+"/@xsi:nil")};
<%
						}else{
%>
	node_<%=cid %> = new String[]{str_<%=cid %>,null};
<%
						}
					}
 					int j = 0;
					for(IMetadataColumn column:columns) {
						if (i == j) {
							String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
							JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
							String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
							
							boolean isNotSetDefault = false;
							String defaultValue=column.getDefault();
							if(defaultValue!=null){
								isNotSetDefault = defaultValue.length()==0;
							}else{
								isNotSetDefault=true;
							}
							
							if(javaType == JavaTypesManager.STRING){
								if(column.isNullable()){
%>
									if(isSingleNode_<%=cid %> && xml_api_<%=cid %>.isDefNull(node_<%=cid %>)){
											<%=conn.getName() %>.<%=column.getLabel() %> =null;
									}else if(isSingleNode_<%=cid %> && xml_api_<%=cid %>.isEmpty(node_<%=cid %>)){
										<%=conn.getName() %>.<%=column.getLabel() %> ="";
									}else if(isSingleNode_<%=cid %> && xml_api_<%=cid %>.isMissing(node_<%=cid %> )){ 
										<%=conn.getName() %>.<%=column.getLabel() %> =<%=isNotSetDefault?null:column.getDefault() %>;
									}else{
<% 
								}else{ // column.isNullable()
%>
									if(isSingleNode_<%=cid %> && xml_api_<%=cid %>.isEmpty(node_<%=cid %>)){
										<%=conn.getName() %>.<%=column.getLabel() %> ="";
									}else if(isSingleNode_<%=cid %> && xml_api_<%=cid %>.isMissing(node_<%=cid %> )){ 
										<%=conn.getName() %>.<%=column.getLabel() %> =<%=isNotSetDefault?JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate):column.getDefault() %>;
									}else{
<% 
								}
							}else{ // other type
								if(column.isNullable()){
%>	
										if(isSingleNode_<%=cid %> && xml_api_<%=cid %>.isDefNull(node_<%=cid %>)){
											<%=conn.getName() %>.<%=column.getLabel() %> =null;
										}else if(isSingleNode_<%=cid %> && (xml_api_<%=cid %>.isEmpty(node_<%=cid %>) || xml_api_<%=cid %>.isMissing(node_<%=cid %>))){
											<%=conn.getName() %>.<%=column.getLabel() %>=<%=isNotSetDefault?null:column.getDefault()%>;
										}else{
<%
							  	}else{ // column.isNullable()
%>
										if(isSingleNode_<%=cid %> && (xml_api_<%=cid %>.isMissing(node_<%=cid %>) || xml_api_<%=cid %>.isEmpty(node_<%=cid %>))){
											<%=conn.getName() %>.<%=column.getLabel() %> =<%=isNotSetDefault?JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate):column.getDefault() %>;
										}else{
<%
								}
							}
							if (javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = str_<%=cid %>;
<% 
							} else if (javaType == JavaTypesManager.DATE) {
								if(checkDate) {
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(str_<%=cid %>, <%= patternValue %>,false);
<%  
								} else {
%>			
		<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(str_<%=cid %>, <%= patternValue %>);
<%
								}
							} else if(javaType == JavaTypesManager.BYTE_ARRAY){ 
%>							
		<%=conn.getName() %>.<%=column.getLabel() %> = str_<%=cid %>.getBytes(<%=encoding %>);
<%
							} else if(advancedSeparator && JavaTypesManager.isNumberType(javaType)) { 
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(ParserUtils.parseTo_Number(str_<%=cid %>, <%= thousandsSeparator %>, <%= decimalSeparator %>));
<%
							} else {
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(str_<%=cid %>);
<%
							}
%>
<%
							if(hasEmptyRow==false){
%>
		hasEmptyRow_<%=cid %> = false;
<%
							}
%>
	}
<%
							break;//jump out of the for loop
						}
						j++;
					}				//for(IMetadataColumn column:columns)
				}				//for (int i=0;i<mapping.size();i++)
%>
<%
				if(hasEmptyRow==false){
%>
		if(hasEmptyRow_<%=cid %> == true){
			<%=conn.getName() %> = null;
		}
<%
				}
%>
	}
<%
			}	//if(metadata!=null)	
		}//if(conn) 
	}	//for(IConnection)
%>
	} catch (java.lang.Exception e) {
<%
    if (dieOnError) {
%>
            throw(e);
            <%
	} else {
		if(isLog4jEnabled) {
%>
		log.error("<%=cid%> - " + e.getMessage());
<%
		}
%>
        System.err.println(e.getMessage());
<%
    	for(IConnection conn : connections){
    		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)){
%>
		<%=conn.getName() %> = null;
<%
			}
		}
	}
%>
	}
<%
}	//if(conns!=null)
%>
			
