<%@ jet 
imports="
	org.talend.core.model.process.INode 
	org.talend.core.model.process.ElementParameterParser 
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.metadata.IMetadataTable 
	org.talend.core.model.metadata.MetadataTalendType	
	org.talend.core.model.metadata.MappingTypeRetriever	 
	org.talend.core.model.utils.NodeUtil
	java.util.List
	java.util.ArrayList
	java.util.Map
	java.util.HashMap
" 
skeleton="../templates/db_output_bulk.skeleton"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/DBLogUtil.javajet"%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
dbLog = new DBLogUtil(node); 
String action = ElementParameterParser.getValue(node, "__ACTION__");
String outputAction = ElementParameterParser.getValue(node, "__OUTPUT__");

String field_separator = ElementParameterParser.getValue(node, "__FIELDS_TERMINATED_BY__");
String row_separator = ElementParameterParser.getValue(node, "__ROW_TERMINATED_BY__");
String first_row = ElementParameterParser.getValue(node, "__FIRST_ROW__");
String file = ElementParameterParser.getValue(node, "__REMOTE_FILENAME__");
String dbhost = ElementParameterParser.getValue(node, "__HOST__");
String dbport = ElementParameterParser.getValue(node, "__PORT__");
String dbname = ElementParameterParser.getValue(node, "__DBNAME__");
String dbschema = ElementParameterParser.getValue(node, "__DB_SCHEMA__");
String dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__");
String dbuser = ElementParameterParser.getValue(node, "__USER__");
String dbpwd = ElementParameterParser.getValue(node, "__PASS__");
String table = ElementParameterParser.getValue(node, "__TABLE__");
String codePage = ElementParameterParser.getValue(node, "__CODE_PAGE__");
String data_file_type = ElementParameterParser.getValue(node, "__DATA_FILE_TYPE__");
boolean convertToUppercase = false; // not active this function
%>
int deletedCount_<%=cid%>=0;
<%@ include file="../templates/Log4j/Log4jDBConnUtil.javajet"%>
<%
if(("EXPORT").equals(action)) {
%>
<%
	String bcp_utility = ElementParameterParser.getValue(node, "__BCP_UTILITY__");
	String server = ElementParameterParser.getValue(node, "__SERVER__");
	String query_statement = ElementParameterParser.getValue(node, "__QUERY__");
		   query_statement = query_statement.replaceAll("\n"," ");
		   query_statement = query_statement.replaceAll("\r"," ");		   
	String output_file_name = ElementParameterParser.getValue(node, "__OUTPUT_FILE_NAME__");
	String row_terminated_export = ElementParameterParser.getValue(node, "__ROW_TERMINATED_EXPORT__");

	String char_type =  "char type error!";
	if(("char").equals(data_file_type)){
		char_type = "-c";
	}else if(("native").equals(data_file_type)){
		char_type = "-n";
	}else{
		char_type = "-w";
	}
	
	%>
	
	<%
	String passwordFieldName = "__PASS__";
	%>
	
	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
	
	StringBuffer command_<%=cid%> = new StringBuffer();
	command_<%=cid%>.append(<%=bcp_utility%>)
		.append(" \"")
		.append(<%=query_statement%>)
		.append("\" queryout \"")
		.append(<%=output_file_name%>)
		.append("\" ")
		.append("<%=char_type%>")
	<%
	if(!("").equals(server)&&!("\"\"").equals(server)&&!(server==null)){
	%>
		.append(" -S")
		.append(<%=server%>)
	<%
	}
	if((("").equals(dbuser)||("\"\"").equals(dbuser)||dbuser==null)&&(("").equals(dbpwd)||dbpwd==null||("\"\"").equals(dbpwd))){
	%>
		.append(" -T")
	<%
	}else{
	%>
		.append(" -U")
		.append(<%=dbuser%>)
		.append(" -P")
		.append(decryptedPassword_<%=cid%>)
	<%
	}
	%>
		.append(" -t")
		.append(<%=field_separator%>)
		.append(" -r")
		.append(<%=row_terminated_export%>);
	
	Runtime runtime_<%=cid%> = Runtime.getRuntime();
	<%
		log4jCodeGenerateUtil.logInfo(node,"info",cid+" - Executing '\"+ command_" + cid + "+\"'.");
	%>
	final Process ps<%=cid %> = runtime_<%=cid%>.exec(command_<%=cid%>.toString());
	Thread normal_<%=cid%> = new Thread() {
		public void run() {
			try {
				java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps<%=cid %>.getInputStream()));
				String line = "";
				try {
					while((line = reader.readLine()) != null) {
						<%
						if (("OUTPUT_TO_CONSOLE").equals(outputAction)) {
							%>
							System.out.println(line);
							<%
						} else if (("RETRIEVE_OUTPUT").equals(outputAction)) {
							%>
							globalMap.put("<%=cid %>_OUTPUT",(String)globalMap.get("<%=cid %>_OUTPUT")+"\n"+line);
							<%
						}
						%>
					}
				} finally {
					reader.close();
				}
			} catch(java.io.IOException ioe) {
				<%log4jCodeGenerateUtil.logError(node,"error","ioe");%>
				ioe.printStackTrace();
			}
		}
	};
	normal_<%=cid%>.start();
	Thread error_<%=cid%> = new Thread() {
		public void run() {
			try {
				java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps<%=cid %>.getErrorStream()));
				String line = "";
				try {
					while((line = reader.readLine()) != null) {
						<%
						if (("OUTPUT_TO_CONSOLE").equals(outputAction)) {
							%>
							System.err.println(line);
							<%
						} else if (("RETRIEVE_OUTPUT").equals(outputAction)) {
							%>
							globalMap.put("<%=cid %>_OUTPUT",(String)globalMap.get("<%=cid %>_OUTPUT")+"\n"+line);
							<%
						}
						%>
					}
				} finally {
					reader.close();
				}
			} catch(java.io.IOException ioe) {
				<%log4jCodeGenerateUtil.logError(node,"error","ioe");%>
				ioe.printStackTrace();
			}
		}
	};
	error_<%=cid%>.start();
	ps<%=cid %>.waitFor();
	normal_<%=cid%>.interrupt();
	error_<%=cid%>.interrupt();
	<%
	log4jCodeGenerateUtil.logInfo(node,"info",cid+" - Excute '\"+ command_" + cid + "+\"' successfully.");
} else {
	List<IMetadataColumn> columnList = getColumnList(node);	
	%>
	String dbschema_<%=cid%> = "";
	<%@ include file="../templates/tMSSql/_tMSSqlConnection.javajet"%>
	String tableName_<%=cid%> = null;	
	if(dbschema_<%=cid%> == null || dbschema_<%=cid%>.trim().length() == 0) {
		tableName_<%=cid%> = <%=table%>;
	} else {
		tableName_<%=cid%> = dbschema_<%=cid%> + "].[" + <%=table%>;
	}
	<%
	String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
	String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
	Manager manager = null;
	List<Column> stmtStructure = null;
	if(columnList != null && columnList.size() > 0) {
		stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, false, null, null);
	}
	if((columnList != null && columnList.size() > 0) || "CLEAR".equals(tableAction) || "NONE".equals(tableAction) || "TRUNCATE".equals(tableAction)){
	%>	
		<%@ include file="../templates/_tableActionForBulk.javajet"%>
    	<%
    	if(("INSERT").equals(action)) {
		%>
    		java.sql.Statement stmtBulkInsert_<%=cid %> = conn_<%=cid %>.createStatement();
    		String bulkSQL_<%=cid%> = "BULK INSERT <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> FROM '" + <%=file%> + "' WITH ( CODEPAGE='" + <%=codePage%> + "',DATAFILETYPE='<%=data_file_type%>',FIELDTERMINATOR='" + <%=field_separator%> + "',FIRSTROW =" + <%=first_row%> + ",ROWTERMINATOR='" + <%=row_separator%>+"')";
    		<%
    		if(isLog4jEnabled_tableAction){
    		%>
    			log.debug("<%=cid%> - Bulk SQL:"+bulkSQL_<%=cid%>+".");
    			log.info("<%=cid%> - Bulk inserting data into <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%>." );
    		<%
    		}
    		%>
    		stmtBulkInsert_<%=cid %>.execute(bulkSQL_<%=cid%>);
    		stmtBulkInsert_<%=cid %>.close();
    		<%if(isLog4jEnabled_tableAction){%>
    			log.info("<%=cid%> - Bulk insert data into <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> has finished.");
    		<%
    		}
    	} else if(("UPDATE").equals(action)) {
    		if(columnList != null && columnList.size() > 0) {
    			int keyCount = 0;
    			for(IMetadataColumn column : columnList) {
    				if(column.isKey()) {
    					keyCount++;
    				}
    			}
    			%>
    			int keyCount_<%=cid%> = <%=keyCount%>;
    			if(keyCount_<%=cid%> == 0) {
    				throw new RuntimeException("For bulk update, Schema must have a key at least."); 
    			}
    			String tmpTableName_<%=cid%> = tableName_<%=cid%>;
    			tableName_<%=cid%> = "tmp_<%=cid%>" + "_" + pid + Thread.currentThread().getId();
    			java.sql.Statement stmtCreateTmp_<%=cid%> = conn_<%=cid%>.createStatement();
    			<%if(isLog4jEnabled_tableAction){%>
    				log.info("<%=cid%> - Creating temp table <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%>." );
    			<%}%>
    			stmtCreateTmp_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>)");
    			<%if(isLog4jEnabled_tableAction){%>
    				log.info("<%=cid%> - Create temp table <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> has succeeded.");
    			<%}%>
    			stmtCreateTmp_<%=cid%>.close();
    			java.sql.Statement stmtTmpBulk_<%=cid%> = conn_<%=cid%>.createStatement();
    			String bulkSQL_<%=cid%> = "BULK INSERT <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> FROM '" + <%=file%> + "' WITH ( CODEPAGE='" + <%=codePage%> + "',DATAFILETYPE='<%=data_file_type%>',FIELDTERMINATOR='" + <%=field_separator%> + "',FIRSTROW =" + <%=first_row%> + ",ROWTERMINATOR='" + <%=row_separator%>+"')";
    			<%if(isLog4jEnabled_tableAction){%>
    				log.debug("<%=cid%> - Bulk SQL:"+bulkSQL_<%=cid%>+".");
    				log.info("<%=cid%> - Bulk inserting data into <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%>." );
    			<%}%>
    			stmtTmpBulk_<%=cid%>.execute(bulkSQL_<%=cid%>);
    			stmtTmpBulk_<%=cid%>.close();
    			<%if(isLog4jEnabled_tableAction){%>
    				log.info("<%=cid%> - Bulk insert data into <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> has finished.");
    			<%}%>
    			tableName_<%=cid%> = tmpTableName_<%=cid%>;
    			tmpTableName_<%=cid%> = "tmp_<%=cid%>" + "_" + pid + Thread.currentThread().getId();
    			java.sql.Statement stmtUpdateBulk_<%=cid%> = conn_<%=cid%>.createStatement();
    			<%if(isLog4jEnabled_tableAction){%>
    				log.info("<%=cid%> - Updating <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> from <%=manager.getLProtectedChar()%>"+tmpTableName_<%=cid%>+"<%=manager.getRProtectedChar()%>.");
    			<%}%>
    			stmtUpdateBulk_<%=cid%>.executeUpdate("<%=manager.getUpdateBulkSQL(columnList)%>");
    			<%log4jCodeGenerateUtil.logInfo(node,"info",cid+" - Update has finished.");%>
    			stmtUpdateBulk_<%=cid%>.close();
    			tableName_<%=cid%> = "tmp_<%=cid%>" + "_" +pid + Thread.currentThread().getId();
    			java.sql.Statement stmtTmpDrop_<%=cid%> = conn_<%=cid%>.createStatement();
    			<%if(isLog4jEnabled_tableAction){%>
    				log.info("<%=cid%> - Droping temp table <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%>.");
    			<%}%>
    			stmtTmpDrop_<%=cid%>.execute("<%=manager.getDropTableSQL()%>");
    			<%if(isLog4jEnabled_tableAction){%>
    				log.info("<%=cid%> - Drop temp table <%=manager.getLProtectedChar()%>" + tableName_<%=cid%>+ "<%=manager.getRProtectedChar()%> has succeeded.");
    			<%}%>
    			stmtTmpDrop_<%=cid%>.close();
    			<%
    		}
    	}
    }		
	
	
	if(!useExistingConnection) {
		%>
		if(conn_<%=cid %> != null && !conn_<%=cid %>.isClosed()) {
		   <%log4jCodeGenerateUtil.close(node);%>
		}
		<%
	}
}
%>
