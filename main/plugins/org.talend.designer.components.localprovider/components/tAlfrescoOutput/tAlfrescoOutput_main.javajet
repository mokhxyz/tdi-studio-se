<%@ jet
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnectionCategory
    java.util.List
    java.util.Map
  	org.talend.core.model.process.IConnection    
"
%>

<%
    // 2. in main.javajet, we output the document corresponding to the current row

	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
    // getting node metadata and columns
	List<IMetadataColumn> columns = null;
	List<IMetadataTable> metadatas = node.getMetadataList();
	IMetadataTable metadata = null;
	if (metadatas!=null && metadatas.size()>0) {
	    metadata = metadatas.get(0);
	    if (metadata!=null) {
            columns = metadata.getListColumns();
        }
    }
	
	// getting incoming connection and name
    List<? extends IConnection> inConns = node.getIncomingConnections();
	IConnection inConn = null;
	String inConnName = null;
	if(inConns != null && inConns.size()>0){
	    inConn = inConns.get(0);
	    inConnName = inConn.getName();
	}
	List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
	
	// getting reject connection columnList and name
	IConnection rejectConn = null;
	String rejectConnName = null;
	List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
	if(rejectConns != null && rejectConns.size() > 0) {
	    rejectConn = rejectConns.get(0);
	    rejectConnName = rejectConn.getName();
	}
	List<IMetadataColumn> rejectColumns = null;
	IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
	if(metadataTable != null) {
	    rejectColumns = metadataTable.getListColumns();      
	}
		
	// checking that we're in a valid enough case
	if (metadata != null && columns != null && inConn != null) {
	
		// getting useful parameters
	    boolean mapTargetLocationFromColumn = Boolean.valueOf(ElementParameterParser.getValue(node, "__MAP_TARGET_LOCATION_FROM_COLUMN__"));
	    String targetLocationColumn = ElementParameterParser.getValue(node, "__TARGET_LOCATION_COLUMN__");
	    
	    boolean configurePermissions = Boolean.valueOf(ElementParameterParser.getValue(node, "__CONFIGURE_PERMISSIONS__"));
	    List<Map<String, String>> permissionMappings = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__PERMISSIONS__");
	    
	    List<Map<String, String>> propertyMappings = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__PROPERTY_MAPPING__");
	    List<Map<String, String>> associationMappings = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__ASSOCIATION_MAPPING__");
	    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
		for(IConnection conn : outgoingConns) {
    		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
    		<%=conn.getName() %> = null;            
<%      	
			}
		}
%>
	          
	    whetherReject_<%=cid%> = false;
	    try { // start reject exception handling
	        
	        // writing document
	        <%
	        // preparing targetLocationBase
			  String targetLocationBaseVariable = "\"\"";
			  if (mapTargetLocationFromColumn && targetLocationColumn != null && targetLocationColumn.length() != 0) {
					// we'll take it from the mapped column
			  		targetLocationBaseVariable = inConnName + '.' + targetLocationColumn;
			  }
	        if (!configurePermissions) {
	        %>
         	talendAcpXmlWriter_<%=cid%>.writeStartDocument(<%=targetLocationBaseVariable%>,
         		null);
         	<%
         	} else {
         	%>
        	talendAcpXmlWriter_<%=cid%>.writeStartDocument(<%=targetLocationBaseVariable%>,
         		new String[][] {
         			<%
         			for (Map<String, String> permissionMapping : permissionMappings) {
					      String authorityColumn = permissionMapping.get("USERORGROUPCOLUMN");
					      String permission = permissionMapping.get("PERMISSION");
					      String authorityVariable;
					      if (authorityColumn == null) {
					      		String authorityValue = permissionMapping.get("USERORGROUP");
			                    if (authorityValue == null) {
			                        // if no mapped column or value, we don't set the property
			                        // TODO reject ?
			                        continue;
			                    }
		                    	// wrapping it with quotes to make a string out of it :
		                    	authorityVariable = "\"" + authorityValue + "\"";
		                    	
					      } else {
                				// we'll take it from the mapped column
					      		authorityVariable = inConnName + '.' + authorityColumn;
					      }
					      if (permission == null || permission.length() == 0) {
					      	continue; // NB. could handle it as a reject
					      }
         			%>
         			new String[] { <%=authorityVariable%>, "<%=permission%>" }
         			<%
         			}
         			%>
         			});
         	<%
         	}
         	%>
	        
	        // properties
	        <%
            for(Map<String, String> propertyMapping : propertyMappings) {
                String mappedColumnLabel = propertyMapping.get("COLUMN");
                String mappedVariable;
                if (mappedColumnLabel == null || mappedColumnLabel.length() == 0) {
                    // if no mapped column, trying to get mapped value
                    String mappedValue = propertyMapping.get("VALUE");
                    if (mappedValue == null) {
                        // if no mapped column or value, we don't set the property
                        // NB. could handle it as a reject
                        continue;
                    }
                	// wrapping it with quotes to make a string out of it :
                	mappedVariable = "\"" + mappedValue + "\"";
                	
                } else {
                	// we'll take it from the mapped column
                	mappedVariable = inConnName + '.' + mappedColumnLabel;
                }
                
                String propertyName = propertyMapping.get("NAME");
                String propertyType = propertyMapping.get("TYPE");
                %>
		         talendAcpXmlWriter_<%=cid%>.writeProperty("<%=propertyName%>", "<%=propertyType%>", <%=mappedVariable%>);
                <%
            }
            %>
	        
	        // associations
	        <%
	        if (associationMappings != null) {
	            for(Map<String, String> associationMapping : associationMappings) {
                    String mappedColumnLabel = associationMapping.get("COLUMN");
	                if (mappedColumnLabel == null || mappedColumnLabel.length() == 0) {
	                    // if no mapped column, we don't set the association
	                    continue;
	                }
	                
                    String associationName = associationMapping.get("NAME");
	                %>
			         talendAcpXmlWriter_<%=cid%>.writeAssociation("<%=associationName%>",
			         		<%=inConnName + '.' + mappedColumnLabel%>);
	                <%
	            }
            }
            %>
            
         talendAcpXmlWriter_<%=cid%>.writeEndDocument();
         
         nbLine_<%=cid%>++;
	        
	    } catch (java.lang.Exception mainEx_<%=cid%>) { // end reject exception handling
<%
		if (("true").equals(dieOnError)) {
%>
            throw(mainEx_<%=cid%>);
<%
		} else {
%>
			whetherReject_<%=cid%> = true;
<%
	        // handling exception as reject connection or std err
	        if(rejectConnName != null && rejectColumns != null && rejectColumns.size() > 0) {
                %>
                <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                <%
	            // handling exception as reject connection
                for(IMetadataColumn column : columns) {
                    %>
                    <%=rejectConnName%>.<%=column.getLabel()%> = <%=inConnName%>.<%=column.getLabel()%>;
                    <%
                }
                %>
                nb_line_rejected_<%=cid%>++;
                <%=rejectConnName%>.errorMessage = mainEx_<%=cid%>.getMessage();
                <%=rejectConnName%>.errorCode = "XML";
                <%
            } else {
                %>
	            // handling exception as std err
                System.err.println(mainEx_<%=cid%>.getMessage());
                <%
            }
		}
            %>
            
	    }
	    <%
	   	if(outgoingConns != null && outgoingConns.size() > 0) {
        %>
		if(!whetherReject_<%=cid%>) {
		<%
			for(IConnection outgoingConn : outgoingConns) {
				if(rejectConnName == null || (rejectConnName != null && !outgoingConn.getName().equals(rejectConnName))) {
					if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
					 %>
			<%=outgoingConn.getName()%> = new <%=outgoingConn.getName()%>Struct();
						<%
						for(IMetadataColumn column : columns) {
						%>
			<%=outgoingConn.getName()%>.<%=column.getLabel()%> = <%=inConnName%>.<%=column.getLabel()%>;
						<%                  
						}
					}
				}
			}
			%>
		}
		<%
		}
	}
%>