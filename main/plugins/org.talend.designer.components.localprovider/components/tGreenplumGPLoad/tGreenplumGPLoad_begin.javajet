<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.MetadataTalendType    
    org.talend.core.model.metadata.MappingTypeRetriever 
    org.talend.core.model.process.IConnection
	org.talend.core.model.process.IConnectionCategory
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.ArrayList    
    java.lang.StringBuilder
    java.util.Map
    java.util.HashMap
" 
skeleton="../templates/db_output_bulk.skeleton"
%>
<%@ include file="../templates/Log4j/Log4jDBConnUtil.javajet"%>

<% 
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();

	String dbhost = ElementParameterParser.getValue(node, "__HOST__");
	String dbport = ElementParameterParser.getValue(node, "__PORT__");
	String dbname = ElementParameterParser.getValue(node, "__DBNAME__");
	String dbschema = ElementParameterParser.getValue(node, "__SCHEMA_DB__");
	String dbuser = ElementParameterParser.getValue(node, "__USER__");

	String dbtable = ElementParameterParser.getValue(node, "__TABLE__");
	String tableAction = ElementParameterParser.getValue(node, "__TABLE_ACTION__");
	String dataAction = ElementParameterParser.getValue(node, "__DATA_ACTION__");
	String dataFile = ElementParameterParser.getValue(node, "__DATA_FILE__");
	boolean useNamedPiped = ElementParameterParser.getValue(node, "__USE_NAMED_PIPE__").equals("true");
	String namedPipeName = ElementParameterParser.getValue(node, "__NAMED_PIPE__");
	List<Map<String, String>> updateOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__UPDATE_OPTIONS__");
	String updateCondition = ElementParameterParser.getValue(node, "__UPDATE_CONDITION__");
	
	boolean useExistingCtrlFile = ElementParameterParser.getValue(node, "__USE_EXISTING_CLT_FILE__").equals("true");
	String ctrlFile = ElementParameterParser.getValue(node, "__CLT_FILE__");
	boolean csvOption = ElementParameterParser.getValue(node, "__CSV_OPTIONS__").equals("true");
	String fieldSeparator = ElementParameterParser.getValue(node, "__FIELD_SEPARATOR__");
	String escapeChar = ElementParameterParser.getValue(node, "__ESCAPE_CHAR__");
	String quoteChar = ElementParameterParser.getValue(node, "__QUOTE_CHAR__");
	boolean headerRow = ElementParameterParser.getValue(node, "__HEADER_ROW__").equals("true");
	List<Map<String, String>> options = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__OPTIONS__");
	String logFile = ElementParameterParser.getValue(node, "__LOG_FILE__");
	//boolean hasBeforeSQL = ElementParameterParser.getValue(node, "__HAS_BEFORE_SQL__").equals("true");
	//String beforeSQL = ElementParameterParser.getValue(node, "__BEFORE_SQL__");
	//boolean hasAfterSQL = ElementParameterParser.getValue(node, "__HAS_AFTER_SQL__").equals("true");
	//String afterSQL = ElementParameterParser.getValue(node, "__AFTER_SQL__");
	String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
	boolean gploadExePathGiven = ElementParameterParser.getValue(node, "__SPECIFY_GPLOAD_PATH__").equals("true");
	String gploadExePath = ElementParameterParser.getValue(node, "__GPLOAD_PATH__");
	String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
	boolean dieOnError = ("true").equals(ElementParameterParser.getValue(node,"__DIE_ON_ERROR__"));
	
	String tableName = dbtable;
	List<IMetadataColumn> columnList = getColumnList(node);
	List<Column> stmtStructure = null;
	if (columnList != null && columnList.size() > 0) {
		stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, false, null, null);
	}
	
	List< ? extends IConnection> inputConns = node.getIncomingConnections();
	List< ? extends IConnection> outputConns = node.getOutgoingConnections();
	boolean hasInputRow = false;
	boolean hasOutputRow = false;
	if (inputConns != null && inputConns.size() > 0) {
		for(IConnection conn : inputConns) {
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))
				if(!hasInputRow)
					hasInputRow = true;
		}
	}
	if (outputConns != null && outputConns.size() > 0) {
		for(IConnection conn : outputConns) {
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))
				if(!hasOutputRow)
					hasOutputRow = true;
		}
	}

		
	if (!gploadExePathGiven) {
		gploadExePath = "\"gpload\"";
	}
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	
%>
	int deletedCount_<%=cid%> = 0;
	int insertedCount_<%=cid%> = 0;
<%
	// -----------------------------------------------------------
	// basic setup check:
	// 		if the component is used with named-piped option, it must have an input row
	//		if the component is used as a start component, then it must not have an output row
	// -----------------------------------------------------------
	boolean missConfiguration = false;
	String  missConfigurationMsg = "";
	if (useNamedPiped && !hasInputRow) {
		missConfiguration = true;
		missConfigurationMsg = cid + " is miss configured. When this component is used in named-pipe mode, it must have an input row.";
	}
	if (hasOutputRow && !hasInputRow) {
		missConfiguration = true;
		missConfigurationMsg = cid + " is miss configured. This component can only have an output row when it has an input row.";
	}
	if (missConfiguration) {
		%>
		boolean missConfiguration_<%=cid%> = true;
		String missConfigurationMsg_<%=cid%> = "<%=missConfigurationMsg%>";
		if (missConfiguration_<%=cid%>) {
			throw new java.lang.Exception(missConfigurationMsg_<%=cid%>);
		}
		<%
	}
%>

	String tableName_<%=cid%> = <%=tableName%>;
	String dbschema_<%=cid%> = <%=dbschema%>;
	String tableName4Load_<%=cid%> = "\"" + tableName_<%=cid%> + "\"";
	if(dbschema_<%=cid%> != null && dbschema_<%=cid%>.trim().length() > 0) {
		tableName_<%=cid%> = dbschema_<%=cid%> + "\".\"" + <%=tableName%>;
		tableName4Load_<%=cid%> = "\""+dbschema_<%=cid%> + "\".\"" + <%=tableName%>+"\"";
	}
<%
	//-----------------------------------------------------------
	// create table option
	//-----------------------------------------------------------
	if((columnList != null && columnList.size() > 0) || "CLEAR".equals(tableAction) || "TRUNCATE".equals(tableAction)) {
        Manager manager = getManager(dbmsId, cid);
		%>

		String driverClass_<%=cid%> = "org.postgresql.Driver";
		java.lang.Class.forName(driverClass_<%=cid%>);    
		String url_<%=cid %> = "jdbc:postgresql://"+<%=dbhost%>+":"+<%=dbport%>+"/"+<%=dbname%>;
		String dbUser_<%=cid %> = <%=dbuser%>;
	        
		<%
		String passwordFieldName = "__PASS__";
		%>
		
		<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
	   	
        String dbPwd_<%=cid %> = decryptedPassword_<%=cid%>;
	        		
		java.sql.Connection conn_<%=cid%> = null;
		<%
	   		log4jCodeGenerateUtil.debugConnectionParams(node);	
			log4jCodeGenerateUtil.connect();
		
        if(("DROP_CREATE").equals(tableAction)) {
            %>
			java.sql.Statement stmtDrop_<%=cid%> = conn_<%=cid%>.createStatement();
			<%if(isLog4jEnabled){%>
				log.info("<%=cid%> - Droping table '" + tableName_<%=cid%> + "'.");
			<%}%>
			stmtDrop_<%=cid%>.execute("<%=manager.getDropTableSQL()%>");
			<%if(isLog4jEnabled){%>
				log.info("<%=cid%> - Drop table '" + tableName_<%=cid%> + "' has succeeded." );
			<%}%>
			java.sql.Statement stmtCreate_<%=cid%> =  null;
			try{
				stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
				<%if(isLog4jEnabled){%>
					log.info("<%=cid%> - Creating table '" + tableName_<%=cid%> + "'.");
				<%}%>
				stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>)");
				<%if(isLog4jEnabled){%>
					log.info("<%=cid%> - Create table '" + tableName_<%=cid%> + "' has succeeded." );
				<%}%>
			}catch(java.sql.SQLException e){
				if(<%=dieOnError%>){
					throw new RuntimeException ("Table '" + tableName4Load_<%=cid%>  + "' already exists. process terminated.");
				}else{
					<%if(isLog4jEnabled){%>
						log.error("<%=cid%> - Table '" + tableName4Load_<%=cid%>  + "' already exists. process terminated.");
					<%}%>
					 e.printStackTrace();
				}
			}
            <%
        } else if(("CREATE").equals(tableAction)) {
            %>
			java.sql.Statement stmtCreate_<%=cid%> = null; 
			try{
				stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
				<%if(isLog4jEnabled){%>
					log.info("<%=cid%> - Creating table '" + tableName_<%=cid%> + "'.");
				<%}%>
				stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>)");
				<%if(isLog4jEnabled){%>
					log.info("<%=cid%> - Create table '" + tableName_<%=cid%> + "' has succeeded." );
				<%}%>
			}catch(java.sql.SQLException e){
				if(<%=dieOnError%>){
					 throw new RuntimeException ("Table '" + tableName4Load_<%=cid%>  + "' already exists. process terminated.");
				}else{
					<%if(isLog4jEnabled){%>
						log.error("<%=cid%> - Table '" + tableName4Load_<%=cid%> + "' already exists. process terminated.");
					<%}%>
					 e.printStackTrace();
				}
			}
            <%
        } else if(("CREATE_IF_NOT_EXISTS").equals(tableAction) || ("DROP_IF_EXISTS_AND_CREATE").equals(tableAction)) {
            %>
			java.sql.DatabaseMetaData dbMetaData_<%=cid%> = conn_<%=cid%>.getMetaData();
			java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, null, null, new String[]{"TABLE"});
			boolean whetherExist_<%=cid%> = false;
			String defaultSchema_<%=cid%> = "public";
			if(dbschema_<%=cid%> == null || dbschema_<%=cid%>.trim().length() == 0) {
				java.sql.Statement stmtSchema_<%=cid%> = conn_<%=cid%>.createStatement();
				java.sql.ResultSet rsSchema_<%=cid%> = stmtSchema_<%=cid%>.executeQuery("select current_schema() ");
				while(rsSchema_<%=cid%>.next()){
					defaultSchema_<%=cid%> = rsSchema_<%=cid%>.getString("current_schema");
				}
				rsSchema_<%=cid%>.close();
				stmtSchema_<%=cid%>.close();
			}
			while(rsTable_<%=cid%>.next()) {
				String table_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_NAME");
				String schema_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_SCHEM");
				if(table_<%=cid%>.equals(<%=tableName%>) && (schema_<%=cid%>.equals(dbschema_<%=cid%>) || ((dbschema_<%=cid%>==null || dbschema_<%=cid%>.trim().length() ==0) && defaultSchema_<%=cid%>.equals(schema_<%=cid%>)))) {
					whetherExist_<%=cid%> = true;
					break;
				}
			}
            <%
            if(("CREATE_IF_NOT_EXISTS").equals(tableAction)) {
                %>
				if(!whetherExist_<%=cid%>) {
					java.sql.Statement stmtCreate_<%=cid%> = null;
					try{
						stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
						<%if(isLog4jEnabled){%>
							log.info("<%=cid%> - Creating table '" + tableName_<%=cid%> + "'.");
						<%}%>
						stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>)");
						<%if(isLog4jEnabled){%>
							log.info("<%=cid%> - Create table '" + tableName_<%=cid%> + "' has succeeded." );
						<%}%> 
					}catch(java.sql.SQLException e){
						if(<%=dieOnError%>){
							 throw new RuntimeException ("Failure to create table '" + tableName4Load_<%=cid%>  + "'. process terminated.");
						}else{
							<%if(isLog4jEnabled){%>
								log.error("<%=cid%> - Failure to create table '" + tableName4Load_<%=cid%>  + "'. process terminated.");
							<%}%>
							 e.printStackTrace();
						}
						
					}
				}                
                <%
            } else {
                %>
                if(whetherExist_<%=cid%>) {
                    java.sql.Statement stmtDrop_<%=cid%> = null;
                    try{
                    	stmtDrop_<%=cid%> = conn_<%=cid%>.createStatement();
						<%if(isLog4jEnabled){%>
							log.info("<%=cid%> - Droping table '" + tableName_<%=cid%> + "'.");
						<%}%>
                    	stmtDrop_<%=cid%>.execute("<%=manager.getDropTableSQL()%>");
						<%if(isLog4jEnabled){%>
							log.info("<%=cid%> - Drop table '" + tableName_<%=cid%> + "' has succeeded.");
						<%}%>
                    }catch(java.sql.SQLException e){
                    	if(<%=dieOnError%>){
							 throw new RuntimeException ("Failure to drop table '" + tableName4Load_<%=cid%>  + "'. process terminated.");
                    	}else{
							<%if(isLog4jEnabled){%>
								log.error("<%=cid%> - Failure to drop table '" + tableName4Load_<%=cid%> + "'. process terminated.");
							<%}%>
							 e.printStackTrace();
                    	}
                    }
                }
                java.sql.Statement stmtCreate_<%=cid%> = null;
                try{
                stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
				<%if(isLog4jEnabled){%>
					log.info("<%=cid%> - Creating table '" + tableName_<%=cid%> + "'.");
				<%}%>
                stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>)");
				<%if(isLog4jEnabled){%>
					log.info("<%=cid%> - Create table '" + tableName_<%=cid%> + "' has succeeded." );
				<%}%>           
                }catch(java.sql.SQLException e){
                	if(<%=dieOnError%>){
						 throw new RuntimeException ("Failure to create table '" + tableName4Load_<%=cid%>  + "'. process terminated.");
                	}else{
						<%if(isLog4jEnabled){%>
							log.error("<%=cid%> - Failure to create table '" + tableName4Load_<%=cid%> + "'. process terminated.");
						<%}%>
						 e.printStackTrace();
                	}
                }
            <%
            }
        } else if(("TRUNCATE").equals(tableAction)) {
            %>
            java.sql.Statement stmtClearCount_<%=cid%> = conn_<%=cid%>.createStatement();
            java.sql.ResultSet rsClearCount_<%=cid%> = stmtClearCount_<%=cid%>.executeQuery("<%=manager.getSelectionSQL()%>");
            java.sql.Statement stmtClear_<%=cid%> = conn_<%=cid%>.createStatement();
			<%if(isLog4jEnabled){%>
				log.info("<%=cid%> - Truncating table '" + tableName_<%=cid%> + "'.");
			<%}%>
            stmtClear_<%=cid%>.executeUpdate("<%=manager.getTruncateTableSQL()%>");
			<%if(isLog4jEnabled){%>
				log.info("<%=cid%> - Truncate table '" + tableName_<%=cid%> + "' has succeeded." );
			<%}%>
            while(rsClearCount_<%=cid%>.next()) {
                deletedCount_<%=cid%> = rsClearCount_<%=cid%>.getInt(1);
            }
            <% 
        } else if (("CLEAR").equals(tableAction)){
            %>
            java.sql.Statement stmtClear_<%=cid%> = null;
            try{
            	stmtClear_<%=cid%> = conn_<%=cid%>.createStatement();
				<%if(isLog4jEnabled){%>
					log.info("<%=cid%> - Clearing table '" + tableName_<%=cid%> + "'.");
				<%}%>
            	deletedCount_<%=cid%> = stmtClear_<%=cid%>.executeUpdate("<%=manager.getDeleteTableSQL()%>");
				<%if(isLog4jEnabled){%>
					log.info("<%=cid%>- Clear table '" + tableName_<%=cid%> +  "' has succeeded." );
				<%}%>
            	stmtClear_<%=cid%>.close();
            }catch(java.sql.SQLException e){
            	if(<%=dieOnError%>){
					 throw new RuntimeException ("Failure to clear table '" + tableName4Load_<%=cid%>  + "'. process terminated.");
            	}else{
					<%if(isLog4jEnabled){%>
						log.error("<%=cid%> - Failure to clear table '" + tableName4Load_<%=cid%> + "'. process terminated.");
					<%}%>
					 e.printStackTrace();
            	}
            }
            <%
        }
        log4jCodeGenerateUtil.close(node);
    }
%>

<%
	//---------------------------------------------------------------
	// construct the gpload thread
	// and write the GPLOAD YAML configuration file.
	//---------------------------------------------------------------
	

	
	String gploadCtrlFile = "\"gp_ctrl.txt\"";
	if (useExistingCtrlFile) {
		gploadCtrlFile = ctrlFile;
	} else {
		%>
		String delim_<%=cid%> = <%=fieldSeparator%>;
		String escape_<%=cid%> = <%=escapeChar%>;
		String quote_<%=cid%> = <%=quoteChar%>;
		delim_<%=cid%> = "\t".equals(delim_<%=cid%>) ? "\\t" : delim_<%=cid%>;
		
		java.io.PrintWriter gpctrl_<%=cid%> = new java.io.PrintWriter(new java.io.FileOutputStream(<%=gploadCtrlFile%>, false), true);
		gpctrl_<%=cid%>.println("---");
		gpctrl_<%=cid%>.println("VERSION: 1.0.0.1");
		gpctrl_<%=cid%>.println("DATABASE: " + <%=dbname%>);
		gpctrl_<%=cid%>.println("USER: " + <%=dbuser%>);
		gpctrl_<%=cid%>.println("HOST: " + <%=dbhost%>);
		gpctrl_<%=cid%>.println("PORT: " + <%=dbport%>);
		gpctrl_<%=cid%>.println("GPLOAD:");
		gpctrl_<%=cid%>.println("  INPUT:");
		gpctrl_<%=cid%>.println("    - SOURCE:");
		gpctrl_<%=cid%>.println("        FILE:");
		<% if (useNamedPiped) { %>
		gpctrl_<%=cid%>.println("          - " + (new com.infobright.io.NamedPipeFactory()).getNativePipeName(<%=namedPipeName%>));
		<% } else { %>
		gpctrl_<%=cid%>.println("          - " + <%=dataFile%>);
		<% } %>
		gpctrl_<%=cid%>.println("    - DELIMITER: '" + delim_<%=cid%> + "'");
		gpctrl_<%=cid%>.println("    - ESCAPE: '" + escape_<%=cid%> + "'");
		<% if (csvOption) { %>
		gpctrl_<%=cid%>.println("    - FORMAT: csv");
		gpctrl_<%=cid%>.println("    - QUOTE: '" + quote_<%=cid%> + "'");
		<%} else { %>
		gpctrl_<%=cid%>.println("    - FORMAT: text");
		<% } %>
		<% if (headerRow) { %>
		gpctrl_<%=cid%>.println("    - HEADER: true");
		<% } %>
		gpctrl_<%=cid%>.println("    - ENCODING: " + <%=encoding%>);
		<%
		// parsing the addiotional options
		for(Map<String, String> option : options) {
			String key = option.get("KEY");
			String value = option.get("VALUE");
			if(value != null && !("".equals(value))) {
				%>
				gpctrl_<%=cid%>.println("    - <%=key%>: " + <%=value%>);
				<%
			}
		}
		%>
		gpctrl_<%=cid%>.println("  OUTPUT: ");
		gpctrl_<%=cid%>.println("    - TABLE: '" + tableName4Load_<%=cid%>+"'");
		gpctrl_<%=cid%>.println("    - MODE: <%=dataAction.toLowerCase()%>");
		<%
		if ("UPDATE".equals(dataAction) || "MERGE".equals(dataAction)) {
			%>
			gpctrl_<%=cid%>.println("    - MATCH_COLUMNS:");
			<%
			for (Map<String, String> option : updateOptions) {
				String columnName = option.get("SCHEMA_COLUMN");
				boolean isMatchKey = option.get("MATCH_KEY").equals("true");
				if (isMatchKey) {
					%>
					gpctrl_<%=cid%>.println("      - <%=columnName%>");
					<%
				}
			}
			%>
			gpctrl_<%=cid%>.println("    - UPDATE_COLUMNS:");
			<%
			for (Map<String, String> option : updateOptions) {
				String columnName = option.get("SCHEMA_COLUMN");
				boolean isUpdateKey = option.get("UPDATE_KEY").equals("true");
				if (isUpdateKey) {
					%>
					gpctrl_<%=cid%>.println("      - <%=columnName%>");
					<%
				}
			}
			if (updateCondition != null && !("".equals(updateCondition) || "\"\"".equals(updateCondition))) {
				%>
				gpctrl_<%=cid%>.println("    - UPDATE_CONDITION: " + <%=updateCondition%>);
				<%
			}
		}
		%>
		gpctrl_<%=cid%>.close();
		<%
	}

	
	List<String> parametersList = new ArrayList();
	parametersList.add("\"-f\"");
	parametersList.add(gploadCtrlFile);
	parametersList.add("\"-h\"");
	parametersList.add(dbhost);
	parametersList.add("\"-p\"");
	parametersList.add(dbport);
	parametersList.add("\"-U\"");
	parametersList.add(dbuser);
	parametersList.add("\"-d\"");
	parametersList.add(dbname);
	if (logFile != null && !("".equals(logFile) || "\"\"".equals(logFile))) {
		parametersList.add("\"-l\"");
		parametersList.add(logFile);
	}
	parametersList.add("\"-v\"");

%>

	final StringBuilder gploadOutput_<%=cid%> = new StringBuilder(200);
	Thread gploadThread_<%=cid%> = new Thread() {
		public void run() {
			try {
				String[] envp = null;
				String[] cmds = new String[] {<%=gploadExePath%><%
						for (int i=0; i < parametersList.size(); i++) {
							%>,<%=parametersList.get(i)%><%
						}
						%>};
				Runtime rt = Runtime.getRuntime();
				final Process ps = rt.exec(cmds, envp);
				java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps.getInputStream()));
				String line = "";
				while ((line = reader.readLine()) != null) {
					gploadOutput_<%=cid%>.append(line);
					System.out.println(line);
				}
			}
			catch (java.lang.Exception e) {
				globalMap.put("<%=cid%>_GPLOAD_ERROR",e.getMessage());
				throw new RuntimeException(e.getMessage(),e.getCause());
			}
		}
	};

<%
	//-----------------------------------------------------------------
	// construct the output stream to write the data to
	// we don't need output stream the data file already exists and the
	// component is used in startable mode.
	//-----------------------------------------------------------------
	if(isLog4jEnabled){%>
		StringBuffer command_<%=cid%> = new StringBuffer(<%=gploadExePath%>);
		<%
		for (int i=0; i < parametersList.size(); i++) {
		%>
			command_<%=cid%>.append(<%=parametersList.get(i)%> +" ");
		<%
		}
		%>
	<%}
	if (hasInputRow) {
		if (useNamedPiped) {
		%>
			com.infobright.io.NamedPipe outputStream_<%=cid%> = (new com.infobright.io.NamedPipeFactory()).createServer(<%=namedPipeName%>, true, true, 1024000, 10000);
			gploadThread_<%=cid%>.start();
			// in Windows wait for named pipe to get opened by gpload.exe
			if ((new com.infobright.io.NamedPipeFactory()).isWindowsMode()) { 
				Thread.sleep(10000);
			}
		<%
		} else { //using data file
		%>
			java.io.BufferedOutputStream outputStream_<%=cid%> = new java.io.BufferedOutputStream(new java.io.FileOutputStream(<%=dataFile%>,false), 1024000);
		<%
		}
	} else { // no input connections
%>
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Executing '"+command_<%=cid %>.toString()+"'.");
		<%}%>
	gploadThread_<%=cid%>.start();
	gploadThread_<%=cid%>.join(0);
	globalMap.put("<%=cid%>_GPLOAD_OUTPUT", gploadOutput_<%=cid%>.toString());
	globalMap.put("<%=cid%>_NB_LINE", insertedCount_<%=cid%>);
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Execute '"+command_<%=cid %>.toString()+"' has finished.");
			log.info("<%=cid%> - Loaded records count:" + insertedCount_<%=cid%> + ".");
		<%}%>
<%
	}
%>
