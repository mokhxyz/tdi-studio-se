<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.MetadataTalendType    
    org.talend.core.model.metadata.MappingTypeRetriever 
    org.talend.core.model.process.IConnection
	org.talend.core.model.process.IConnectionCategory
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
    java.util.List
    java.util.ArrayList    
    java.lang.StringBuilder
    java.util.Map
    java.util.HashMap
" 
skeleton="../templates/db_output_bulk.skeleton"
%>

<% 
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();

	
	boolean csvOption = ElementParameterParser.getValue(node, "__CSV_OPTIONS__").equals("true");
	String fieldSeparator = ElementParameterParser.getValue(node, "__FIELD_SEPARATOR__");
	String escapeChar = ElementParameterParser.getValue(node, "__ESCAPE_CHAR__");
	String quoteChar = ElementParameterParser.getValue(node, "__QUOTE_CHAR__");
	List<Map<String, String>> options = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__OPTIONS__");
	List<IMetadataColumn> columnList = getColumnList(node);
	
	List< ? extends IConnection> inputConns = node.getIncomingConnections();
	List< ? extends IConnection> outputConns = node.getOutgoingConnections();
	boolean hasInputRow = false;
	boolean hasOutputRow = false;
	if (inputConns != null && inputConns.size() > 0) {
		for(IConnection conn : inputConns) {
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))
				if(!hasInputRow)
					hasInputRow = true;
		}
	}
	if (outputConns != null && outputConns.size() > 0) {
		for(IConnection conn : outputConns) {
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))
				if(!hasOutputRow)
					hasOutputRow = true;
		}
	}
	String inputRowName = (hasInputRow) ? inputConns.get(0).getName() : null;
	String outputRowName = (hasOutputRow) ? outputConns.get(0).getName() : null;
	
	// find null value token, boolean style and other options (if specified)
	String booleanStyle = "1_0";
	String nullValue = "\"\"";
	for(Map<String, String> option : options) {
		if ("NULL_AS".equals(option.get("KEY"))) {
			if ("''".equals(option.get("VALUE")) || "\"\"".equals(option.get("VALUE"))) {
				nullValue = "\"\"";
			} else {
				nullValue = option.get("VALUE");
			}
		}
	}
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	if (nullValue.startsWith("'") && nullValue.endsWith("'") && nullValue.length() > 2)
		nullValue = nullValue.substring(1,(nullValue.length()-1));
%>

<%
	if (hasInputRow) {
		%>
		StringBuilder sb_<%=cid%> = new StringBuilder(1000);
		String temp_<%=cid%> = null;
		String rowSepRepl_<%=cid%> = <%=escapeChar%> + "\n";
		String escapeCharRepl_<%=cid%> = <%=escapeChar%> + <%=escapeChar%>;
		String fieldSeparatorRepl_<%=cid%> = <%=escapeChar%> + <%=fieldSeparator%>;
		String null_<%=cid%> = <%=nullValue%>;
		if (null_<%=cid%>.startsWith("'") && null_<%=cid%>.endsWith("'") && null_<%=cid%>.length() > 2)
			null_<%=cid%> = null_<%=cid%>.substring(2,null_<%=cid%>.length()-1);
		<% if (csvOption) { %>
		String quoteCharRepl_<%=cid%> = <%=escapeChar%> + <%=quoteChar%>;
		<% } %>
		
		<%
		for (int i=0; i < columnList.size(); i++) {
			IMetadataColumn column = columnList.get(i);
			//String columnType = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
			JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
			boolean isPrimitive = JavaTypesManager.isJavaPrimitiveType(javaType, column.isNullable());
			String datePattern = column.getPattern() == null || column.getPattern().trim().length() == 0 ? "\"yyyy-MM-dd\"" : column.getPattern();
			String length = (column.getLength() == null ? "1" : String.valueOf(column.getLength()));
			String precision = (column.getPrecision() == null ? "6" : String.valueOf(column.getPrecision()));
			
			
			//------------------------------------------------------------------
			// if NO quoted values
			//------------------------------------------------------------------
			if (csvOption == false) {
				if (!isPrimitive) {
					%>
					if (<%=inputRowName%>.<%=column.getLabel()%> == null)
						sb_<%=cid%>.append(null_<%=cid%>);
					else {
					<%
				}
				if (javaType == JavaTypesManager.DATE) {
					%> sb_<%=cid %>.append(TalendDate.formatDate(<%=datePattern%>,<%=inputRowName%>.<%=column.getLabel()%>)); <%
				} else if (javaType == JavaTypesManager.DOUBLE || javaType == JavaTypesManager.FLOAT || javaType == JavaTypesManager.BIGDECIMAL) {
					%> sb_<%=cid %>.append(String.format("%-<%=length%>.<%=precision%>f",<%=inputRowName%>.<%=column.getLabel()%>)); <%
				} else if (javaType == JavaTypesManager.LONG) {
					%> sb_<%=cid %>.append(String.format("%-<%=length%>d",<%=inputRowName%>.<%=column.getLabel()%>)); <%
				} else if (javaType == JavaTypesManager.INTEGER) {
					%> sb_<%=cid %>.append(String.valueOf(<%=inputRowName%>.<%=column.getLabel()%>)); <%
				} else if (javaType == JavaTypesManager.BOOLEAN) {
					if (booleanStyle.equals("1_0")) {
						%> sb_<%=cid %>.append((<%=inputRowName%>.<%=column.getLabel()%> ? "1" : "0")); <%
					}
				} else {
					%> sb_<%=cid %>.append(String.valueOf(<%=inputRowName%>.<%=column.getLabel()%>)); <%
				}
				if (!isPrimitive) {
					%>
					} // close if equals to null
					<%
				}
			}
			
			
			//------------------------------------------------------------------
			// if quoted values and NOT require quotes
			//------------------------------------------------------------------
			if (csvOption == true) {
				if (!isPrimitive) {
					%>
					if (<%=inputRowName%>.<%=column.getLabel()%> == null)
						sb_<%=cid%>.append(null_<%=cid%>);
					else {
					<%
				}
				if (javaType == JavaTypesManager.DATE) {
					%> sb_<%=cid %>.append(TalendDate.formatDate(<%=datePattern%>,<%=inputRowName%>.<%=column.getLabel()%>)); <%
				} else if (javaType == JavaTypesManager.DOUBLE || javaType == JavaTypesManager.FLOAT || javaType == JavaTypesManager.BIGDECIMAL) {
					%> sb_<%=cid %>.append(String.format("%-<%=length%>.<%=precision%>f",<%=inputRowName%>.<%=column.getLabel()%>)); <%
				} else if (javaType == JavaTypesManager.LONG) {
					%> sb_<%=cid %>.append(String.format("%-<%=length%>d",<%=inputRowName%>.<%=column.getLabel()%>)); <%
				} else if (javaType == JavaTypesManager.INTEGER) {
					%> sb_<%=cid %>.append(String.valueOf(<%=inputRowName%>.<%=column.getLabel()%>)); <%
				} else if (javaType == JavaTypesManager.BOOLEAN) {
					if (booleanStyle.equals("1_0")) {
						%> sb_<%=cid %>.append((<%=inputRowName%>.<%=column.getLabel()%> ? "1" : "0")); <%
					}
				} else {
					%> 
					temp_<%=cid%> = String.valueOf(<%=inputRowName%>.<%=column.getLabel()%>);
					temp_<%=cid%> = temp_<%=cid%>.replace(<%=escapeChar%>,escapeCharRepl_<%=cid%>);
					temp_<%=cid%> = temp_<%=cid%>.replace(<%=quoteChar%>,quoteCharRepl_<%=cid%>);
					temp_<%=cid%> = temp_<%=cid%>.replace("\n",rowSepRepl_<%=cid%>);
					sb_<%=cid %>.append(<%=quoteChar%> + temp_<%=cid%> + <%=quoteChar%>);
					temp_<%=cid%> = null;
					<%
				}
				if (!isPrimitive) {
					%>
					} // close if equals to null
					<%
				}
			}
			
			if (i == (columnList.size() -1)) {
				%>
				sb_<%=cid%>.append("\n");
				<%
			} else {
				%>
				sb_<%=cid%>.append(<%=fieldSeparator%>);
				<%
			}
		}

		// ------------------------------------------
		// write the output to the outputstream
		// -------------------------------------------
		%>
		outputStream_<%=cid%>.write(sb_<%=cid%>.toString().getBytes());
		<%if(isLog4jEnabled){%>
            log4jSb_<%=cid%>.append(sb_<%=cid%>.toString());
			log.debug("<%=cid%> - Loading the record :" + log4jSb_<%=cid%>);
			log4jSb_<%=cid%>.delete(0,log4jSb_<%=cid%>.length());
		<%}%>
		sb_<%=cid%> = null;
		<%
		
		//----------------------------------------------
		// assign output row to input row
		//----------------------------------------------
		if (hasOutputRow) {
			for (IMetadataColumn column : columnList) {
				%>
				<%=outputRowName%>.<%=column.getLabel()%> = <%=inputRowName%>.<%=column.getLabel()%>;
				<%
			}
		}
		
	} // end of hasInputRow
%>
