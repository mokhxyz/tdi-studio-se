<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
" 
%>
<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%>
<%
		CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
		INode node = (INode)codeGenArgument.getArgument();
		String cid = node.getUniqueName();
		
		String accessToken = ElementParameterParser.getValue(node, "__ACCESS_TOKEN__");
		String refreshToken = ElementParameterParser.getValue(node, "__REFRESH_TOKEN__");
		
		String clientId = ElementParameterParser.getValue(node, "__CLIENT_ID__");
		String clientSecret = ElementParameterParser.getValue(node, "__CLIENT_SECRET__");
		
		String useProxy = ElementParameterParser.getValue(node, "__USE_PROXY__");
		String proxyHost = ElementParameterParser.getValue(node, "__PROXY_HOST__");
		String proxyPort = ElementParameterParser.getValue(node, "__PROXY_PORT__");
		final boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
				log4jFileUtil.componentStartInfo(node);
		String clientIdentifier = "\""+cid+"\"";
		
		String localeName = "\""+java.util.Locale.getDefault().toString()+"\"";
		
%>
	com.box.boxjavalibv2.BoxRESTClient <%=cid%>_httpClient = new com.box.boxjavalibv2.BoxRESTClient();
<%if("true".equals(useProxy)){%>   
	<%=cid%>_httpClient.setConnectionTimeOut(3000);
	String <%=cid%>_proxyHost = <%=proxyHost%>;
	if (null == <%=cid%>_proxyHost || <%=cid%>_proxyHost.isEmpty())
	{
		throw new Exception("Proxy host can not be empty");
	}
	org.apache.http.HttpHost <%=cid%>_proxy = new org.apache.http.HttpHost(<%=cid%>_proxyHost, <%=proxyPort%>, "http");
	<%=cid%>_httpClient.getRawHttpClient().getParams().setParameter(org.apache.http.conn.params.ConnRoutePNames.DEFAULT_PROXY, <%=cid%>_proxy);
<%}else{%>
<%}%>

	String <%=cid%>_accessToken = <%=accessToken%>;
	String <%=cid%>_refreshToken = <%=refreshToken%>;
	String <%=cid%>_clientId = <%=clientId%>;
	String <%=cid%>_clientSecret = <%=clientSecret%>;
	if (null == <%=cid%>_clientId || <%=cid%>_clientId.isEmpty() || null == <%=cid%>_clientSecret || <%=cid%>_clientSecret.isEmpty()) {
		throw new Exception("Client Id and secret can not be empty");
	}
	if((<%=cid%>_accessToken == null || "".equals(<%=cid%>_accessToken.trim())) && (<%=cid%>_refreshToken == null || "".equals(<%=cid%>_refreshToken.trim()))) {
	
		throw new Exception("One of Access token or Refresh token should be provided");
	} else {
		com.box.boxjavalibv2.BoxClient <%=cid%>_client = new com.box.boxjavalibv2.BoxClient(<%=cid%>_clientId, <%=cid%>_clientSecret, null, null, <%=cid%>_httpClient, new com.box.boxjavalibv2.BoxConfigBuilder().build());
		java.util.Map<String, Object> <%=cid%>_map = new java.util.HashMap<String, Object>();
	if (<%=cid%>_accessToken != null && !<%=cid%>_accessToken.isEmpty()  && !<%=cid%>_accessToken.trim().matches("\"?\"?")
	 && <%=cid%>_refreshToken != null && !<%=cid%>_refreshToken.isEmpty() && !<%=cid%>_refreshToken.trim().matches("\"?\"?")) {
		<%=cid%>_map.put(com.box.boxjavalibv2.dao.BoxOAuthToken.FIELD_ACCESS_TOKEN, <%=cid%>_accessToken);
		<%=cid%>_map.put(com.box.boxjavalibv2.dao.BoxOAuthToken.FIELD_REFRESH_TOKEN, <%=cid%>_refreshToken);
	    <%=cid%>_client.getOAuthDataController().setAutoRefreshOAuth(true);
	} else if (<%=cid%>_accessToken != null && !<%=cid%>_accessToken.isEmpty() && !<%=cid%>_accessToken.trim().matches("\"?\"?")) {
	    <%=cid%>_map.put(com.box.boxjavalibv2.dao.BoxOAuthToken.FIELD_ACCESS_TOKEN, <%=cid%>_accessToken);
	} else if (<%=cid%>_refreshToken != null && !"".equals(<%=cid%>_refreshToken.trim()) && !<%=cid%>_refreshToken.trim().matches("\"?\"?")) {
	    <%=cid%>_map.put(com.box.boxjavalibv2.dao.BoxOAuthToken.FIELD_REFRESH_TOKEN, <%=cid%>_refreshToken);
	    <%=cid%>_client.getOAuthDataController().setAutoRefreshOAuth(true);
	}
	  
	    <%=cid%>_client.authenticate(new com.box.boxjavalibv2.dao.BoxOAuthToken(<%=cid%>_map));
	    globalMap.put("conn_<%=cid%>",  <%=cid%>_client);
	}
    
	
	