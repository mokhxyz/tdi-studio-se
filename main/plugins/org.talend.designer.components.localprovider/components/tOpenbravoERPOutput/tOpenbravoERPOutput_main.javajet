<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType		
		java.util.List
		"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
    
	//String endpoint = ElementParameterParser.getValue(node, "__ENDPOINT__");
	String entityName = ElementParameterParser.getValue(node, "__ENTITYNAME__");
	//String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
	String usingExistingFile = ElementParameterParser.getValue(node, "__USE_EXISTING_FILE__");
	//String username = ElementParameterParser.getValue(node, "__USER__");


	String action = ElementParameterParser.getValue(node, "__ACTION__");
String conName = "";
List<IMetadataColumn> columns = null;
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
	if (metadata!=null) {	
		columns=metadata.getListColumns();
		List< ? extends IConnection> conns = node.getIncomingConnections();
		if(conns!=null && conns.size()>0){
			IConnection conn = conns.get(0);
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) { // test for connection type
				conName = conn.getName();
			}
		}
	}
}

if(conName != null && !"".equals(conName) && columns != null){
%>
nb_line_<%=cid%>++;
<%
	if(action.equals("REMOVE")){
%>
final java.net.URL url_<%=cid %> = new java.net.URL(urlString_<%=cid %> + <%=conName %>.id);
final java.net.HttpURLConnection hc_<%=cid %> = (java.net.HttpURLConnection) url_<%=cid %>.openConnection();
hc_<%=cid %>.setRequestMethod(method_<%=cid %>);
hc_<%=cid %>.setAllowUserInteraction(false);
hc_<%=cid %>.setDefaultUseCaches(false);
hc_<%=cid %>.setDoOutput(true);
hc_<%=cid %>.setDoInput(true);
hc_<%=cid %>.setInstanceFollowRedirects(true);
hc_<%=cid %>.setUseCaches(false);
hc_<%=cid %>.setRequestProperty("Content-Type", "text/xml");
hc_<%=cid %>.connect();
if(hc_<%=cid %>.getResponseCode() == 200){
	org.dom4j.io.SAXReader sr_<%=cid %> = new org.dom4j.io.SAXReader();
	java.io.InputStream is_<%=cid %> = hc_<%=cid %>.getInputStream();
	if(is_<%=cid %>.available()>0){
		org.dom4j.Document doc_<%=cid %> = sr_<%=cid %>.read(is_<%=cid %>);
		org.dom4j.io.OutputFormat format_<%=cid %> = org.dom4j.io.OutputFormat.createPrettyPrint();
      	format_<%=cid %>.setEncoding("UTF-8");
      	format_<%=cid %>.setTrimText(false);
      	java.io.StringWriter out_<%=cid %> = new java.io.StringWriter();
      	org.dom4j.io.XMLWriter writer_<%=cid %> = new org.dom4j.io.XMLWriter(out_<%=cid %>, format_<%=cid %>);
      	writer_<%=cid %>.write(doc_<%=cid %>);
      	writer_<%=cid %>.close();
       	String content_<%=cid %> = out_<%=cid %>.toString();
       	if(content_<%=cid %>.indexOf("<log>Removed business object") > 0){
       		nb_line_removed_<%=cid%>++;
       	}
    	is_<%=cid %>.close();
	}
}else if(hc_<%=cid %>.getResponseCode() == 401){
	nb_line_unauthorized_<%=cid%>++;
}else{
	nb_line_failed_<%=cid %>++;
}
hc_<%=cid %>.disconnect();
<%
	}else if(action.equals("UPDATE_CREATE")){//if(action.equals("REMOVE")){
%>
//Generate xml content begin.
sb_<%=cid %>.delete(xmlHeadLength_<%=cid %>, sb_<%=cid %>.length());
sb_<%=cid %>.append("<<%=entityName %>");
if(<%=conName %>.id != null && !<%=conName %>.id.equals("")){
	sb_<%=cid %>.append(" id=\"").append(<%=conName %>.id).append("\"");
}
if(<%=conName %>.identifier != null && !<%=conName %>.identifier.equals("")){
	sb_<%=cid %>.append(" identifier=\"").append(<%=conName %>.identifier).append("\"");
}
//attribut "reference" are always nullable.
if(<%=conName %>.reference != null){
	sb_<%=cid %>.append(" reference=\"").append(<%=conName %>.reference).append("\"");
}
sb_<%=cid %>.append(">\n");
<%
		for (int i=0;i<columns.size();i++) { // loop for columns
			IMetadataColumn column = columns.get(i);
			String columnName = column.getLabel();
			if(columnName.equals("identifier") || columnName.equals("reference")){
				continue;
			}
			//String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
			JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
			//String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
			///boolean isNotSetDefault = false;
			//String defaultValue=column.getDefault();
			//if(defaultValue!=null){
			//	isNotSetDefault = (defaultValue.length()==0);
			//}else{
			//	isNotSetDefault=true;
			//}
			String openbravoName = columnName;
			if(columnName.equals("Default")){
				openbravoName = "default";
			}
			if(columnName.equals("Transient")){
				openbravoName = "transient";
			}
			//boolean attribute = false;
			//if(openbravoName.equals("identifier") || openbravoName.equals("reference")){
			//	attribute = true;
			//}
			//list
			if(javaType == JavaTypesManager.LIST){
%>
if(<%=conName %>.<%=columnName %> == null || <%=conName %>.<%=columnName %>.size()<1){
	sb_<%=cid %>.append("<<%=openbravoName %> />\n");
}else{
	//Generate the full xml contents of the list............
	sb_<%=cid %>.append("<<%=openbravoName %>>\n");
	for(Object item_<%=cid %>:<%=conName %>.<%=columnName %>){
		String[] values_<%=i %>_<%=cid %> = ((String)item_<%=cid %>).split(";", 3);
		sb_<%=cid %>.append("<").append(values_<%=i %>_<%=cid %>[1]).append(" id=\"").append(values_<%=i %>_<%=cid %>[0]).append("\" identifier=\"").append(values_<%=i %>_<%=cid %>[2]).append("\">\n");
		sb_<%=cid %>.append("<id>").append(values_<%=i %>_<%=cid %>[0]).append("</id>\n");
		sb_<%=cid %>.append("</").append(values_<%=i %>_<%=cid %>[1]).append(">\n"); 
	}
	sb_<%=cid %>.append("</<%=openbravoName %>>\n");
}
<%
			//Reference Type
			}else if(javaType == JavaTypesManager.OBJECT){
				if(column.isNullable()){
%>
if(<%=conName %>.<%=columnName %> == null){
	sb_<%=cid %>.append("<<%=openbravoName %> />\n");
}else{
<%
				}
%>
String[] valueArray_<%=i %>_<%=cid %> = ((String)(<%=conName %>.<%=columnName %>)).split(";", 5);
sb_<%=cid %>.append("<<%=openbravoName %>");
for(int i=0; i<valueArray_<%=i %>_<%=cid %>.length;i++){
	if("".equals(valueArray_<%=i %>_<%=cid %>[i])){
		continue;
	}
	sb_<%=cid %>.append(" ").append(referenceAttributes_<%=cid %>[i]).append("=\"").append(valueArray_<%=i %>_<%=cid %>[i]).append("\"");
}
sb_<%=cid %>.append(" />\n");
<%
				if(column.isNullable()){
%>
}
<%
				}
			//Datetime Type: openbravo datatime pattern is: yyyy-MM-ddThh:mm:ss.SSSZ. But this id an invalid pattern in java.
			}else if(javaType == JavaTypesManager.DATE){
				if(column.isNullable()){
%>
if(<%=conName %>.<%=columnName %> == null){
	sb_<%=cid %>.append("<<%=openbravoName %> xsi:nil=\"true\" />\n");
}else{
<%
				}
%>
String dateString_<%=i %>_<%=cid %> = FormatterUtils.format_Date(<%=conName %>.<%=column.getLabel() %>, "yyyy-MM-dd hh:mm:ss.SSS");
dateString_<%=i %>_<%=cid %> = dateString_<%=i %>_<%=cid %>.replace(' ', 'T');
//dateString_<%=i %>_<%=cid %> = dateString_<%=i %>_<%=cid %>.replace('#', 'Z');
//(It seems)The attribute value of transient is always "true" for datetime.
sb_<%=cid %>.append("<<%=openbravoName %> transient=\"true\">");
sb_<%=cid %>.append(dateString_<%=i %>_<%=cid %>);
sb_<%=cid %>.append("Z</<%=openbravoName %>>\n");
<%
				if(column.isNullable()){
%>
}
<%
				}
			//for other types....
			}else{
				if(column.isNullable()){
%>
if(<%=conName %>.<%=columnName %> == null){
	sb_<%=cid %>.append("<<%=openbravoName %> xsi:nil=\"true\" />\n");
}else{
<%
				}
%>
sb_<%=cid %>.append("<<%=openbravoName %>>");
sb_<%=cid %>.append(<%=conName %>.<%=columnName %>);
sb_<%=cid %>.append("</<%=openbravoName %>>\n");
<%
				if(column.isNullable()){
%>
}
<%
				}
			}
		}//loop for columns end;
%>
sb_<%=cid %>.append("</<%=entityName %>>\n");
sb_<%=cid %>.append("</ob:Openbravo>\n");
//Generate xml content end.
final java.net.URL url_<%=cid %> = new java.net.URL(urlString_<%=cid %>);
final java.net.HttpURLConnection hc_<%=cid %> = (java.net.HttpURLConnection) url_<%=cid %>.openConnection();
hc_<%=cid %>.setRequestMethod(method_<%=cid %>);
hc_<%=cid %>.setAllowUserInteraction(false);
hc_<%=cid %>.setDefaultUseCaches(false);
hc_<%=cid %>.setDoOutput(true);
hc_<%=cid %>.setDoInput(true);
hc_<%=cid %>.setInstanceFollowRedirects(true);
hc_<%=cid %>.setUseCaches(false);
hc_<%=cid %>.setRequestProperty("Content-Type", "text/xml");
java.io.OutputStream os_<%=cid %> = hc_<%=cid %>.getOutputStream();
os_<%=cid %>.write(sb_<%=cid %>.toString().getBytes("UTF-8"));
//System.out.println(sb_<%=cid %>.toString());
os_<%=cid %>.flush();
os_<%=cid %>.close();
hc_<%=cid %>.connect();
if(hc_<%=cid %>.getResponseCode() == 200){
	org.dom4j.io.SAXReader sr_<%=cid %> = new org.dom4j.io.SAXReader();
	java.io.InputStream is_<%=cid %> = hc_<%=cid %>.getInputStream();
	if(is_<%=cid %>.available()>0){
		org.dom4j.Document doc_<%=cid %> = sr_<%=cid %>.read(is_<%=cid %>);
		org.dom4j.io.OutputFormat format_<%=cid %> = org.dom4j.io.OutputFormat.createPrettyPrint();
      	format_<%=cid %>.setEncoding("UTF-8");
      	format_<%=cid %>.setTrimText(false);
      	java.io.StringWriter out_<%=cid %> = new java.io.StringWriter();
      	org.dom4j.io.XMLWriter writer_<%=cid %> = new org.dom4j.io.XMLWriter(out_<%=cid %>, format_<%=cid %>);
      	writer_<%=cid %>.write(doc_<%=cid %>);
      	writer_<%=cid %>.close();
       	String content_<%=cid %> = out_<%=cid %>.toString();
       	if(content_<%=cid %>.indexOf("Updated 1") > 0){
       		nb_line_updated_<%=cid%>++;
       	}
       	if(content_<%=cid %>.indexOf("Inserted 1") > 0){
       		nb_line_created_<%=cid%>++;
       	}
    	is_<%=cid %>.close();
	}
}else if(hc_<%=cid %>.getResponseCode() == 401){
	nb_line_unauthorized_<%=cid%>++;
}else{
	nb_line_failed_<%=cid %>++;
}
hc_<%=cid %>.disconnect();
<%
	}//end if(action.equals("REMOVE")){
}	
%>