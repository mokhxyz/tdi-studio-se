<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
    
	String endpoint = ElementParameterParser.getValue(node, "__ENDPOINT__");
	String entityName = ElementParameterParser.getValue(node, "__ENTITYNAME__");
	//String encoding = ElementParameterParser.getValue(node, "__ENCODING__");

	String username = ElementParameterParser.getValue(node, "__USER__");


	String action = ElementParameterParser.getValue(node, "__ACTION__");
	String usingExistingFile = ElementParameterParser.getValue(node, "__USE_EXISTING_FILE__");
	String fileName = ElementParameterParser.getValue(node, "__FILENAME__");
	
	String passwordFieldName = "__PASS__";
%>
	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
<%

	if("UPDATE_CREATE".equals(action) && "true".equals(usingExistingFile)){
%>
final String ob_url_<%=cid %> = <%=endpoint %>;
final String login_<%=cid %> = <%=username %>;

final String pwd_<%=cid %> = decryptedPassword_<%=cid%>;
final String method_<%=cid %> = "POST";
final String file_<%=cid %> = <%=fileName %>;
java.net.Authenticator.setDefault(new java.net.Authenticator() {
	protected java.net.PasswordAuthentication getPasswordAuthentication() {
		return new java.net.PasswordAuthentication(login_<%=cid %>, pwd_<%=cid %>.toCharArray());
	}
});
final java.net.URL url_<%=cid %> = new java.net.URL(ob_url_<%=cid %>);
final java.net.HttpURLConnection hc_<%=cid %> = (java.net.HttpURLConnection) url_<%=cid %>.openConnection();
hc_<%=cid %>.setRequestMethod(method_<%=cid %>);
hc_<%=cid %>.setAllowUserInteraction(false);
hc_<%=cid %>.setDefaultUseCaches(false);
hc_<%=cid %>.setDoOutput(true);
hc_<%=cid %>.setDoInput(true);
hc_<%=cid %>.setInstanceFollowRedirects(true);
hc_<%=cid %>.setUseCaches(false);
hc_<%=cid %>.setRequestProperty("Content-Type", "text/xml");
byte[] bytes_<%=cid %> = new byte[1024];
java.io.InputStream is_<%=cid %> = new java.io.BufferedInputStream(new java.io.FileInputStream(file_<%=cid %>));
java.io.OutputStream os_<%=cid %> = hc_<%=cid %>.getOutputStream();
int read_<%=cid %> = 0;
do{
	read_<%=cid %> = is_<%=cid %>.read(bytes_<%=cid %>);
	if(read_<%=cid %>>0){
		os_<%=cid %>.write(bytes_<%=cid %>, 0, read_<%=cid %>);
	}
}while(read_<%=cid %> >= 1024);
os_<%=cid %>.flush();
os_<%=cid %>.close();
is_<%=cid %>.close();
hc_<%=cid %>.connect();
if(hc_<%=cid %>.getResponseCode() == 200){
	org.dom4j.io.SAXReader sr_<%=cid %> = new org.dom4j.io.SAXReader();
	is_<%=cid %> = hc_<%=cid %>.getInputStream();
	if(is_<%=cid %>.available()>0){
		org.dom4j.Document doc_<%=cid %> = sr_<%=cid %>.read(is_<%=cid %>);
		org.dom4j.io.OutputFormat format_<%=cid %> = org.dom4j.io.OutputFormat.createPrettyPrint();
      	format_<%=cid %>.setEncoding("UTF-8");
      	format_<%=cid %>.setTrimText(false);
      	java.io.StringWriter out_<%=cid %> = new java.io.StringWriter();
      	org.dom4j.io.XMLWriter writer_<%=cid %> = new org.dom4j.io.XMLWriter(out_<%=cid %>, format_<%=cid %>);
      	writer_<%=cid %>.write(doc_<%=cid %>);
      	writer_<%=cid %>.close();
       	String content_<%=cid %> = out_<%=cid %>.toString();
       	System.out.println(content_<%=cid %>);
	}
}else{
	System.out.println("HTTP Response Code: "+hc_<%=cid %>.getResponseCode());
}
hc_<%=cid %>.disconnect();
<%
	}else{
%>
int nb_line_<%=cid%> = 0;
int nb_line_updated_<%=cid%> = 0;
int nb_line_created_<%=cid%> = 0;
int nb_line_removed_<%=cid%> = 0;
int nb_line_unauthorized_<%=cid %> = 0;
int nb_line_failed_<%=cid %> = 0;
final String ob_url_<%=cid %> = <%=endpoint %>;
final String login_<%=cid %> = <%=username %>;
final String pwd_<%=cid %> = decryptedPassword_<%=cid%>;
final String entity_<%=cid %> = "<%=entityName %>";
java.net.Authenticator.setDefault(new java.net.Authenticator() {
	protected java.net.PasswordAuthentication getPasswordAuthentication() {
		return new java.net.PasswordAuthentication(login_<%=cid %>, pwd_<%=cid %>.toCharArray());
	}
});
String urlString_<%=cid %> = ob_url_<%=cid %>.trim() + "/" + entity_<%=cid %>.trim() + "/";
<%
	if(action.equals("REMOVE")){
%>
final String method_<%=cid %> = "DELETE";
<%
	}else if(action.equals("UPDATE_CREATE")){//if(action.equals("REMOVE")){
%>
StringBuilder sb_<%=cid %> = new StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<ob:Openbravo xmlns:ob=\"http://www.openbravo.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n");
int xmlHeadLength_<%=cid %> = sb_<%=cid %>.length();
final String method_<%=cid %> = "POST";
//The order will be the same as the one in tOpenbravoERPInput.
final String[] referenceAttributes_<%=cid %> = {"id", "entity-name", "identifier", "transient", "inactive"};
<%
	}//end
}
%>