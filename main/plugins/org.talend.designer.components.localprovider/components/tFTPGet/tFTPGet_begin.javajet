<%@ jet 
  imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
    org.talend.core.model.process.IElementParameter
    org.talend.core.model.utils.NodeUtil 
  "
%>
<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%> 
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
String host = ElementParameterParser.getValue(node, "__HOST__");
String port = ElementParameterParser.getValue(node, "__PORT__");
String user = ElementParameterParser.getValue(node, "__USERNAME__");

boolean use_encoding = "true".equals(ElementParameterParser.getValue(node, "__USE_ENCODING__"));

String overwrite = ElementParameterParser.getValue(node, "__OVERWRITE__");
String sftpoverwrite =ElementParameterParser.getValue(node, "__SFTPOVERWRITE__");
String localdir = ElementParameterParser.getValue(node, "__LOCALDIR__");  
String remotedir = ElementParameterParser.getValue(node, "__REMOTEDIR__");
String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
String authMethod = ElementParameterParser.getValue(node,"__AUTH_METHOD__");
String privateKey = ElementParameterParser.getValue(node,"__PRIVATEKEY__");

List<Map<String, String>> files = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FILES__");
boolean useProxy = ("true").equals(ElementParameterParser.getValue(node,"__USE_PROXY__"));
String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
String proxyUser = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");

String keystoreFile = ElementParameterParser.getValue(node,"__KEYSTORE_FILE__");

boolean append = "true".equals(ElementParameterParser.getValue(node, "__APPEND__"));
String connectMode = ElementParameterParser.getValue(node,"__CONNECT_MODE__");
String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
String useExistingConn = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");
boolean moveToCurrentDir = ("true").equals(ElementParameterParser.getValue(node, "__MOVE_TO_THE_CURRENT_DIRECTORY__"));
boolean bPrintMsg = "true".equals(ElementParameterParser.getValue(node, "__PRINT_MESSAGE__"));
String securityMode = ElementParameterParser.getValue(node, "__SECURITY_MODE__");
boolean sftp = false;
boolean ftps = false;

boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
String passwordFieldName = "";

if ("true".equals(useExistingConn)) {
  List<? extends INode> nodeList = node.getProcess().getGeneratingNodes();

  for(INode n : nodeList) {
    if (n.getUniqueName().equals(connection)) {
      sftp = ("true").equals(ElementParameterParser.getValue(n, "__SFTP__"));
      ftps = ("true").equals(ElementParameterParser.getValue(n, "__FTPS__"));
    }
  }
} else {
  sftp = ("true").equals(ElementParameterParser.getValue(node, "__SFTP__"));
  ftps = ("true").equals(ElementParameterParser.getValue(node, "__FTPS__"));
}
%>
int nb_file_<%=cid%> = 0;
<%
//The following part support the socks proxy for FTP and SFTP (Socks V4 or V5, they are all OK). 
//And it can not work with the FTP proxy directly, only support the socks proxy.

if (useProxy){
%>
  java.util.Properties props_<%=cid%> = System.getProperties();
  props_<%=cid%>.put("socksProxyPort", <%=proxyPort %>);
  props_<%=cid%>.put("socksProxyHost", <%=proxyHost %>);
  props_<%=cid%>.put("java.net.socks.username", <%=proxyUser %>);
  
<%
passwordFieldName = "__PROXY_PASSWORD__";
if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
%> 
  String decryptedProxyPassword_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
<%} else {%>
  String decryptedProxyPassword_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
<%}%>

  props_<%=cid%>.put("java.net.socks.password", decryptedProxyPassword_<%=cid%>);        
<%
} 

if (sftp) { // *** sftp *** //
%>  
	final java.util.List<String> msg_<%=cid%> = new java.util.ArrayList<String>();

	<%
		if ("false".equals(useExistingConn)) {
  %>
			class MyUserInfo_<%=cid %> implements com.jcraft.jsch.UserInfo, com.jcraft.jsch.UIKeyboardInteractive {
			
		        <%
                passwordFieldName = "__PASSPHRASE__";
                if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
                %> 
              		String decryptedPassphrase_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
                <%} else {%>
              		String decryptedPassphrase_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
                <%}%>
			
				String passphrase_<%=cid %> = decryptedPassphrase_<%=cid%>;

				public String getPassphrase() { return passphrase_<%=cid %>; }

				public String getPassword() { return null; } 

				public boolean promptPassword(String arg0) { return true; } 

				public boolean promptPassphrase(String arg0) { return true; } 

				public boolean promptYesNo(String arg0) { return true; } 

				public void showMessage(String arg0) { } 

				public String[] promptKeyboardInteractive(String destination, String name, String instruction, String[] prompt,
				boolean[] echo) {
				
				<%
            	passwordFieldName = "__PASSWORD__";
            	%> 
            	
            	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
            	
					String[] password_<%=cid%> = {decryptedPassword_<%=cid%>};
					return password_<%=cid%>;
				}
			}; 

			final com.jcraft.jsch.UserInfo defaultUserInfo_<%=cid%> = new MyUserInfo_<%=cid %>();
  <%
		}
  %>

			class MyProgressMonitor_<%=cid%> implements com.jcraft.jsch.SftpProgressMonitor {

				private long percent = -1;

				public void init(int op, String src, String dest, long max) {}

				public boolean count(long count) {return true;}

				public void end() {}
			} 

			class SFTPGetter_<%=cid%> {

				private com.jcraft.jsch.ChannelSftp cnlSFTP = null;

				private com.jcraft.jsch.SftpProgressMonitor monitor = null;

				private int count = 0;

				public void getAllFiles(String remoteDirectory, String localDirectory) throws com.jcraft.jsch.SftpException {
      
					cnlSFTP.cd(remoteDirectory);
					java.util.Vector sftpFiles = cnlSFTP.ls(".");

					for (Object sftpFile : sftpFiles) {
						com.jcraft.jsch.ChannelSftp.LsEntry lsEntry = (com.jcraft.jsch.ChannelSftp.LsEntry) sftpFile;
						com.jcraft.jsch.SftpATTRS attrs = lsEntry.getAttrs();

						if ((".").equals(lsEntry.getFilename()) || ("..").equals(lsEntry.getFilename())) {
						continue;
						}

						if (attrs.isDir()) {
							java.io.File localFile = new java.io.File(localDirectory + "/" + lsEntry.getFilename());
							if (!localFile.exists()) {
								localFile.mkdir();
							}
							getAllFiles(remoteDirectory + "/" + lsEntry.getFilename(), localDirectory + "/" + lsEntry.getFilename());
							cnlSFTP.cd(remoteDirectory);
						} else if (!attrs.isLink()) {
							downloadFile(localDirectory, lsEntry.getFilename());
						}
					}
				}

				public void getFiles(String remoteDirectory, String localDirectory, String maskStr) throws com.jcraft.jsch.SftpException {
      
					cnlSFTP.cd(remoteDirectory);
					java.util.Vector sftpFiles = cnlSFTP.ls(".");

					for (Object sftpFile : sftpFiles) {
						com.jcraft.jsch.ChannelSftp.LsEntry lsEntry = (com.jcraft.jsch.ChannelSftp.LsEntry) sftpFile;
						com.jcraft.jsch.SftpATTRS attrs = lsEntry.getAttrs();

						if ((".").equals(lsEntry.getFilename()) || ("..").equals(lsEntry.getFilename())) {
							continue;
						}

						if (!attrs.isDir() && !attrs.isLink()) {

							if (lsEntry.getFilename().matches(maskStr)) {
            					downloadFile(localDirectory, lsEntry.getFilename());
          					}
        				}
      				}
				}

    			public void chdir(String path) throws com.jcraft.jsch.SftpException{
					cnlSFTP.cd(path);
				}

				public String pwd() throws com.jcraft.jsch.SftpException{
					return cnlSFTP.pwd();
				}

				private void downloadFile(String localFileName, String remoteFileName) throws com.jcraft.jsch.SftpException {

					try {
        				cnlSFTP.get(remoteFileName, localFileName, monitor,
          <%
          				if (("overwrite").equals(sftpoverwrite)){
          %>          
            				com.jcraft.jsch.ChannelSftp.OVERWRITE
          <%
         				} else if (("append").equals(sftpoverwrite)){
          %>
            				com.jcraft.jsch.ChannelSftp.APPEND
          <%
          				} else if (("resume").equals(sftpoverwrite)){
          %>
            				com.jcraft.jsch.ChannelSftp.RESUME
          <%
          				}
          %>
					);
						<%if(isLog4jEnabled){%>
							log.debug("<%=cid%> - Downloaded file " + (count +1) +  " : '" + remoteFileName + "' successfully.");
						<%}%>
        				msg_<%=cid%>.add("file [" + remoteFileName + "] downloaded successfully.");
        				<%if (bPrintMsg) {%>
          					System.out.println("file [" + remoteFileName + "] downloaded successfully.");
        				<%}%>
				    	globalMap.put("<%=cid %>_CURRENT_STATUS", "File transfer OK.");
			      	} catch (com.jcraft.jsch.SftpException e){

        				if (e.id == com.jcraft.jsch.ChannelSftp.SSH_FX_FAILURE || e.id == com.jcraft.jsch.ChannelSftp.SSH_FX_BAD_MESSAGE) {
							msg_<%=cid%>.add("file [" + remoteFileName + "] downloaded unsuccessfully.");
							globalMap.put("<%=cid %>_CURRENT_STATUS", "File transfer fail.");
						}
				        throw e;
					}
					count++;
				}
			}

  <%
			if ("true".equals(useExistingConn)){
				String conn= "conn_" + connection;
    %>
				com.jcraft.jsch.ChannelSftp c_<%=cid%> = (com.jcraft.jsch.ChannelSftp)globalMap.get("<%=conn %>");
				<%if(isLog4jEnabled){%>
					if(c_<%=cid%>!=null && c_<%=cid%>.getSession()!=null) {
						log.info("<%=cid%> - Use an existing connection.Connection username: " + c_<%=cid%>.getSession().getUserName() + ", Connection hostname: " + c_<%=cid%>.getSession().getHost() + ", Connection port: " + c_<%=cid%>.getSession().getPort() + "."); 
					}
				<%}%>
				if(c_<%=cid%>.getHome()!=null && !c_<%=cid%>.getHome().equals(c_<%=cid%>.pwd())){
			  		c_<%=cid%>.cd(c_<%=cid%>.getHome());
			  	}
  <%
			} else{
  %>    
				com.jcraft.jsch.JSch jsch_<%=cid%>=new com.jcraft.jsch.JSch(); 

				<%if ("PUBLICKEY".equals(authMethod)){%>
					<%if(isLog4jEnabled){%>
						log.info("<%=cid%> - SFTP authentication using a public key.");
						log.debug("<%=cid%> - Private key: '" + <%=privateKey%> + "'.");
					  <%}%>
    				jsch_<%=cid%>.addIdentity(<%=privateKey %>, defaultUserInfo_<%=cid%>.getPassphrase());
			    <%}%>
			    
				com.jcraft.jsch.Session session_<%=cid%>=jsch_<%=cid%>.getSession(<%=user%>, <%=host%>, <%=port%>);
				session_<%=cid%>.setConfig("PreferredAuthentications", "publickey,password,keyboard-interactive,gssapi-with-mic");

			    <%if("PASSWORD".equals(authMethod)){%>
					<%if(isLog4jEnabled){%>
						log.info("<%=cid%> - SFTP authentication using a password.");
					<%}%>
					
        			<%
                	passwordFieldName = "__PASSWORD__";
                	%> 
                	
                	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
                	
				      session_<%=cid%>.setPassword(decryptedPassword_<%=cid%>); 
			    <%}%>

				session_<%=cid%>.setUserInfo(defaultUserInfo_<%=cid%>); 
				<%if (!useProxy) {%>
				  	if(("true").equals(System.getProperty("http.proxySet")) ){
				  		com.jcraft.jsch.ProxyHTTP proxy_<%=cid%> = new com.jcraft.jsch.ProxyHTTP(System.getProperty("http.proxyHost"),Integer.parseInt(System.getProperty("http.proxyPort")));
				  		if(!"".equals(System.getProperty("http.proxyUser"))){
				  			proxy_<%=cid%>.setUserPasswd(System.getProperty("http.proxyUser"),System.getProperty("http.proxyPassword"));
				  		}
				  		session_<%=cid%>.setProxy(proxy_<%=cid%>);
				  	}
				<%}%>
				<%if(isLog4jEnabled){%>
					log.info("<%=cid%> - Attempt to connect to '" + <%=host %> + "' with username: '" + <%=user%> + "'.");
				<%}%>
			    session_<%=cid%>.connect();
			    com.jcraft.jsch. Channel channel_<%=cid%>=session_<%=cid%>.openChannel("sftp");
			    channel_<%=cid%>.connect();
				<%if(isLog4jEnabled){%>
					log.info("<%=cid%> - Connect to '" + <%=host %> + "' has succeeded.");
				<%}%>
			    com.jcraft.jsch.ChannelSftp c_<%=cid%>=(com.jcraft.jsch.ChannelSftp)channel_<%=cid%>;
			    
			    <%if(use_encoding) {%>
			    	c_<%=cid%>.setFilenameEncoding(<%=encoding%>);
			    <%}%>
  <%
			}
  %>
			com.jcraft.jsch.SftpProgressMonitor monitor_<%=cid%> = new MyProgressMonitor_<%=cid%>();
			SFTPGetter_<%=cid%> getter_<%=cid%> = new SFTPGetter_<%=cid%>();
			getter_<%=cid%>.cnlSFTP = c_<%=cid%>;
			getter_<%=cid%>.monitor = monitor_<%=cid%>;
			String remotedir_<%=cid %> = <%=remotedir%>;
			c_<%=cid%>.cd(remotedir_<%=cid %>);
<%
} else if (!ftps) { // *** ftp *** //
%>  
	final com.enterprisedt.net.ftp.TransferCompleteStrings msg_<%=cid%> = new com.enterprisedt.net.ftp.TransferCompleteStrings();

	class FTPGetter_<%=cid%> {
		private com.enterprisedt.net.ftp.FTPClient ftpClient = null;
	    private int count = 0;

    	public void getAllFiles(String remoteDirectory, String localDirectory) throws java.io.IOException, 
		com.enterprisedt.net.ftp.FTPException, java.text.ParseException {

			ftpClient.chdir(remoteDirectory);
			String path = ftpClient.pwd();
			String[] ftpFileNames = null;
			com.enterprisedt.net.ftp.FTPFile[] ftpFiles = null;

			try{
			//use dir() for Bug9562 with FTP server in AS400
				ftpFileNames = ftpClient.dir(null, false);
	        //Bug 13272, the same as getFiles().
    		} catch (com.enterprisedt.net.ftp.FTPException e){
				<%if(isLog4jEnabled){%>
					log.warn("<%=cid%> - " + e.getMessage());
				<%}%>
        		ftpFileNames = null;
		        ftpFiles = ftpClient.dirDetails(".");
			}

			//if dirDetails(...) doesn't work, then use dir(...), distinguish file type by FTPException

			if ((ftpFiles == null) && (ftpFileNames != null)){
	        	//if the file is folder, catch the FTPException and recur
    	    	for (String ftpFileName : ftpFileNames){
        			try {
            			downloadFile(localDirectory + "/" + ftpFileName,ftpFileName);
          			} catch (com.enterprisedt.net.ftp.FTPException e) {
						<%if(isLog4jEnabled){%>
							log.warn("<%=cid%> - " + e.getMessage());
						<%}%>
      		      		java.io.File localFile = new java.io.File(localDirectory + "/" + ftpFileName);
            
        	    		if (!localFile.exists()) {
        	      			localFile.mkdir();
        	    		}
			            getAllFiles(path + "/" + ftpFileName, localDirectory + "/" + ftpFileName);
      		  		    ftpClient.chdir(path);
					}
				}
			} else {
				for (com.enterprisedt.net.ftp.FTPFile ftpFile : ftpFiles) {

					if (ftpFile.isDir()) {
						if ((!(".").equals(ftpFile.getName())) && (!("..").equals(ftpFile.getName()))) {
							java.io.File localFile = new java.io.File(localDirectory + "/" + ftpFile.getName());

							if (!localFile.exists()) {
				                localFile.mkdir();
							}
							getAllFiles(path + "/" + ftpFile.getName(), localDirectory + "/" + ftpFile.getName());
							ftpClient.chdir(path);
			            }
					} else if (!ftpFile.isLink()) {
			            downloadFile(localDirectory + "/" + ftpFile.getName(),ftpFile.getName());
					}
				}
			}
		}

		public void getFiles(String remoteDirectory, String localDirectory, String maskStr) throws java.io.IOException,
		com.enterprisedt.net.ftp.FTPException, java.text.ParseException {
			ftpClient.chdir(remoteDirectory);
			String[] ftpFileNames = null;
			com.enterprisedt.net.ftp.FTPFile[] ftpFiles = null;

			try {
				//use dir() for Bug9562 with FTP server in AS400 (the same way as getAllFiles())
		        ftpFileNames = ftpClient.dir(null, false);
        		//Bug 13272, if dir() throw exception, use dirDetails().
			} catch (com.enterprisedt.net.ftp.FTPException e){
			<%if(isLog4jEnabled){%>
				log.warn("<%=cid%> - " + e.getMessage());
			<%}%>
	        ftpFileNames = null;
    	    ftpFiles = ftpClient.dirDetails(".");
      		}
			//if dirDetails(...) doesn't work, then use dir(...), but can not distinguish file type

			if ((ftpFiles == null) && (ftpFileNames != null)){
				for (String ftpFileName : ftpFileNames) {
					if (ftpFileName.matches(maskStr)) {
						downloadFile(localDirectory + "/" + ftpFileName,ftpFileName);
					}
				}
			} else{

		        for (com.enterprisedt.net.ftp.FTPFile ftpFile : ftpFiles) {

					if (!ftpFile.isDir() && !ftpFile.isLink()) {
						String fileName = ftpFile.getName();

			            if (fileName.matches(maskStr)) {
            				downloadFile(localDirectory + "/" + fileName,fileName);
			            }
          			}
        		}
      		}
		}

	    public void chdir(String path) throws java.io.IOException,  com.enterprisedt.net.ftp.FTPException{
    		ftpClient.chdir(path);
		}

		public String pwd() throws java.io.IOException,  com.enterprisedt.net.ftp.FTPException{
			return ftpClient.pwd();
		}

		private void downloadFile(String localFileName, String remoteFileName) throws java.io.IOException, com.enterprisedt.net.ftp.FTPException {
			java.io.File localFile = new java.io.File(localFileName);

			try {
				<%if (append) {%>
					java.io.FileOutputStream fout = new java.io.FileOutputStream(localFile, true);
			        ftpClient.get(fout, remoteFileName);
					<%if(isLog4jEnabled){%>
						log.debug("<%=cid%> - Downloaded file " + (count +1) +  " : '" + remoteFileName + "' successfully.");
					<%}%>
          			msg_<%=cid%>.add("file [" + remoteFileName + "] downloaded successfully.");
					<%if (bPrintMsg) {%>
			            System.out.println("file [" + remoteFileName + "] downloaded successfully.");
          			<%}%>
					globalMap.put("<%=cid %>_CURRENT_STATUS", "File transfer OK.");
        <%
		        } else if ("never".equals(overwrite)){
        %>
        			if (!localFile.exists()) {
						ftpClient.get(localFileName, remoteFileName);
						<%if(isLog4jEnabled){%>
							log.debug("<%=cid%> - Downloaded file " + (count +1) +  " : '" + remoteFileName + "' successfully.");
						<%}%>
			            msg_<%=cid%>.add("file [" + remoteFileName + "] downloaded successfully.");
            			<%if (bPrintMsg) {%>
							System.out.println("file [" + remoteFileName + "] downloaded successfully.");
			            <%}%>
            			globalMap.put("<%=cid %>_CURRENT_STATUS", "File transfer OK.");
					} else { 
                        <%if(isLog4jEnabled){%>
                               log.info("<%= cid %> - file ["+ remoteFileName +"] exit transmission.");
                        <%}%>
						msg_<%=cid%>.add("file ["+ remoteFileName +"] exit transmission.");
			            globalMap.put("<%=cid %>_CURRENT_STATUS", "No file transfered.");
					}
        <%
				} else if ("always".equals(overwrite)){
        %>
					ftpClient.get(localFileName, remoteFileName);
					<%if(isLog4jEnabled){%>
						log.debug("<%=cid%> - Downloaded file " + (count +1) +  " : '" + remoteFileName + "' successfully.");
					<%}%>
					msg_<%=cid%>.add("file [" + remoteFileName + "] downloaded successfully.");
					<%if (bPrintMsg) {%>
						System.out.println("file [" + remoteFileName + "] downloaded successfully.");
					<%}%>
        <%
				} else if ("size_differ".equals(overwrite)) {
        %>
					if (localFile.exists()) {
						long ftpSize = ftpClient.size(remoteFileName);
			            long localSize = localFile.length();

			            if (ftpSize != localSize) {
							ftpClient.get(localFileName, remoteFileName);
							<%if(isLog4jEnabled){%>
								log.debug("<%=cid%> - Downloaded file " + (count +1) +  " : '" + remoteFileName + "' successfully.");
							<%}%>
            				msg_<%=cid%>.add("file [" + remoteFileName + "] downloaded successfully.");
							<%if (bPrintMsg) {%>
								System.out.println("file [" + remoteFileName + "] downloaded successfully.");
							<%}%>
							globalMap.put("<%=cid %>_CURRENT_STATUS", "File transfer OK.");
			            } else {
			                 <%if(isLog4jEnabled){%>
                                    log.info("<%= cid %> - file ["+ remoteFileName +"] exit transmission.");
                             <%}%>
            				msg_<%=cid%>.add("file ["+ remoteFileName +"] exit transmission.");
							globalMap.put("<%=cid %>_CURRENT_STATUS", "No file transfered.");
			            }
					} else {
						ftpClient.get(localFileName, remoteFileName);
						<%if(isLog4jEnabled){%>
								log.debug("<%=cid%> - Downloaded file " + (count +1) +  " : '" + remoteFileName + "' successfully.");
						<%}%>
				 		msg_<%=cid%>.add("file [" + remoteFileName + "] downloaded successfully.");
						<%if (bPrintMsg) {%>
							System.out.println("file [" + remoteFileName + "] downloaded successfully.");
			            <%}%>
            			globalMap.put("<%=cid %>_CURRENT_STATUS", "File transfer OK.");
					}
        <%
		        }
        %>
			} catch (com.enterprisedt.net.ftp.FTPException e) {
		        msg_<%=cid%>.add("file [" + remoteFileName + "] downloaded unsuccessfully.");
        		globalMap.put("<%=cid %>_CURRENT_STATUS", "File transfer fail.");
        		throw e;
      		}
		      count++;
    	}
	}
	com.enterprisedt.net.ftp.FTPClient ftp_<%=cid %> = null;

  <%  
	if ("true".equals(useExistingConn)){
    	String conn= "conn_" + connection;
    %>
	    ftp_<%=cid %> = (com.enterprisedt.net.ftp.FTPClient)globalMap.get("<%=conn %>");
  		<%if(!moveToCurrentDir){%>
  			String rootDir_<%=cid %> = ftp_<%=cid %>.pwd();
	  	<%}%>
		<%if(isLog4jEnabled){%>
			if(ftp_<%=cid %>!=null) {
				log.info("<%=cid%> - Uses an existing connection. Connection hostname: " + ftp_<%=cid %>.getRemoteHost() + ", Connection port: " + ftp_<%=cid %>.getRemotePort() + "."); 
			}
		<%}%>
	<%} else {%>    
    	ftp_<%=cid %> = new com.enterprisedt.net.ftp.FTPClient();
	    ftp_<%=cid %>.setRemoteHost(<%=host %>);
    	ftp_<%=cid %>.setRemotePort(<%=port %>);

	    <%if(isLog4jEnabled){%>
			log.debug("<%=cid%> - " + <%=(("ACTIVE").equals(connectMode))?"\"Using the active mode.\"":"\"Using the passive mode.\""%>);
		<%}
    	if (("ACTIVE").equals(connectMode)){
	    %>
    		ftp_<%=cid %>.setConnectMode(com.enterprisedt.net.ftp.FTPConnectMode.ACTIVE);
    <%
	    }else{
    %>
    		ftp_<%=cid %>.setConnectMode(com.enterprisedt.net.ftp.FTPConnectMode.PASV);
    <%
    	}
    %>
	    ftp_<%=cid %>.setControlEncoding(<%=encoding%>);
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Attempt to connect to '" + <%=host %> + "' with username '" +<%=user %>+ "'.");
		<%}%>
	    ftp_<%=cid %>.connect();
	    
		<%
    	passwordFieldName = "__PASSWORD__";
    	%> 
    	
    	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
	    
    	ftp_<%=cid %>.login(<%=user %>, decryptedPassword_<%=cid%>);  
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Connect to '" + <%=host %> + "' has succeeded.");
		<%}%>  
	<%} %>
	msg_<%=cid%>.clearAll();
	FTPGetter_<%=cid%> getter_<%=cid%> = new FTPGetter_<%=cid%>();
	getter_<%=cid%>.ftpClient = ftp_<%=cid %>;
	String remotedir_<%=cid %> = <%=remotedir%>;
	ftp_<%=cid %>.chdir(remotedir_<%=cid %>);
<%
} else { // *** ftps *** //
%>
	class FTPSGetter_<%=cid%> {
    	private it.sauronsoftware.ftp4j.FTPClient ftpClient = null;
    	private int count = 0;

    	public void getAllFiles(String remoteDirectory, String localDirectory)
		throws IllegalStateException, IOException, java.io.FileNotFoundException,
			it.sauronsoftware.ftp4j.FTPIllegalReplyException, it.sauronsoftware.ftp4j.FTPException, 
			it.sauronsoftware.ftp4j.FTPDataTransferException, it.sauronsoftware.ftp4j.FTPAbortedException, 
			it.sauronsoftware.ftp4j.FTPListParseException {

			ftpClient.changeDirectory(remoteDirectory);
			String path = ftpClient.currentDirectory();
      		it.sauronsoftware.ftp4j.FTPFile[] ftpFiles = null;
			ftpFiles = ftpClient.list();

			for (it.sauronsoftware.ftp4j.FTPFile ftpFile : ftpFiles) {

				if (ftpFile.getType() == it.sauronsoftware.ftp4j.FTPFile.TYPE_DIRECTORY) {

					if ((!(".").equals(ftpFile.getName())) && (!("..").equals(ftpFile.getName()))) {
						java.io.File localFile = new java.io.File(localDirectory + "/" + ftpFile.getName());

			            if (!localFile.exists()) {
            				localFile.mkdir();
			            }
            			getAllFiles(path + "/" + ftpFile.getName(), localDirectory + "/" + ftpFile.getName());
			            ftpClient.changeDirectory(path);
					}
				} else if (ftpFile.getType() != it.sauronsoftware.ftp4j.FTPFile.TYPE_LINK) {
					downloadFile(localDirectory + "/" + ftpFile.getName(),ftpFile.getName());
				}
			}
		}

		public void getFiles(String remoteDirectory, String localDirectory, String maskStr) 
		throws IllegalStateException, IOException, java.io.FileNotFoundException,
			it.sauronsoftware.ftp4j.FTPIllegalReplyException, it.sauronsoftware.ftp4j.FTPException, 
			it.sauronsoftware.ftp4j.FTPDataTransferException, it.sauronsoftware.ftp4j.FTPAbortedException, 
			it.sauronsoftware.ftp4j.FTPListParseException {

			ftpClient.changeDirectory(remoteDirectory);
			it.sauronsoftware.ftp4j.FTPFile[] ftpFiles = null;
			ftpFiles = ftpClient.list(".");

			for(it.sauronsoftware.ftp4j.FTPFile ftpFile : ftpFiles) {

				if ((ftpFile.getType() != it.sauronsoftware.ftp4j.FTPFile.TYPE_DIRECTORY) && (ftpFile.getType() != it.sauronsoftware.ftp4j.FTPFile.TYPE_LINK)) {
					String fileName = ftpFile.getName();

					if (fileName.matches(maskStr)) {
						downloadFile(localDirectory + "/" + fileName,fileName);
					}
				}
			}
		}

		public void chdir(String path) 
		throws IllegalStateException, IOException, 
			it.sauronsoftware.ftp4j.FTPIllegalReplyException, it.sauronsoftware.ftp4j.FTPException {
			ftpClient.changeDirectory(path);
		}

		public String pwd() 
		throws IllegalStateException, IOException, 
			it.sauronsoftware.ftp4j.FTPIllegalReplyException, it.sauronsoftware.ftp4j.FTPException {
			return ftpClient.currentDirectory();
		}

		private void downloadFile(String localFileName, String remoteFileName) 
		throws IllegalStateException, java.io.FileNotFoundException, IOException, 
			it.sauronsoftware.ftp4j.FTPIllegalReplyException, it.sauronsoftware.ftp4j.FTPException, 
			it.sauronsoftware.ftp4j.FTPDataTransferException, it.sauronsoftware.ftp4j.FTPAbortedException {
      
			java.io.File localFile = new java.io.File(localFileName);
			ftpClient.download(remoteFileName, localFile);
			<%if(isLog4jEnabled){%>
				log.debug("<%=cid%> - Downloaded file " + (count +1) +  " : '" + remoteFileName + "' successfully.");
			<%}%>
	      count++;
		}
	}

  <%  
	if ("false".equals(useExistingConn)){
  %>

		class MyTrust_<%=cid%>{
			private javax.net.ssl.TrustManager[] getTrustManagers() 
			throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, 
			java.security.cert.CertificateException, java.security.UnrecoverableKeyException,
			java.io.FileNotFoundException, java.io.IOException {

				java.security.KeyStore ks = java.security.KeyStore.getInstance("JKS");
				
				<%
                passwordFieldName = "__KEYSTORE_PASS__";
                if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
                %> 
              	String decryptedKeyStorePassword_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
                <%} else {%>
              	String decryptedKeyStorePassword_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
                <%}%>
            
				ks.load(new java.io.FileInputStream(<%=keystoreFile%>), decryptedKeyStorePassword_<%=cid%>.toCharArray());
				javax.net.ssl.TrustManagerFactory tmf = javax.net.ssl.TrustManagerFactory.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
				tmf.init(ks);
				return tmf.getTrustManagers();
			}
		}
		MyTrust_<%=cid%> myTrust_<%=cid%>= null;
  <%
	}
  %>
		javax.net.ssl.SSLContext sslContext_<%=cid%> = null;
		javax.net.ssl.TrustManager[] trustManager_<%=cid%> = null;
		javax.net.ssl.SSLSocketFactory sslSocketFactory_<%=cid%> = null;
		it.sauronsoftware.ftp4j.FTPClient ftp_<%=cid %> =null;
		FTPSGetter_<%=cid%> getter_<%=cid%> = null;
		String remotedir_<%=cid%> = null;
		String rootDir_<%=cid %> = null;

		try {
    <%  
			if ("false".equals(useExistingConn)){
    %>
				sslContext_<%=cid%> = javax.net.ssl.SSLContext.getInstance("SSL");
				myTrust_<%=cid%> = new MyTrust_<%=cid%>();
				trustManager_<%=cid%> = myTrust_<%=cid%>.getTrustManagers();
				sslContext_<%=cid%>.init(null, trustManager_<%=cid%>, new java.security.SecureRandom());
				sslSocketFactory_<%=cid%> = sslContext_<%=cid%>.getSocketFactory();
				ftp_<%=cid %> = new it.sauronsoftware.ftp4j.FTPClient();
				ftp_<%=cid %>.setSSLSocketFactory(sslSocketFactory_<%=cid%>);
				ftp_<%=cid %>.setCharset(<%=encoding%>);
<%
				if("IMPLICIT".equals(securityMode)){
%>
					ftp_<%=cid %>.setSecurity(it.sauronsoftware.ftp4j.FTPClient.SECURITY_FTPS);
<%
				}else if("EXPLICIT".equals(securityMode)){
%>
		    		ftp_<%=cid %>.setSecurity(it.sauronsoftware.ftp4j.FTPClient.SECURITY_FTPES);
<%
				}
%>
				<%if(isLog4jEnabled){%>
					log.info("<%=cid%> - FTPS security Mode is (<%=securityMode%>).");
					log.info("<%=cid%> - Attempt to connect to '" + <%=host %> + "' with username: '" + <%=user %>+ "'.");
				<%}%>
				ftp_<%=cid %>.connect(<%=host %>,<%=port %>);
				
				<%
            	passwordFieldName = "__PASSWORD__";
            	%> 
            	
            	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
            	
				ftp_<%=cid %>.login(<%=user %>, decryptedPassword_<%=cid%>);
				<%if(isLog4jEnabled){%>
					log.info("<%=cid%> - Connect to '" + <%=host %> + "' has succeeded.");
				<%}%>
    <%  
    		} else {
				String conn= "conn_" + connection;
      %>
				ftp_<%=cid %> = (it.sauronsoftware.ftp4j.FTPClient)globalMap.get("<%=conn %>");
				<%if(!moveToCurrentDir){%>
					rootDir_<%=cid %> = ftp_<%=cid %>.currentDirectory();
				<%}%>
				<%if(isLog4jEnabled){%>
					if(ftp_<%=cid %>!=null) {
						log.info("<%=cid%> - Use an existing connection.Connection username: " + ftp_<%=cid %>.getUsername() + ", Connection hostname: " + ftp_<%=cid %>.getHost() + ", Connection port: " + ftp_<%=cid %>.getPort() + "."); 
					}
				<%}%>
    <%  
			}
    %>
			getter_<%=cid%> = new FTPSGetter_<%=cid%>();
			getter_<%=cid%>.ftpClient = ftp_<%=cid %>;
			remotedir_<%=cid%> = <%=remotedir%>;
			ftp_<%=cid %>.changeDirectory(remotedir_<%=cid %>);
		} catch (java.lang.IllegalStateException e) {
			<%if(isLog4jEnabled){%>
				log.error("<%=cid%> - " + e.getMessage());
			<%}%>
		    e.printStackTrace();
		} catch (java.io.IOException e) {
			<%if(isLog4jEnabled){%>
				log.error("<%=cid%> - " + e.getMessage());
			<%}%>
		    e.printStackTrace();
		} catch (it.sauronsoftware.ftp4j.FTPIllegalReplyException e) {
			<%if(isLog4jEnabled){%>
				log.error("<%=cid%> - " + e.getMessage());
			<%}%>
		    e.printStackTrace();
		} catch (it.sauronsoftware.ftp4j.FTPException e) {
			<%if(isLog4jEnabled){%>
				log.error("<%=cid%> - " + e.getMessage());
			<%}%>
		    e.printStackTrace();
  		}
<%
	}
// *** share code *** //
%>
java.util.List<String> maskList_<%=cid %> = new java.util.ArrayList<String>();

<%
for (int i = 0; i < files.size(); i++) {
  Map<String, String> line = files.get(i);
%>    
  maskList_<%=cid %>.add(<%= line.get("FILEMASK") %>);       
<%
}

if (!sftp && !ftps) { // *** ftp *** //
  if ("binary".equalsIgnoreCase(ElementParameterParser.getValue(node, "__MODE__"))) {
  %>  
    ftp_<%=cid %>.setType(com.enterprisedt.net.ftp.FTPTransferType.BINARY);
  <%
  }else {  
  %>  
    ftp_<%=cid %>.setType(com.enterprisedt.net.ftp.FTPTransferType.ASCII);
  <%
  }
}
%>
String localdir_<%=cid %>  = <%=localdir%>;  
//create folder if local direcotry (assigned by property) not exists
java.io.File dirHandle_<%=cid %> = new java.io.File(localdir_<%=cid %>);

if (!dirHandle_<%=cid %>.exists()) {
  dirHandle_<%=cid %>.mkdirs();
}
String root_<%=cid %> = getter_<%=cid %>.pwd();

<%if(isLog4jEnabled){%>
	log.info("<%=cid%> - Downloading files from the server.");
<%}%>
for (String maskStr_<%=cid%> : maskList_<%=cid%>) { 
