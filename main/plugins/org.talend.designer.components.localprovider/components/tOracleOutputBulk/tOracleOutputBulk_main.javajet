<%@ jet 
	imports="
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.process.INode 
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List
	"
%>
<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%> 
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
List<IMetadataTable> metadatas = node.getMetadataList();

boolean hasLobflag=false;

if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
    	List< ? extends IConnection> conns = node.getIncomingConnections();
    	
    	String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
    	boolean advancedSeparator = (advancedSeparatorStr!=null&&!("").equals(advancedSeparatorStr))?("true").equals(advancedSeparatorStr):false;
    	String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
    	String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER); 
    	String locale = ElementParameterParser.getValue(node, "__DATE_LOCALE__");
    	boolean useFieldsEnclosure = ("true").equals(ElementParameterParser.getValue(node,"__USE_FIELDS_ENCLOSURE__"));
    	String stringBuilderSize = ElementParameterParser.getValue(node, "__STRING_BUILDER_SIZE__");
    	
    	for (IConnection conn : conns) {
    		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    		%>
    			StringBuilder sb_<%=cid%> = new StringBuilder(<%=stringBuilderSize%>);
    			<%
    			List<IMetadataColumn> columns = metadata.getListColumns();
    			int sizeColumns = columns.size();
    			for (int i = 0; i < sizeColumns; i++) {
    				IMetadataColumn column = columns.get(i);
    				
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					String dbType = columns.get(i).getType();
					boolean isPrimitive = JavaTypesManager.isJavaPrimitiveType( javaType, column.isNullable());
					if(!isPrimitive) {
					
    				%>   				
	    				if(<%=conn.getName() %>.<%=column.getLabel() %> != null) {
    				<%
    				} 
    				%>
    				
    				<%
					if (useFieldsEnclosure && !( "BLOB".equals (dbType) || "CLOB".equals(dbType))) {
					%>		
						sb_<%=cid%>.append(OUT_FIELDS_ENCLOSURE_LEFT_<%=cid %>);
					<%
					}
					%>
    						sb_<%=cid%>.append(
					<% if ("BLOB".equals (dbType) || "CLOB".equals(dbType)) {
						hasLobflag=true;
					%>
						"<startlob>" +
					<%}%>    						
<%
    				String pattern = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
    				if (javaType == JavaTypesManager.DATE && pattern != null && pattern.trim().length() != 0) {
    					if(("DEFAULT").equals(locale)){
							locale = java.util.Locale.getDefault().toString();
						}else if(("CUSTOM").equals(locale)){
							locale = ElementParameterParser.getValue(node, "__CUSTOM_DATE_LOCALE__");
							locale = locale.substring(1,locale.length()-1);
						}else{
							locale = locale;
						}
%>
						FormatterUtils.format_Date_Locale(<%=conn.getName() %>.<%=column.getLabel() %>, <%= pattern %>, "<%=locale%>")
<%
					}  else if(advancedSeparator && JavaTypesManager.isNumberType(javaType, column.isNullable())) {  										
							%>
							<% if(javaType == JavaTypesManager.BIGDECIMAL) {%> 
                                      FormatterUtils.format_Number(String.valueOf(<%=column.getPrecision() == null? conn.getName() + "." + column.getLabel() : conn.getName() + "." + column.getLabel() + ".setScale(" + column.getPrecision() + ", java.math.RoundingMode.HALF_UP)" %>), <%= thousandsSeparator %>, <%= decimalSeparator %>)                                  
                            <% } else { %> 
                                      FormatterUtils.format_Number(String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>), <%= thousandsSeparator %>, <%= decimalSeparator %>)                                           
                            <% } %> 
							<%
					} else if(javaType == JavaTypesManager.STRING) {
%>
								<%=conn.getName()%>.<%=column.getLabel()%>
<%				
					} else if (javaType == JavaTypesManager.BYTE_ARRAY ) {					
%>
							 new String(((byte[])(<%=conn.getName() %>.<%=column.getLabel()%>)))
<%					
					} else  {
%>
								String.valueOf(<%=conn.getName() %>.<%=column.getLabel()%>)
<%				
					}
%>
<% 
					if ("BLOB".equals (dbType) || "CLOB".equals(dbType)) {%>
						+"<endlob>"
<%
					}
%>   
						);
<%	
					if (useFieldsEnclosure && !( "BLOB".equals (dbType) || "CLOB".equals(dbType))) {
					%>		
						sb_<%=cid%>.append(OUT_FIELDS_ENCLOSURE_RIGHT_<%=cid %>);
					<%
					}
					if(!isPrimitive) {
    				%>
	    				} 
					<%
    				} 
					if(i != sizeColumns - 1) {
%>					
							sb_<%=cid%>.append(OUT_DELIM_<%=cid %>);
<%
    				}
    			}
    			%>
    			
    			
    			<% if (!hasLobflag) {
    			%>
    			sb_<%=cid%>.append(OUT_DELIM_ROWSEP_<%=cid %>);
    			<%
    			}else { %>
    			sb_<%=cid%>.append(OUT_DELIM_ROWSEP_WITH_LOB_<%=cid %>);
    			<%}%>
    			out<%=cid%>.write(sb_<%=cid%>.toString());
    			nb_line_<%=cid %>++;
    			<%if(isLog4jEnabled){%>
    				log.debug("<%=cid%> - Writing the record " + nb_line_<%=cid%> + ".");
    			<%}%>
    <%
    		}
    	}
    }
}
%>
