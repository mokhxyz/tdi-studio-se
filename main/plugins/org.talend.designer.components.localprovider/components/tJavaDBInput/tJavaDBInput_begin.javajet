<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		java.util.List
		java.util.Map
		"
%>
	<%@ include file="../templates/DB/Input/HelpClass.javajet"%>
<%

	class DBInputBeginUtil extends DefaultDBInputUtil{
	    
		public void beforeComponentProcess(INode node){
			super.beforeComponentProcess(node);
			dbhost = ElementParameterParser.getValue(node, "__HOST__");
			dbport = ElementParameterParser.getValue(node, "__PORT__");
			String frameworkType = ElementParameterParser.getValue(node,"__FRAMEWORK_TYPE__");
			if(("EMBEDED").equals(frameworkType)) {
			String dbRootPath = ElementParameterParser.getValue(node, "__DBPATH__");
%>
				//set the root path of the database
				System.setProperty("derby.system.home", <%=dbRootPath%>);
<%
			} else {
    			String connectionFlag = ElementParameterParser.getValue(node, "__CONNECTION_FLAG__");
    			if(("false").equals(connectionFlag)) {
    			    %>
        			org.apache.derby.drda.NetworkServerControl serverControl_<%=cid%>;
        			serverControl_<%=cid%> = new org.apache.derby.drda.NetworkServerControl(java.net.InetAddress.getByName(<%=dbhost%>),Integer.parseInt(<%=dbport%>));
        			//start server
        			serverControl_<%=cid%>.start(new java.io.PrintWriter(System.out,true));
        			boolean isServerUp_<%=cid%> = false;
        			int timeOut_<%=cid%> = 5;
        			while(!isServerUp_<%=cid%> && timeOut_<%=cid%> > 0) {
        				try {
            				timeOut_<%=cid%>--;
            				/*
    						* testing for connection to see if the network server is up and running.
    						* if server is not ready yet, this method will throw an exception.		
    						*/
            				serverControl_<%=cid%>.ping();
            				isServerUp_<%=cid%> = true;
        				} catch(java.lang.Exception e) {
    						//Unable to obtain a connection to network server, trying again after 3000 ms.
    						Thread.currentThread().sleep(3000);
    					}    				
        			}
        			if(!isServerUp_<%=cid%>) {
        				/*
    					 * can not obtain a connection to network server.
    					 */ 	 
        				throw new java.lang.Exception("Can not obtain a connection to network server");
        			}
        			//derby network server started.
<%
    			}
			}
	    }
	    
		public void setURL(INode node) {
			
			String db = ElementParameterParser.getValue(node, "__DB__");	
			String frameworkType = ElementParameterParser.getValue(node,"__FRAMEWORK_TYPE__");	
			String dbRootPath = ElementParameterParser.getValue(node, "__DBPATH__");
%>
<%
			if(("EMBEDED").equals(frameworkType)) {
%>
				String url_<%=cid%> = "jdbc:derby:" + <%=db%>;
<%
			} else {
    			if(("JCCJDBC").equals(frameworkType)) {
%>
    				String url_<%=cid%> = "jdbc:derby:net://" + <%=dbhost%> + ":" + <%=dbport%> + "/" + <%=db%>;
<%
    			} else {
%>
    				String url_<%=cid%> = "jdbc:derby://" + <%=dbhost%> + ":" + <%=dbport%> + "/" + <%=db%>;
<%
    			}
    		}
%>
<%
		}
		public void createConnection(INode node) {
			cid = node.getUniqueName();
			dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__");
			dbhost = ElementParameterParser.getValue(node, "__HOST__");
	    	dbport = ElementParameterParser.getValue(node, "__PORT__");
	    	dbname = ElementParameterParser.getValue(node, "__DBNAME__");
	    	dbuser = ElementParameterParser.getValue(node, "__USER__");

	 		
%>
			    String driverClass_<%=cid%> = "<%=this.getDirverClassName(node) %>";
			    java.lang.Class.forName(driverClass_<%=cid%>).newInstance();
				<%this.setURL(node);%>
		        String dbUser_<%=cid %> = <%=dbuser%>;

		        <%
		        String passwordFieldName = "__PASS__";
		        %>

		        <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

		        String dbPwd_<%=cid %> = decryptedPassword_<%=cid%>;

			<%
			log4jCodeGenerateUtil.debugConnectionParams(node);
			log4jCodeGenerateUtil.connect();
			%>
<%
		}
		public String getDirverClassName(INode node){
			String frameworkType = ElementParameterParser.getValue(node,"__FRAMEWORK_TYPE__");	
			if(("EMBEDED").equals(frameworkType)) {
				return "org.apache.derby.jdbc.EmbeddedDriver";
			} else {
    			if(("JCCJDBC").equals(frameworkType)) {
    				return "com.ibm.db2.jcc.DB2Driver";
    			} else {
    				return "org.apache.derby.jdbc.ClientDriver";
    			}
    		}
		}
		
		//-----------according schema type to generate ResultSet
	    
	    //---------end according schema type to generate ResultSet
	}//end class
	
	dbInputBeginUtil = new DBInputBeginUtil();
%>
    
	<%@ include file="../templates/DB/Input/AbstractDBInputBegin.javajet"%>
