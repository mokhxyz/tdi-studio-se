<%@ jet 
    imports="
        org.talend.core.model.process.INode 
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.process.ElementParameterParser        
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory 
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.metadata.types.JavaType
        java.util.List
    "
%>
    <%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
    List<IMetadataTable> metadatas = node.getMetadataList();
    if ((metadatas!=null)&&(metadatas.size()>0)) {
        IMetadataTable metadata = metadatas.get(0);
        if (metadata!=null) {
        
            boolean checkDiskSpace = ("true").equals(ElementParameterParser.getValue(node,"__CHECK_DISK_SPACE__"));
            boolean flushOnRow = ("true").equals(ElementParameterParser.getValue(node, "__FLUSHONROW__"));
            String flushMod = ElementParameterParser.getValue(node, "__FLUSHONROW_NUM__");
            
            String encoding = ElementParameterParser.getValue(node,"__ENCODING__");        
            
            List< ? extends IConnection> conns = node.getIncomingConnections();
        	        	if(conns!=null){
        		if (conns.size()>0){
        		    IConnection conn =conns.get(0);
            		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
            			List<IMetadataColumn> columns = metadata.getListColumns();
                		int sizeColumns = columns.size();
            			%>  	
                    	String[] row_<%=cid%>=new String[]{<%for(int j=0;j<sizeColumns;j++){%>"\\N",<%}%>};		//empty value must be NULL('\N' in bulk file)
                    	<%
            			for (int i = 0; i < sizeColumns; i++) {
                			IMetadataColumn column = columns.get(i);
                			JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
                			String pattern = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
                			if(JavaTypesManager.isJavaPrimitiveType( column.getTalendType(), column.isNullable())){
                            %>
                                if(<%=conn.getName() %>.<%=column.getLabel() %> != null) {
                            <%                			
                    				if(javaType == JavaTypesManager.BOOLEAN ){
                    				%>
                                        row_<%=cid%>[<%=i%>] = String.valueOf(
                    							true == <%=conn.getName() %>.<%=column.getLabel() %> ?"1":"0"
                    							);
                    				<%
                    				} else {
                    			    %>
                    			    	row_<%=cid%>[<%=i%>] = String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>);
                    			    <%
                    			    }
                            %>
                                } else {
                                    row_<%=cid%>[<%=i%>] = null;
                                }
                            <%
                			}else {
                			    %>
                			    if(<%=conn.getName() %>.<%=column.getLabel() %> != null){
                			        <%					
                			        if(javaType == JavaTypesManager.STRING ){
                			            %>
                			            row_<%=cid%>[<%=i%>] = <%=conn.getName() %>.<%=column.getLabel() %>;
                			            <%
                			        }else if(javaType == JavaTypesManager.DATE && pattern != null){
                			            %>
                			            row_<%=cid%>[<%=i%>] = FormatterUtils.format_Date(<%=conn.getName() %>.<%=column.getLabel() %>, "yyyy-MM-dd HH:mm:ss");
                			            <%
                			        }else if(javaType == JavaTypesManager.BYTE_ARRAY){
                			            %>
                			            row_<%=cid%>[<%=i%>] = java.nio.charset.Charset.forName(<%=encoding %>).decode(java.nio.ByteBuffer.wrap(<%=conn.getName() %>.<%=column.getLabel() %>)).toString();
                			            <%
                			        }else if(javaType == JavaTypesManager.BOOLEAN ){
                					%>
                						row_<%=cid%>[<%=i%>] = String.valueOf(
                							true == <%=conn.getName() %>.<%=column.getLabel() %> ?"1":"0"
                							);
                					<%
                					}	             			        
                			        else{
                			            %>
                			            row_<%=cid%>[<%=i%>] = String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>);
                			            <%
                			        }
                			        %>                			    
                			    } else {
                                    row_<%=cid%>[<%=i%>] = null;
                                }
                		 	<% 
                			}
            			} 
                        if(checkDiskSpace){
                        %>
	            			diskSpace_<%=cid%> = file_<%=cid %>.getFreeSpace();
	            			if(diskSpace_<%=cid%> <= 0){
								throw new java.io.IOException("The disk space is not enough,please check it!");
							}
                        <%
                        }
                        %>
                        csvWriter_<%=cid%>.writeNextEnhance(row_<%=cid%>, "");    
                        <%
                        if(checkDiskSpace){
                        %>
                            csvWriter_<%=cid%>.flush();
                        <%
                        }
                        %>
                        <%
                        if(flushOnRow) {
                        %>
                            if(nb_line_<%=cid %>%<%=flushMod %> == 0) {                            
                                csvWriter_<%=cid%>.flush();
                            }     
                        <%
                        }
                        %>
                        nb_line_<%=cid %>++;
                        <%
                        if(isLog4jEnabled){
                        %>
                            log.debug("<%=cid%> - Writing the record " + nb_line_<%=cid%> + ".");
                		<%
                		}
            		}
        		
        		}
        	}
        }
    }
    %>
