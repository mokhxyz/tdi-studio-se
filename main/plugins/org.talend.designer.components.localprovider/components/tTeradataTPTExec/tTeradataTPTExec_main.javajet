<%@ jet
imports="
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.lang.StringBuilder
    java.util.ArrayList
    java.util.Map
    java.util.HashMap
    java.util.Set
    java.util.Iterator
    java.util.Arrays
"
%>
<%@ include file="../templates/Log4j/Log4jDBConnUtil.javajet"%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String operatorType = ElementParameterParser.getValue(node, "__ACTION__");
String dmlType = ElementParameterParser.getValue(node, "__DML_TYPE__");
String tdpid= ElementParameterParser.getValue(node, "__TDPID__");
String jobName= ElementParameterParser.getValue(node, "__JOB_NAME__");
String operatorLoad= ElementParameterParser.getValue(node, "__OPERATOR_LOAD__");
String operatorDataConnector= ElementParameterParser.getValue(node, "__OPERATOR_DATA_CONNECTOR__");
String layoutName= ElementParameterParser.getValue(node, "__LAYOUT_NAME__");
String dbname= ElementParameterParser.getValue(node, "__DBNAME__");
String dbuser= ElementParameterParser.getValue(node, "__USER__");
String table= ElementParameterParser.getValue(node, "__TABLE__");

String scriptPath= ElementParameterParser.getValue(node, "__SCRIPT_PATH__");
String execution= ElementParameterParser.getValue(node, "__EXECUTION__");
String loadFile= ElementParameterParser.getValue(node, "__LOAD_FILE__");
String separator= ElementParameterParser.getValue(node, "__FIELD_SEPARATOR__");
String errorFile= ElementParameterParser.getValue(node, "__ERROR_FILE__");

boolean returnCodeDie= "true".equals(ElementParameterParser.getValue(node, "__RETURN_CODE_DIE__"));
String returnCode= ElementParameterParser.getValue(node, "__RETURN_CODE__");
boolean specifyLogTable= "true".equals(ElementParameterParser.getValue(node, "__SPECIFY_LOG_TABLE__"));
String logTable= ElementParameterParser.getValue(node, "__LOG_TABLE_TABLE__");
String defineCharset = ElementParameterParser.getValue(node, "__DEFINE_CHARSET__");
String charset = ElementParameterParser.getValue(node, "__CHARSET__");
boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));

boolean checkedScriptParameter = ("true").equals(ElementParameterParser.getValue(node, "__SCRIPT_PARAMETER__"));
boolean applyOptionalAttributes = "true".equals(ElementParameterParser.getValue(node, "__APPLY_OPTIONAL_ATTRIBUTES__"));

String passwordFieldName="__PASS__";

//New Feature TDI-29325 begin
List<String>  intAttrisList = null;
List<String>  arrayAttrisList = null;
List<String> tableNameAttrisList = null;
Map<String,String> attrisMap = null;
if(applyOptionalAttributes){
	List<Map<String,String>> additionalList = null;
	if("LOAD".equalsIgnoreCase(operatorType)){
		additionalList = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node,"__TPT_CONSUMER_OPERATOR_OPTIONAL_ATTRIBUTES__");
	}else if("INSERTER".equalsIgnoreCase(operatorType)){
		additionalList = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node,"__TPT_COOA_FOR_INSERTER__");
	}else if("UPDATE".equalsIgnoreCase(operatorType)){
		additionalList = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node,"__TPT_COOA_FOR_UPDATE__");
	}else if("STREAM".equalsIgnoreCase(operatorType)){
		additionalList = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node,"__TPT_COOA_FOR_STREAM__");
	}else{
		System.err.println("Unexcepted consumer operator type.");
	}

	attrisMap =  new HashMap<String,String>();//For unique key

	for(Map<String,String> map : additionalList){
		String attriName = map.get("OPTIONAL_ATTRIBUTES_NAME");
		String attriValue = map.get("OPTIONAL_ATTRIBUTES_VALUE");
		if("WORKINGDATABASE".equalsIgnoreCase(attriName)){
			dbname = attriValue;
		}
		attrisMap.put(attriName, attriValue);
	}

	intAttrisList = Arrays.asList(
										"BUFFERSIZE","ERRORLIMIT","MAXSESSIONS",
										"MINSESSIONS","TENACITYHOURS","TENACITYSLEEP",
										"BUFFERS","PACK","RATE",
										"PERIODICITY","IOBUFFERSIZE","ROWSPERINSTANCE",
										"SKIPROWS","TIMEOUT","VIGILELAPSEDTIME",
										"VIGILMAXFILES","VIGILWAITTIME"
								  );
    arrayAttrisList = Arrays.asList("TRACELEVEL");
    tableNameAttrisList = Arrays.asList("TARGETTABLE","ERRORTABLE1","ERRORTABLE2","WORKTABLE");
}
//end

//windows line separator as default
String lineSeparator = "\\r\\n";
if("Unix".equals(execution)){
	lineSeparator = "\\n";
}
if(!scriptPath.endsWith("/\"")){
	scriptPath = scriptPath+	"+\"/\"";
}
if(loadFile.indexOf("/") !=0 && ("Windows").equals(execution)){
	loadFile = loadFile.replaceAll("/", "\\\\\\\\");
}

String dbmsId = "teradata_id";

List<IMetadataColumn> columnList = null;
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
	if (metadata!=null) {
		columnList = metadata.getListColumns();
	}
}

List<String> primaryKeyList = new ArrayList<String>();
if(columnList!=null){
	for(IMetadataColumn column:columnList){
		if(column.isKey()){
			primaryKeyList.add(column.getOriginalDbColumnName());
		}
	}
}
%>
String tableFullName_<%=cid%> = <%=dbname%> + "." + <%=table%>;
java.io.File file_<%=cid %> = new java.io.File(<%=scriptPath%>+<%=table%>+ <%if("Windows".equals(execution)){%>".script"<%}else{%>".scr"<%}%>);

<% if(specifyLogTable){ %>
	   String logTable_<%= cid %> = <%=dbname%> + "." +<%= logTable %>;
<% } %>
<%//build script---------------------------------------------------------%>
try{
				<% if(!checkedScriptParameter){%>
					<%
						operatorLoad = "\"Operator_" + cid+"\"";
						operatorDataConnector = "\"Connector_" + cid+"\"";
						jobName = "\"Job_" + cid+"\"";
						layoutName = "\"Schema_" +cid+"\"";
					%>
			    <% }%>

				java.io.FileWriter fw_<%=cid %> = new java.io.FileWriter(file_<%=cid%>);
				fw_<%=cid %>.write("DEFINE JOB "+<%=jobName %>+"<%=lineSeparator%>");
				fw_<%=cid %>.write("  ("+"<%=lineSeparator%>");

				<% if("Load".equals(operatorType)){ %>
				fw_<%=cid %>.write("  	DEFINE OPERATOR "+<%=operatorLoad %>+"<%=lineSeparator%>");
				fw_<%=cid %>.write("  	TYPE LOAD<%=lineSeparator%>");
				fw_<%=cid %>.write("  	SCHEMA *<%=lineSeparator%>");
				fw_<%=cid %>.write("  	ATTRIBUTES<%=lineSeparator%>");
				fw_<%=cid %>.write("  	(<%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR UserName, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR UserPassword, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR LogTable, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR TargetTable, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER BufferSize, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR DataEncryption, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER ErrorLimit, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER MaxSessions, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER MinSessions, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER TenacityHours, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER TenacitySleep, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR AccountId, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR DateForm, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR ErrorTable1, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR ErrorTable2, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR LogSQL, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR LogonMech, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR LogonMechData, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR NotifyExit, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR NotifyExitIsDLL, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR NotifyLevel, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR NotifyMethod, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR NotifyString, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR PauseAcq, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR PrivateLogName,<%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR QueryBandSessInfo,<%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR TdpId, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR ARRAY TraceLevel, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR WildcardInsert, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR WorkingDatabase<%=lineSeparator%>");
				fw_<%=cid %>.write("  	);<%=lineSeparator%>");
				fw_<%=cid %>.write("  <%=lineSeparator%>");

				<%}else if("Inserter".equals(operatorType)){ %>
				fw_<%=cid %>.write("  	DEFINE OPERATOR "+<%=operatorLoad %>+"<%=lineSeparator%>");
				fw_<%=cid %>.write("  	TYPE INSERTER<%=lineSeparator%>");
				fw_<%=cid %>.write("  	SCHEMA *<%=lineSeparator%>");
				fw_<%=cid %>.write("  	ATTRIBUTES<%=lineSeparator%>");
				fw_<%=cid %>.write("  	(<%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR UserName, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR UserPassword, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR Tdpid, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR DateForm, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR PrivateLogName, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR AccountId, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR DataEncryption, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR LogSQL, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR LogonMech, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR LogonMechData, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR QueryBandSessInfo, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR ReplicationOverride, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR ARRAY TraceLevel, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR WorkingDatabase <%=lineSeparator%>");
				fw_<%=cid %>.write("  	);<%=lineSeparator%>");
				fw_<%=cid %>.write("  <%=lineSeparator%>");
				<%}else if("Update".equals(operatorType)){ %>

				fw_<%=cid %>.write("  	DEFINE OPERATOR "+<%=operatorLoad %>+"<%=lineSeparator%>");
				fw_<%=cid %>.write("  	TYPE UPDATE<%=lineSeparator%>");
				fw_<%=cid %>.write("  	SCHEMA *<%=lineSeparator%>");
				fw_<%=cid %>.write("  	ATTRIBUTES<%=lineSeparator%>");
				fw_<%=cid %>.write("  	(<%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR UserName, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR UserPassword, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR Tdpid, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR PrivateLogName, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR LogTable, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR ARRAY TraceLevel, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER BufferSize, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER ErrorLimit, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER MaxSessions, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER MinSessions, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER TenacityHours, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER TenacitySleep, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR AccountId, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR AmpCheck, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR DataEncryption, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR DateForm, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR DeleteTask, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR DropErrorTable, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR DropLogTable, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR DropWorkTable, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR LogSQL, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR LogonMech, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR LogonMechData, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR NotifyExit, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR NotifyExitIsDLL, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR NotifyLevel, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR NotifyMethod, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR NotifyString, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR PauseAcq, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR QueryBandSessInfo, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR QueueErrorTable, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR WorkTable, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR WorkingDatabase, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR TargetTable, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR ErrorTable1, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR ErrorTable2 <%=lineSeparator%>");
				fw_<%=cid %>.write("  	);<%=lineSeparator%>");
				fw_<%=cid %>.write("  <%=lineSeparator%>");
				<%}else if("Stream".equals(operatorType)){%>

				fw_<%=cid %>.write("  	DEFINE OPERATOR "+<%=operatorLoad %>+"<%=lineSeparator%>");
				fw_<%=cid %>.write("  	TYPE STREAM<%=lineSeparator%>");
				fw_<%=cid %>.write("  	SCHEMA *<%=lineSeparator%>");
				fw_<%=cid %>.write("  	ATTRIBUTES<%=lineSeparator%>");
				fw_<%=cid %>.write("  	(<%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR UserName, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR UserPassword, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR TdpId, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR PrivateLogName, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR LogTable, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR ErrorTable, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR AppendErrorTable, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER Buffers, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER ErrorLimit, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER MaxSessions, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER MinSessions, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER Pack, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER Rate, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER Periodicity, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER TenacityHours, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER TenacitySleep, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR AccountId, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR ArraySupport, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR DataEncryption, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR DateForm, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR DropMacro, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR LogonMech, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR LogonMechData, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR MacroDatabase, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR OperatorCommandID, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR NotifyExit, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR NotifyExitIsDLL, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR NotifyLevel, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR NotifyMethod, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR LogSQL, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR NotifyString, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR PackMaximum, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR QueryBandSessInfo, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR QueueErrorTable, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR ReplicationOverrride, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR Robust, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR WorkingDatabase, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR ARRAY TraceLevel, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR DropErrorTable<%=lineSeparator%>");
				fw_<%=cid %>.write("  	);<%=lineSeparator%>");
				fw_<%=cid %>.write("  <%=lineSeparator%>");
			    <%}else{}%>

				fw_<%=cid %>.write("  	DEFINE SCHEMA "+<%=layoutName %>+"<%=lineSeparator%>");
				fw_<%=cid %>.write("  	(<%=lineSeparator%>");

				<%
				if(columnList!=null){
					int counter = 1;
					for(IMetadataColumn column:columnList){
						if( columnList.size() != counter){	%>
						fw_<%=cid %>.write("               <%=column.getOriginalDbColumnName()%>"+" VARCHAR(<%=column.getLength() == null ? 0 : column.getLength()%>),<%=lineSeparator%>");
					<%
						} else {
					%>
						fw_<%=cid %>.write("               <%=column.getOriginalDbColumnName()%>"+" VARCHAR(<%=column.getLength() == null ? 0 : column.getLength()%>)<%=lineSeparator%>");
					<% 	}
						counter++;
					}
				}
				%>

				fw_<%=cid %>.write("  	);<%=lineSeparator%>");
				fw_<%=cid %>.write("  <%=lineSeparator%>");
				fw_<%=cid %>.write("  	DEFINE OPERATOR "+<%=operatorDataConnector %>+"<%=lineSeparator%>");
				fw_<%=cid %>.write("  	TYPE DATACONNECTOR PRODUCER<%=lineSeparator%>");
				fw_<%=cid %>.write("  	SCHEMA "+<%=layoutName %>+"<%=lineSeparator%>");
				fw_<%=cid %>.write("  	ATTRIBUTES<%=lineSeparator%>");
				fw_<%=cid %>.write("  	(<%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR FileName, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR Format, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR OpenMode, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER BlockSize, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER BufferSize, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER RetentionPeriod, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER RowsPerInstance, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER SecondarySpace, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER UnitCount, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER VigilElapsedTime, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER VigilWaitTime, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		INTEGER VolumeCount, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR AccessModuleName, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR AccessModuleInitStr, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR DirectoryPath, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR ExpirationDate, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR IndicatorMode, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR PrimarySpace, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR PrivateLogName, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR RecordFormat, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR RecordLength, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR SpaceUnit, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR TextDelimiter, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR VigilNoticeFileName, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR VigilStartTime, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR VigilStopTime, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR VolSerNumber, <%=lineSeparator%>");
				fw_<%=cid %>.write("  		VARCHAR UnitType<%=lineSeparator%>");
				fw_<%=cid %>.write("  	);<%=lineSeparator%>");
				fw_<%=cid %>.write("  <%=lineSeparator%>");

				fw_<%=cid %>.write("    APPLY<%=lineSeparator%>");
                fw_<%=cid %>.write("        (<%=lineSeparator%>");

                //builder4insert begin
                <%
                StringBuilder inserterColsStrBuilder = new StringBuilder();
                StringBuilder inserterValueSqlStrBuilder = new StringBuilder();
                if(columnList!=null){
                    String columnName = "";
                    for(IMetadataColumn column:columnList){
                        columnName= column.getOriginalDbColumnName();
                        if(inserterColsStrBuilder.length()>0){
                            inserterColsStrBuilder.append(",");
                        }
                        inserterColsStrBuilder.append(columnName);

                        if(inserterValueSqlStrBuilder.length()>0){
                            inserterValueSqlStrBuilder.append(",");
                        }
                        inserterValueSqlStrBuilder.append(":").append(columnName);
                    }
                }
                %>
                //builder4insert end

                //builder4update begin
                <%
                StringBuilder setStrBuilder = new StringBuilder();
                if(columnList!=null){
                    String columnName = "";
                    int lgth = columnList.size();
                    for(IMetadataColumn column:columnList){
                    	if(!column.isKey()){
	                        columnName= column.getOriginalDbColumnName();
	                        if(lgth>1){
	                            setStrBuilder.append(columnName).append("=:").append(columnName).append(",");
	                        }else{
	                            setStrBuilder.append(columnName).append("=:").append(columnName);
	                        }
                    	}
                    	lgth--;
                    }
                }
                %>

               <%
                StringBuilder whereStrBuilder = new StringBuilder();
                if(primaryKeyList.size()>0){
                    //get primary key from talend schema
                    int lgthx = primaryKeyList.size();
                    for(String primaryKey:primaryKeyList){
                        if(lgthx>1){
                            whereStrBuilder.append(primaryKey).append("=:").append(primaryKey).append(" and ");
                        }else{
                            whereStrBuilder.append(primaryKey).append("=:").append(primaryKey);
                        }
                        lgthx--;
                    }
                }else{
                     whereStrBuilder.append("1=0");
                }%>
                //builder4update end

                <% if("Load".equals(operatorType) || "Inserter".equals(operatorType)){%>
						fw_<%=cid %>.write("            'INSERT INTO "+ <%=dbname%> + "." + <%=table%>+" (<%=inserterColsStrBuilder.toString()%>) VALUES (<%=inserterValueSqlStrBuilder.toString()%>);'<%=lineSeparator%>");
				 <%}else if("Update".equals(operatorType) || "Stream".equals(operatorType)){%>
		                <% if("Insert".equals(dmlType)){ %>
		                    fw_<%=cid %>.write("            'INSERT INTO "+ <%=dbname%> + "." + <%=table%>+" (<%=inserterColsStrBuilder.toString()%>) VALUES (<%=inserterValueSqlStrBuilder.toString()%>);'<%=lineSeparator%>");
		                <% } else if("Update".equals(dmlType)){ %>
		                    fw_<%=cid %>.write("            'UPDATE " + <%=dbname%> + "." + <%=table%> + " SET <%= setStrBuilder.toString() %> WHERE <%= whereStrBuilder.toString() %>;'<%=lineSeparator%>" );
		                <% }else if("Delete".equals(dmlType)){%>
		                    fw_<%=cid %>.write("            'DELETE  FROM " + <%=dbname%> + "." + <%=table%> + " WHERE <%= whereStrBuilder.toString() %>;'<%=lineSeparator%>");
		                <%}else if("InsertOrUpdate".equals(dmlType)){%>
		                    fw_<%=cid %>.write("            'UPDATE " + <%=dbname%> + "." + <%=table%> + " SET <%= setStrBuilder.toString() %> WHERE <%= whereStrBuilder.toString() %>;',<%=lineSeparator%>");
		                    fw_<%=cid %>.write("            'INSERT INTO "+ <%=dbname%> + "." + <%=table%>+" (<%=inserterColsStrBuilder.toString()%>) VALUES (<%=inserterValueSqlStrBuilder.toString()%>);'<%=lineSeparator%>");
		                <%}else{
		                    %>
		                      System.err.println("Unexcepted DML type.");
		                    <%
		                } %>
                <%}else{
                	%>
                	  	System.err.println("Unknow customer operator.");
                	<%
	            } %>

                fw_<%=cid %>.write("        )<%=lineSeparator%>");
                <%  if(("Update".equals(operatorType) || "Stream".equals(operatorType)) && "InsertOrUpdate".equals(dmlType)){%>
                fw_<%=cid %>.write("    INSERT FOR MISSING UPDATE ROWS<%=lineSeparator%>");
                <%} %>

             	fw_<%=cid %>.write("    TO OPERATOR<%=lineSeparator%>");
                fw_<%=cid %>.write("    (<%=lineSeparator%>");
                fw_<%=cid %>.write("        "+<%=operatorLoad %>+"[1]"+"<%=lineSeparator%>");
                fw_<%=cid %>.write("  <%=lineSeparator%>");
                fw_<%=cid %>.write("        ATTRIBUTES<%=lineSeparator%>");
                fw_<%=cid %>.write("        (<%=lineSeparator%>");
                fw_<%=cid %>.write("            UserName = '" + <%=dbuser%> + "', <%=lineSeparator%>");

				<%@ include file="../templates/password.javajet"%>

                fw_<%=cid %>.write("            UserPassword = '" + decryptedPassword_<%=cid%> + "',<%=lineSeparator%>");
                fw_<%=cid %>.write("            TdpId = '" + <%=tdpid%> + "'<%=lineSeparator%>");                

                <% if("Load".equals(operatorType) || "Update".equals(operatorType)){%>
                	    fw_<%=cid %>.write("            ,TargetTable = '" + tableFullName_<%=cid%> + "'<%=lineSeparator%>");
                	<% if(specifyLogTable){ %>                	    
                	    fw_<%=cid %>.write("            ,LogTable = '" + logTable_<%= cid %> + "'<%=lineSeparator%>");
                	<% } %>
                <%} if("Stream".equals(operatorType)){%>
                	<% if(specifyLogTable){ %>
                	    fw_<%=cid %>.write("            ,LogTable = '" + logTable_<%= cid %> + "'<%=lineSeparator%>");
                	<% }
                }
					//New Feature TDI-29325
					if(applyOptionalAttributes){
						Set<String> attrisKeySet = attrisMap.keySet();
						for(String key : attrisKeySet){
							String value = attrisMap.get(key);
							boolean isIntType = intAttrisList.contains(key);
							boolean isArrType;
							if(isIntType){//Integer
								%>
								   fw_<%=cid %>.write("            ,<%= key %> = "+<%= value %>+"<%=lineSeparator%>");
								<%
							}else{
								isArrType = arrayAttrisList.contains(key);
								if(!isArrType){//Varchar or table name
									boolean isTableType = tableNameAttrisList.contains(key);
									if("ERRORTABLE".equalsIgnoreCase(key) || (isTableType && operatorType.equalsIgnoreCase("LOAD"))){
									%>
									   fw_<%=cid %>.write("            ,<%= key %> = '"+<%= dbname %>+"."+<%= value %>+"'<%=lineSeparator%>");
									<%
									}else{
									%>
									   fw_<%=cid %>.write("            ,<%= key %> = '"+<%= value %>+"'<%=lineSeparator%>");
									<%
									}
								}else{//Array
										%>
										   fw_<%=cid %>.write("            ,<%= key %> = "+<%= value %>+"<%=lineSeparator%>");
										<%
									}
								}
							}
						}
				%>

                fw_<%=cid %>.write("        )<%=lineSeparator%>");
                fw_<%=cid %>.write("    )<%=lineSeparator%>");
                fw_<%=cid %>.write("    SELECT * FROM OPERATOR<%=lineSeparator%>");
                fw_<%=cid %>.write("    (<%=lineSeparator%>");
                fw_<%=cid %>.write("        "+<%=operatorDataConnector %>+"[1]"+"<%=lineSeparator%>");
                fw_<%=cid %>.write("  <%=lineSeparator%>");
                fw_<%=cid %>.write("        ATTRIBUTES<%=lineSeparator%>");
                fw_<%=cid %>.write("        (<%=lineSeparator%>");
                fw_<%=cid %>.write("            FileName = '" + <%=loadFile%> + "', <%=lineSeparator%>");
                fw_<%=cid %>.write("            Format = 'DELIMITED', <%=lineSeparator%>");
                fw_<%=cid %>.write("            OpenMode = 'Read', <%=lineSeparator%>");
                fw_<%=cid %>.write("            DirectoryPath = '', <%=lineSeparator%>");
                fw_<%=cid %>.write("            IndicatorMode = 'N', <%=lineSeparator%>");
                fw_<%=cid %>.write("            TextDelimiter = '" + <%=separator%> + "'<%=lineSeparator%>");
                fw_<%=cid %>.write("        )<%=lineSeparator%>");
                fw_<%=cid %>.write("    );<%=lineSeparator%>");
                fw_<%=cid %>.write("  );<%=lineSeparator%>");

                //write script to file
                fw_<%=cid %>.close();

                //run tbuild (TPT) command
                <%if("true".equals(defineCharset)) {
                    if(!("".equals(charset))) {
                        if("Windows".equals(execution)){%>
                            String[] sb_<%=cid%>= {"cmd","/c","tbuild -f \""+<%=scriptPath%>+<%=table%>+".script\" -e "+<%=charset%>+" > \""+<%=errorFile%>+"\" 2>&1"};
                        <%}else{%>
                            String[] sb_<%=cid%>= {"sh","-c","tbuild -f \""+<%=scriptPath%>+<%=table%>+".scr\" -e "+<%=charset%>+" > \""+<%=errorFile%>+"\" 2>&1"};
                        <%}
                    }
                } else {
                    if("Windows".equals(execution)){%>
                        String[] sb_<%=cid%>= {"cmd","/c","tbuild -f \""+<%=scriptPath%>+<%=table%>+".script\" > \""+<%=errorFile%>+"\" 2>&1"};
                    <%}else{%>
                        String[] sb_<%=cid%>= {"sh","-c","tbuild -f \""+<%=scriptPath%>+<%=table%>+".scr\" > \""+<%=errorFile%>+"\" 2>&1"};
                    <%}
                }%>
                <%if(isLog4jEnabled){%>
                	String cmdStr_<%= cid %> = java.util.Arrays.toString(sb_<%=cid%>);
                    log.info("<%=cid%> - Executing command: '" + cmdStr_<%= cid %> + "'.");
                <%}%>
                final Process process_<%=cid %> = Runtime.getRuntime().exec(sb_<%=cid%>);
                Thread normal_<%=cid %> = new Thread() {
                    public void run() {
                        try {
                            java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(process_<%=cid %>.getInputStream()));
                            String line = "";
                            try {
                                while((line = reader.readLine()) != null) {
                                   System.out.println(line);
                                }
                            } finally {
                                 reader.close();
                            }
                        }catch(java.io.IOException ioe) {
                            <%log4jCodeGenerateUtil.logError(node,"error","ioe");%>
                            ioe.printStackTrace();
                        }
                    }
                };
                normal_<%=cid %>.start();

                Thread error_<%=cid %> = new Thread() {
                    public void run() {
                        try {
                            java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(process_<%=cid %>.getErrorStream()));
                            String line = "";
                            try {
                                while((line = reader.readLine()) != null) {
                                    System.err.println(line);
                                }
                            } finally {
                                reader.close();
                            }
                        } catch(java.io.IOException ioe) {
                            <%log4jCodeGenerateUtil.logError(node,"error","ioe");%>
                           ioe.printStackTrace();
                        }
                    }
                };
                error_<%=cid %>.start();

                process_<%=cid %>.waitFor();

                normal_<%=cid %>.interrupt();

                error_<%=cid %>.interrupt();

                globalMap.put("<%=cid %>_EXIT_VALUE", process_<%=cid %>.exitValue());

                <%
                if(returnCodeDie) {
                %>
                    if(process_<%=cid %>.exitValue()>=<%=returnCode%>) {
                        throw new RuntimeException("TPT returned exit code "+process_<%=cid %>.exitValue());
                    }
                <%
                }
                %>
                <%if(isLog4jEnabled){%>
                    log.info("<%=cid%> - Excute command:'" + cmdStr_<%= cid %> + "' has finished.");
                <%}%>
}finally{
	try{
		file_<%=cid %>.delete();
	}catch(Exception e_<%=cid%>){
        <%log4jCodeGenerateUtil.logError(node,"warn","e_"+cid);%>
	}
}
