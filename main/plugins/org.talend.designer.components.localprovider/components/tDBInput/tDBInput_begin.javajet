<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		java.util.List
		java.util.Map
	" 
%>
	<%@ include file="../templates/DB/Input/HelpClass.javajet"%>
<%

	class DBInputBeginUtil extends DefaultDBInputUtil{
	    
		public void setURL(INode node) {
			
			String dbtypeDefinition = ElementParameterParser.getValue(node, "__TYPE__");
		    String[] dbtypes = dbtypeDefinition.split(";");
		    String javaDbtype   = dbtypes[0];
		    String javaDbDriver   = dbtypes[1]; 
%>
<%
		    if(("undef").equals(javaDbtype)) {
%>
		        String url_<%=cid %> = "jdbc:odbc:"+<%=dbname%>;
<%
		    } else if(("mssql").equals(javaDbtype)) {
%>
		        String url_<%=cid %> = "jdbc:odbc:"+<%=dbname%>;
<%
		    } else if(("oracle").equals(javaDbtype)) {
		        String dbSchema = ElementParameterParser.getValue(node, "__SCHEMA_DB__");
%>
		        String url_<%=cid %> = "jdbc:oracle:thin:@" + <%=dbhost%> + ":" + <%=dbport%> + ":" + <%=dbname%>;
<%
		    } else if(("postgresql").equals(javaDbtype)) {
%>
		        String url_<%=cid %> = "jdbc:postgresql://"+<%=dbhost%>+":"+<%=dbport%>+"/"+<%=dbname%>;
<%
		    } else if(("mysql").equals(javaDbtype)) {
%>
		        String url_<%=cid %> = "jdbc:mysql://" + <%=dbhost%> + ":" + <%=dbport%> + "/" + <%=dbname%>;
<%
		    }
%>
<%
		}
		
		public void createConnection(INode node) {
			dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__");
	    	dbname = ElementParameterParser.getValue(node, "__DBNAME__");
	    	dbuser = ElementParameterParser.getValue(node, "__USER__");

%>
			String driverClass_<%=cid%> = "<%=this.getDirverClassName(node) %>";
			java.lang.Class.forName(driverClass_<%=cid%>);
			<%this.setURL(node);%>
	        String dbUser_<%=cid%> = <%=dbuser%>;

	        <%
	        String passwordFieldName = "__PASS__";
	        %>

	        <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

	        String dbPwd_<%=cid %> = decryptedPassword_<%=cid%>;

			String dbProperties_<%=cid%> = <%=dbproperties%>;
			<%
			log4jCodeGenerateUtil.debugConnectionParams(node);
			log4jCodeGenerateUtil.connect_begin();
			%>
			if(dbProperties_<%=cid%> == null || dbProperties_<%=cid%>.trim().length() == 0) {
				conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>,dbUser_<%=cid%>,dbPwd_<%=cid%>);
			}else{
				dbProperties_<%=cid%> = dbProperties_<%=cid%>.replaceAll("&", "\n");
				java.util.Properties atnParamsPrope_<%=cid%> = new java.util.Properties();
				atnParamsPrope_<%=cid%>.put("user",dbUser_<%=cid%>);
				atnParamsPrope_<%=cid%>.put("password",dbPwd_<%=cid%>);
				atnParamsPrope_<%=cid%>.load(new java.io.ByteArrayInputStream(dbProperties_<%=cid%>.getBytes()));
				conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid%>, atnParamsPrope_<%=cid%>);
			}
<%
			log4jCodeGenerateUtil.connect_end();
		}
		public String getDirverClassName(INode node){
			String dbtypeDefinition = ElementParameterParser.getValue(node, "__TYPE__");
		    String[] dbtypes = dbtypeDefinition.split(";");
		    String javaDbtype   = dbtypes[0];
		    String javaDbDriver   = dbtypes[1]; 
			return javaDbDriver;
		}
		
		//-----------according schema type to generate ResultSet
		public void generateTimestampResultSet(String firstConnName, IMetadataColumn column, int currentColNo) {
		
%>
            java.sql.Timestamp timestamp_<%=cid%> = rs_<%=cid %>.getTimestamp(<%if(isDynamic){%>column_index_<%=cid%><%}else{%><%=currentColNo%><%}%>);
            if(timestamp_<%=cid%> != null) {
                <%=firstConnName%>.<%=column.getLabel()%> = new java.util.Date(timestamp_<%=cid%>.getTime());
            } else {
                <%=firstConnName%>.<%=column.getLabel()%> =  null;
            }
<%
	    } 
	    
	   	public void generateOthersResultSet(String firstConnName, IMetadataColumn column, int currentColNo, String typeToGenerate) {
	   		String javaType = JavaTypesManager.getTypeToGenerate(column.getTalendType(), true);
%>
			Object value_<%=cid%> = rs_<%=cid %>.get<%="BigDecimal".equals(javaType)? "BigDecimal":"Object"%>(<%if(isDynamic){%>column_index_<%=cid%><%}else{%><%=currentColNo%><%}%>);
			if(value_<%=cid%> != null) {
<%
				if(("Integer").equals(javaType)) {
%>
					value_<%=cid%> = new <%=javaType%>(<%=javaType%>.parse<%=javaType.substring(0,3)%>(value_<%=cid%>.toString()));
<%
				} else if(("Byte").equals(javaType) || ("Short").equals(javaType) || ("Long").equals(javaType) || 
						("Float").equals(javaType) || ("Double").equals(javaType)) {
%>
					value_<%=cid%> = new <%=javaType%>(<%=javaType%>.parse<%=javaType%>(value_<%=cid%>.toString()));
<%
				}
%>
				<%=firstConnName%>.<%=column.getLabel()%> = (<%=JavaTypesManager.getTypeToGenerate(column.getTalendType(), true)%>)value_<%=cid%>;
			} else {
<%
				if(column.isNullable()) {
%>
					<%=firstConnName%>.<%=column.getLabel()%> = null;
<%
				} else {
%>
					throw new RuntimeException("Null value in non-Nullable column");
<%    
				}
%>
			}
<%
	    }  

	    //Fix for TDI-26525 for HyperFileSQL in order to resolve query on empty string not work
	    public void generateStringResultSet(String firstConnName, IMetadataColumn column, int currentColNo, String trimMethod) {
%>
			try {
            	tmpContent_<%=cid%> = rs_<%=cid %>.getString(<%if(isDynamic){%>column_index_<%=cid%><%}else{%><%=currentColNo%><%}%>);
			} catch (java.sql.SQLException e) {
				if ("No data found".equals(e.getMessage())) {
					tmpContent_<%=cid%> = "";
				}else {
					throw e;
				}
			}
            if(tmpContent_<%=cid%> != null) {
                <%=firstConnName%>.<%=column.getLabel()%> = tmpContent_<%=cid%><%=trimMethod%>;
            } else {
                <%=firstConnName%>.<%=column.getLabel()%> = null;
            }
<%
	    } 
	    //---------end according schema type to generate ResultSet
	}//end class
	
	dbInputBeginUtil = new DBInputBeginUtil();
%>
    
	<%@ include file="../templates/DB/Input/AbstractDBInputBegin.javajet"%>

