<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    java.util.List
" 
%>

<%
		CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
		INode node = (INode)codeGenArgument.getArgument();
		String cid = node.getUniqueName();
		
		String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
		String accessToken = ElementParameterParser.getValue(node,"__ACCESS_TOKEN__");
	    String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	    String connectionKey = "conn_" + connection;
		String dropboxPath = ElementParameterParser.getValue(node, "__PATH__");
		String outputFile = ElementParameterParser.getValue(node, "__OUTPUT__");
		String store2Local = ElementParameterParser.getValue(node, "__STORE_TO_LOCAL__");
		
		List<IMetadataTable> metadatas = node.getMetadataList();
		IMetadataTable metadata = null;
		if ((metadatas!=null)&&(metadatas.size()>0)) {
			metadata = metadatas.get(0);    
	    }
		
		List< ? extends IConnection> outputConnections = node.getOutgoingSortedConnections();
		
        String dataOutputConnection = null;	
	    for(IConnection conn : outputConnections) {
	        if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
	        	dataOutputConnection = conn.getName();
	        	break;
	        } // if(conn) end
	    } // for(conns) end
%>

<%
if(!"true".equals(useExistingConn)){
%>
	com.dropbox.core.DbxRequestConfig.Builder configBuilder_<%=cid%> = com.dropbox.core.DbxRequestConfig.newBuilder("<%=cid%>");
	String localeName_<%=cid%> = java.util.Locale.getDefault().toString();
	configBuilder_<%=cid%>.withUserLocale(localeName_<%=cid%>);
<%
	String useProxy = ElementParameterParser.getValue(node,"__USE_PROXY__");
	if("true".equals(useProxy)){
		String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
		String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
%>
		java.net.InetSocketAddress socketAddress_<%=cid%> = new java.net.InetSocketAddress(<%=proxyHost%>, <%=proxyPort%>);
		java.net.Proxy proxy_<%=cid%> = new java.net.Proxy(java.net.Proxy.Type.HTTP, socketAddress_<%=cid%>);
		com.dropbox.core.http.StandardHttpRequestor.Config config_<%=cid%> = com.dropbox.core.http.StandardHttpRequestor.Config.builder().withNoConnectTimeout().withProxy(proxy_<%=cid%>).build();
		com.dropbox.core.http.HttpRequestor httpRequestor_<%=cid%> = new com.dropbox.core.http.StandardHttpRequestor(config_<%=cid%>);
		configBuilder_<%=cid%>.withHttpRequestor(httpRequestor_<%=cid%>);
<%
	}
%>
	com.dropbox.core.DbxRequestConfig dbxConfig_<%=cid%> = configBuilder_<%=cid%>.build();
	com.dropbox.core.v2.DbxClientV2 client_<%=cid%> = new com.dropbox.core.v2.DbxClientV2(dbxConfig_<%=cid%>, <%=accessToken%>);
<%
}else{
%>
	com.dropbox.core.v2.DbxClientV2 client_<%=cid%> = (com.dropbox.core.v2.DbxClientV2) globalMap.get("<%=connectionKey%>");
<%
}
%>
	
com.dropbox.core.v2.files.DbxUserFilesRequests filesClient_<%=cid%> = client_<%=cid%>.files();
com.dropbox.core.DbxDownloader<com.dropbox.core.v2.files.FileMetadata> downloader_<%=cid%> = null;
try {
	downloader_<%=cid%> = filesClient_<%=cid%>.download(<%=dropboxPath%>);
} catch (com.dropbox.core.v2.files.DownloadErrorException e_<%=cid%>) {
	throw new Exception(<%=dropboxPath%> + " is not a valid file path on Dropbox");
}
<%
if ("true".equals(store2Local)) {
%>
	java.io.File outputFile_<%=cid%> = new java.io.File(<%=outputFile%>);
	if(!outputFile_<%=cid%>.getParentFile().exists()) {
		outputFile_<%=cid%>.getParentFile().mkdirs();
	}
	try (java.io.FileOutputStream fos_<%=cid%> = new java.io.FileOutputStream(outputFile_<%=cid%>)) {
        downloader_<%=cid%>.download(fos_<%=cid%>);
    }
	<%
	if (dataOutputConnection != null) {
	%>
		<%=dataOutputConnection%>.content = new java.io.FileInputStream(outputFile_<%=cid%>);
		<%=dataOutputConnection%>.fileName = downloader_<%=cid%>.getResult().getName();
	<%
	}
	%>
<%
} else {
%>
	<%
	if (dataOutputConnection != null) {
	%>
		<%=dataOutputConnection%>.content = downloader_<%=cid%>.getInputStream();
		<%=dataOutputConnection%>.fileName = downloader_<%=cid%>.getResult().getName();
	<%
	}
	%>	
<%
}
%>