<%@ jet 
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.utils.NodeUtil
	org.talend.core.model.process.IConnection
	java.util.List
" 
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/DBLogUtil.javajet"%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	
	String cid = node.getUniqueName();
	dbLog = new DBLogUtil(node);
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
	
	String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
	
	String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	
	 boolean useExistingConnection = "true".equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
	String rejectConnName = null;
	List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
	if(rejectConns != null && rejectConns.size() > 0) {
		IConnection rejectConn = rejectConns.get(0);
		rejectConnName = rejectConn.getName();
	}
	boolean manualCommit = !useExistingConnection && !("0").equals(commitEvery);
%>
<%
	//batch mode
	if (("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)) {
		boolean batchMode = ("true").equals(ElementParameterParser.getValue(node, "__BATCH_MODE__"));
		boolean executeBatch = rejectConnName==null && (batchMode||manualCommit);
		if(executeBatch) {
			if(batchMode) {
%>
			if (pstmt_<%=cid %> !=null && batchSizeCounter_<%=cid%> > 0 ) { 
<%
			} else if (!useExistingConnection) { //use batch is not ticked
%>
			if (pstmt_<%=cid %> !=null && commitCounter_<%=cid%> > 0 ) {
<%
			}else {
%>
			if (pstmt_<%=cid %> !=null) {
<%
			} 
%> 
	try {
			<%dbLog.batch().executeTry(dbLog.str(dataAction));%>
			pstmt_<%=cid %>.executeBatch();
			<%dbLog.batch().executeDone(dbLog.str(dataAction));%>
			<%if (("INSERT").equals(dataAction)) {
			%>
				insertedCount_<%=cid%> +=pstmt_<%=cid %>.getUpdateCount(); 
			<%
			}else if (("UPDATE").equals(dataAction)) {
			%>
				updatedCount_<%=cid%> += pstmt_<%=cid %>.getUpdateCount();
			<%
			}else if (("DELETE").equals(dataAction)) {
			%>
				deletedCount_<%=cid%> += pstmt_<%=cid %>.getUpdateCount();
			<%
			}%>
	}catch (java.sql.BatchUpdateException e){
		<%
			if(("true").equals(dieOnError)) {
		%>
			throw(e);
		<%
			}else {
				dbLog.logPrintedException("e.getMessage()");
		%>
		System.err.println(e.getMessage());
		<%
			}
		%>					
	}
	}
<%
		}
	}
%>
	<%if(!useExistingConnection && ("INSERT_OR_UPDATE").equals(dataAction)){%>
		pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("COMMIT;");
		pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement("COMMIT;");
		pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement("COMMIT;");
		pstmt_<%=cid%>.executeUpdate();
		pstmtInsert_<%=cid %>.executeUpdate();
		pstmtUpdate_<%=cid%>.executeUpdate();
	<%}else if(!useExistingConnection && ("UPDATE_OR_INSERT").equals(dataAction)){%>
		pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement("COMMIT;");
		pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement("COMMIT;");
		pstmtInsert_<%=cid %>.executeUpdate();
		pstmtUpdate_<%=cid%>.executeUpdate();
	<%}else{%>
		<%
		 if(!useExistingConnection && !"COPY".equals(dataAction))	{
		 %>
		pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("COMMIT;");
		pstmt_<%=cid%>.executeUpdate();
	<%
		}
	}

	
	if(("INSERT_OR_UPDATE").equals(dataAction)) {
		%>
		if(pstmtUpdate_<%=cid%> != null){

			pstmtUpdate_<%=cid %>.close();
			
		} 
		if(pstmtInsert_<%=cid %> != null){

			pstmtInsert_<%=cid %>.close();
			
		}
		if(pstmt_<%=cid %> != null) {

			pstmt_<%=cid %>.close();
			
		}
		<%
	} else if(("UPDATE_OR_INSERT").equals(dataAction)) {
		%>
		if(pstmtUpdate_<%=cid%> != null){

			pstmtUpdate_<%=cid %>.close();
			
		} 
		if(pstmtInsert_<%=cid %> != null){

			pstmtInsert_<%=cid %>.close();
			
		}
		<%
	} else {
		if (!"COPY".equals(dataAction)) {
		%>
			if(pstmt_<%=cid %> != null) {
	
				pstmt_<%=cid %>.close();
				
			}
		<%
		}
	}

	//////////////// Copy Action //////////////////////
	if ("COPY".equals(dataAction)) { // COPY
		String db_version = ElementParameterParser.getValue(node,"__DB_VERSION__");
		if(useExistingConnection){
			String connName = ElementParameterParser.getValue(node,"__CONNECTION__");
			INode con_node = NodeUtil.getNodeByUniqueName(node.getProcess(),connName);
			if(con_node!=null){
				db_version = ElementParameterParser.getValue(con_node,"__DB_VERSION__");
			}
		}
%>
	if (stmtBuilder_<%=cid%> != null && stmtBuilder_<%=cid%>.length() != 0 ) {
		try {
			java.io.ByteArrayInputStream bais_<%=cid%> = new ByteArrayInputStream(stmtBuilder_<%=cid%>.toString().getBytes());
				<%if("vertica_3.0_jdk_5.jar".equals(db_version) || "vertica_3.5_jdk_5.jar".equals(db_version) || "vertica_4.0_jdk_5.jar".equals(db_version) || "vertica_4.1.7_jdk_5.jar".equals(db_version) || "vertica_4.1.14_jdk_5.jar".equals(db_version)){%>
					<%dbLog.batch().executeTry(dbLog.str(dataAction));%>
        			((com.vertica.PGStatement)stmt_<%=cid%>).executeCopyIn(template_<%=cid%>, bais_<%=cid%>);
        			<%dbLog.batch().executeDone(dbLog.str(dataAction));%>
        			copiedCount_<%=cid%> +=stmt_<%=cid %>.getUpdateCount(); 
        			if (stmt_<%=cid%> != null) {
        				stmt_<%=cid%>.close();
        				stmt_<%=cid%> = null;
        			}
				<%}else{%>
					<%dbLog.batch().executeTry(dbLog.str(dataAction));%>
        			com.vertica.jdbc.VerticaCopyStream vcs_<%=cid%> = new com.vertica.jdbc.VerticaCopyStream((com.vertica.jdbc.VerticaConnection)conn_<%=cid%>,template_<%=cid%>);
        			vcs_<%=cid%>.start();
        			vcs_<%=cid%>.addStream(bais_<%=cid%>);
        			vcs_<%=cid%>.execute();
        			vcs_<%=cid%>.finish();
        			copiedCount_<%=cid%> +=vcs_<%=cid%>.getRowCount();
        			vcs_<%=cid%> = null;
					<%dbLog.batch().executeDone(dbLog.str(dataAction));%>
				<%}%>
			if (bais_<%=cid%> != null ) {
				bais_<%=cid%>.close();
				bais_<%=cid%> = null;
			}
			stmtBuilder_<%=cid%> = null;
		}catch (java.sql.SQLException e){
			<%if(("true").equals(dieOnError)) {
			%>
				throw(e);
			<%
			}else {
				dbLog.logPrintedException("e.getMessage()");
			%>
				System.err.println(e.getMessage());
			<%
			}%>
		}  
	}
<%
	}
	/////// commit end/////////////
	if(!useExistingConnection) {
		if(!("").equals(commitEvery)&&!("0").equals(commitEvery)){
			%>
			if (commitCounter_<%=cid%> > 0 ) {
				<%dbLog.commit().commitTry(null, dbLog.var("commitCounter"));%>
				conn_<%=cid%>.commit();
				<%dbLog.commit().commitDone(null);%>
			}
			<%
		}
		%>	
		<%dbLog.conn().closeTry(null);%>
		conn_<%=cid%>.close();
		<%dbLog.conn().closeDone(null);%>
		resourceMap.put("finish_<%=cid%>", true);
	<%
	}
	%>

<%@ include file="../templates/DB/Output/DBOutputEndGlobalVars.javajet"%>

	nb_line_copied_<%=cid%>=nb_line_copied_<%=cid%> + copiedCount_<%=cid%>;
	globalMap.put("<%=cid %>_NB_LINE_COPIED",nb_line_copied_<%=cid%>);
