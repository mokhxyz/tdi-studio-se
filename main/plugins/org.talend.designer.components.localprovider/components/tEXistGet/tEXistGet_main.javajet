<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
        java.util.Map
	"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/DBLogUtil.javajet"%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String uri = ElementParameterParser.getValue(node, "__URI__");
	String driver = ElementParameterParser.getValue(node, "__DRIVER__");
	String user = ElementParameterParser.getValue(node, "__USERNAME__");
	String pass = ElementParameterParser.getValue(node, "__PASSWORD__");
	String localdir = ElementParameterParser.getValue(node, "__LOCALDIR__");
	String remotedir = ElementParameterParser.getValue(node, "__REMOTEDIR__");
	String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
	List<Map<String, String>> files = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FILES__");
	dbLog = new DBLogUtil(node);
%>
   	java.util.Set<String> keySet_<%=cid%> = map_<%=cid%>.keySet();
  	for(String key_<%=cid%> : keySet_<%=cid%>){
		String tempdir_<%=cid%> =  localdir_<%=cid%>;
		String filemask_<%=cid%> = key_<%=cid%>; 
		String dir_<%=cid%> = null;	
		String mask_<%=cid%> = filemask_<%=cid%>.replaceAll("\\\\", "/") ;	
		int i_<%=cid%> = mask_<%=cid%>.lastIndexOf('/');
  		if (i_<%=cid%>!=-1){
			dir_<%=cid%> = mask_<%=cid%>.substring(0, i_<%=cid%>); 
			mask_<%=cid%> = mask_<%=cid%>.substring(i_<%=cid%>+1);
		}
		
		if (dir_<%=cid%>!=null && !"".equals(dir_<%=cid%>)) tempdir_<%=cid%> = tempdir_<%=cid%> + "/" + dir_<%=cid%>;  
		mask_<%=cid%> = mask_<%=cid%>.replaceAll("\\.", "\\\\.").replaceAll("\\*", ".*");
		final String finalMask_<%=cid%> = mask_<%=cid%>;
		
		for(String resourceName_<%=cid%> : col_<%=cid%>.listResources()){
			if(resourceName_<%=cid%>.matches(finalMask_<%=cid%>)){
				<% dbLog.info(dbLog.str("Try to get file '"),dbLog.var("resourceName"),dbLog.str("' to local dir: '"),dbLog.var("localdir"),dbLog.str("'.")); %>
		    	java.io.File localFile_<%=cid%> = new java.io.File(localdir_<%=cid%> + "/" + resourceName_<%=cid%>);
		        org.xmldb.api.base.Resource resource_<%=cid%> = col_<%=cid%>.getResource(resourceName_<%=cid%>);
		        if("org.exist.xmldb.RemoteXMLResource".equals(resource_<%=cid%>.getClass().getName())){
			        java.io.FileOutputStream fos_<%=cid%> = new java.io.FileOutputStream(localFile_<%=cid%>);
			        org.xmldb.api.modules.XMLResource xmlResource_<%=cid%> = (org.xmldb.api.modules.XMLResource)resource_<%=cid%>;
			        fos_<%=cid%>.write(xmlResource_<%=cid%>.getContent().toString().getBytes(<%=encoding%>));
			        fos_<%=cid%>.close();
		        }else if("org.exist.xmldb.RemoteBinaryResource".equals(resource_<%=cid%>.getClass().getName())){
			        org.exist.xmldb.RemoteBinaryResource remoteBinaryResource_<%=cid%> = (org.exist.xmldb.RemoteBinaryResource)resource_<%=cid%>;
			        remoteBinaryResource_<%=cid%>.getContentIntoAFile(localFile_<%=cid%>);
		        }
		        <% dbLog.info(dbLog.str("Get file successed.")); %>
			}
		}
		nb_file_<%=cid%>++;
 
    }
