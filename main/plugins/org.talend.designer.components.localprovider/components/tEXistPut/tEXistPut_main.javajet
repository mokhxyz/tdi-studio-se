<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
        java.util.Map
	"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/DBLogUtil.javajet"%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String uri = ElementParameterParser.getValue(node, "__URI__");
	String driver = ElementParameterParser.getValue(node, "__DRIVER__");
	String user = ElementParameterParser.getValue(node, "__USERNAME__");
	String pass = ElementParameterParser.getValue(node, "__PASSWORD__");
	String localdir = ElementParameterParser.getValue(node, "__LOCALDIR__");
	String remotedir = ElementParameterParser.getValue(node, "__REMOTEDIR__");
	List<Map<String, String>> files = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FILES__");
	dbLog = new DBLogUtil(node);
%>
   	java.util.Set<String> keySet_<%=cid%> = map_<%=cid%>.keySet();
  	for(String key_<%=cid%> : keySet_<%=cid%>){     
		String tempdir_<%=cid%> =  localdir_<%=cid%>;
		String filemask_<%=cid%> = key_<%=cid%>; 
		String dir_<%=cid%> = null;	
		String mask_<%=cid%> = filemask_<%=cid%>.replaceAll("\\\\", "/") ;	
		int i_<%=cid %> = mask_<%=cid%>.lastIndexOf('/');
  		if (i_<%=cid %>!=-1){
			dir_<%=cid %> = mask_<%=cid%>.substring(0, i_<%=cid%>); 
			mask_<%=cid %> = mask_<%=cid%>.substring(i_<%=cid%>+1);
		}
		if (dir_<%=cid %>!=null && !"".equals(dir_<%=cid %>)) tempdir_<%=cid%> = tempdir_<%=cid%> + "/" + dir_<%=cid%>;  
		mask_<%=cid%> = mask_<%=cid%>.replaceAll("\\.", "\\\\.").replaceAll("\\*", ".*");
		final String finalMask_<%=cid%> = mask_<%=cid%>;
		java.io.File[] listings_<%=cid%> = null;
    	java.io.File file_<%=cid%> = new java.io.File(tempdir_<%=cid%>);
    	if(file_<%=cid%>.isDirectory()){
            listings_<%=cid%> = file_<%=cid%>.listFiles(new java.io.FileFilter(){
                public boolean accept(java.io.File pathname) {
                    boolean result = false;
                    if (pathname != null && pathname.isFile()) {                      
                            result = java.util.regex.Pattern.compile(finalMask_<%=cid%>).matcher(pathname.getName()).find(); 
                    	}
                    return result;
                }
            });
    	} 
    	if(listings_<%=cid%> != null && listings_<%=cid%>.length > 0){
    		for(int m_<%=cid%> = 0; m_<%=cid%> < listings_<%=cid%>.length; m_<%=cid%>++){
    			String fileName_<%= cid %> = listings_<%=cid%>[m_<%=cid %>].getName();
     			if(fileName_<%= cid %>.matches(mask_<%=cid%>)){
     				java.io.File localFile_<%=cid%> = new java.io.File(listings_<%=cid%>[m_<%=cid%>].getAbsolutePath());
     				try{
     					<% dbLog.debug(dbLog.str("Try to put '"),dbLog.var("fileName"),dbLog.str("' into xmldb.")); %>
     					org.xmldb.api.modules.XMLResource document_<%=cid%> = (org.xmldb.api.modules.XMLResource) col_<%=cid%>.createResource(localFile_<%=cid%>.getName(), "XMLResource");
				        document_<%=cid%>.setContent(localFile_<%=cid%>);
				        col_<%=cid%>.storeResource(document_<%=cid%>);
				        <% dbLog.debug(dbLog.str("Put file into xmldb successed.")); %>
     				}catch(org.xmldb.api.base.XMLDBException e_<%=cid%>){
     					org.exist.xmldb.RemoteBinaryResource document_<%=cid%> = (org.exist.xmldb.RemoteBinaryResource) col_<%=cid%>.createResource(localFile_<%=cid%>.getName(), "BinaryResource");
				        document_<%=cid%>.setContent(localFile_<%=cid%>);
				        col_<%=cid%>.storeResource(document_<%=cid%>);
     				}
					nb_file_<%=cid%>++;
      			}
    		}
    	}else{
    		System.err.println("No match file exist!");
    		<%dbLog.logPrintedException(dbLog.str("No match file exist!"));%>
    	}
    }
