<%@ jet 
%>
<%
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	
	String accessKey = ElementParameterParser.getValue(node, "__ACCESS_KEY__");

	boolean configClient = "true".equals(ElementParameterParser.getValue(node, "__CONFIG_CLIENT__"));
	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
	List<Map<String,String>> clientConfiguration = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__CLIENT_CONFIGURATION__");
	String region = ElementParameterParser.getValue(node,"__REGION__");
	
	boolean assumeRole = "true".equals(ElementParameterParser.getValue(node, "__ASSUME_ROLE__"));
	String arn = ElementParameterParser.getValue(node,"__ARN__");
	String roleSessionName = ElementParameterParser.getValue(node,"__ROLE_SESSION_NAME__");
	
	boolean setStsEndpoint = "true".equals(ElementParameterParser.getValue(node,"__SET_STS_ENDPOINT__"));
	String stsEndpoint = ElementParameterParser.getValue(node,"__STS_ENDPOINT__");
	
	String sessionDuration = ElementParameterParser.getValue(node,"__SESSION_DURATION__");
	if(sessionDuration == null || sessionDuration.isEmpty()) {
		sessionDuration = "15";
	}
	
	if(("true").equals(useExistingConn)) {
		String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
		String conn = "conn_" + connection;;
		%>
		com.amazonaws.services.sqs.AmazonSQS conn_<%=cid%> = (com.amazonaws.services.sqs.AmazonSQSClient)globalMap.get("<%=conn%>");
		<%
		if(isLog4jEnabled){
		%>	
			log.info("<%=cid%> - Get an free connection from " + "<%=connection%>" + ".");
		<%
		}
	}else{
	%>
	    <%
	    if(isLog4jEnabled){
		%>	
			log.info("<%=cid%> - Creating new connection.");
		<%
		}
		boolean inherit_credentials = "true".equals(ElementParameterParser.getValue(node, "__INHERIT_CREDENTIALS__"));
		if(!inherit_credentials) {
	    	String passwordFieldName = "__SECRET_KEY__";
	    %>
    
    	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

		com.amazonaws.auth.AWSCredentials credentials_<%=cid%> = new com.amazonaws.auth.BasicAWSCredentials(<%=accessKey%>,decryptedPassword_<%=cid%>);
		com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_<%=cid%> = new com.amazonaws.internal.StaticCredentialsProvider(credentials_<%=cid%>);
		<%
		} else {
		%>
		com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_<%=cid%> = new com.amazonaws.auth.InstanceProfileCredentialsProvider();
		<%
		}
		%>
		com.amazonaws.ClientConfiguration cc_<%=cid%> = new com.amazonaws.ClientConfiguration();
		<%
		boolean configClientPresent = false;
		if(configClient && clientConfiguration.size()>0){
			configClientPresent = true;
			boolean setBuffer = false;
			for(Map<String,String> map :clientConfiguration){
				String client_parameter = map.get("CLIENT_PARAMETER");
				String value = map.get("VALUE");
				if(!setBuffer && ("SocketSendBufferSizeHints".equals(client_parameter) || "SocketReceiveBufferSizeHints".equals(client_parameter))){
					setBuffer=true;
					%>
					int scketSendBufferSizeHints_<%=cid%> = 0;
					int socketReceiveBufferSizeHints_<%=cid%> = 0;
				<%
				}
				if("SocketSendBufferSizeHints".equals(client_parameter)){
				%>
					scketSendBufferSizeHints_<%=cid%> = <%=value%>;
				<%
				}else if("SocketReceiveBufferSizeHints".equals(client_parameter)){
				%>
					socketReceiveBufferSizeHints_<%=cid%> = <%=value%>;
				<%
				}else if("Protocol".equals(client_parameter)){
				%>
					cc_<%=cid%>.setProtocol(com.amazonaws.Protocol.<%=value.toUpperCase().replaceAll("\"","")%>);
				<%
				}else{
				%>
					cc_<%=cid%>.set<%=client_parameter%>(<%=value%>);
				<%
				}
			}
			if(setBuffer){
			%>
				cc_<%=cid%>.setSocketBufferSizeHints(scketSendBufferSizeHints_<%=cid%>,socketReceiveBufferSizeHints_<%=cid%>);
			<%
			}
		}
		if(assumeRole) {
		%>
			int sessionDurationSeconds_<%=cid%> = <%=sessionDuration%> * 60;
			com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder stsBuilder_<%=cid%> = 
					new com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder(<%=arn%>, <%=roleSessionName%>).withLongLivedCredentialsProvider(credentialsProvider_<%=cid%>)
					.withRoleSessionDurationSeconds(sessionDurationSeconds_<%=cid%>);
					
			<%
			if(setStsEndpoint) {
			%>
				stsBuilder_<%=cid%>.withServiceEndpoint(<%=stsEndpoint%>);
			<%
			}
			
			if(configClientPresent) {
			%>
				stsBuilder_<%=cid%>.withClientConfiguration(cc_<%=cid%>);
			<%
			}
			%>
			
			credentialsProvider_<%=cid%> = stsBuilder_<%=cid%>.build();
			
		<%
		}
		%>
		com.amazonaws.services.sqs.AmazonSQS conn_<%=cid%> = new com.amazonaws.services.sqs.AmazonSQSClient(
					credentialsProvider_<%=cid%>,
					cc_<%=cid%>);
		<%
		if(region!=null && !region.isEmpty() && !"DEFAULT".equalsIgnoreCase(region)){
		%>
			conn_<%=cid%>.setRegion(com.amazonaws.regions.RegionUtils.getRegion(<%=region%>));
		<%
		}
		if(isLog4jEnabled){
		%>	
			log.info("<%=cid%> - Creating new connection successfully.");
		<%
		}
	}
	%>
