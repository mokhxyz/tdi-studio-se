			<%
			String leadKeyType = ElementParameterParser.getValue(node, "__LEAD_KEYTYPE_REST__");
            List<Map<String, String>> includeTypesListRest = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__INCLUDE_TYPES_REST__");
			List<Map<String, String>> excludeTypesListRest = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__EXCLUDE_TYPES_REST__");
			%>
			org.talend.marketo.MarketoRestClient client_<%=cid%> = new org.talend.marketo.MarketoRestClient(<%=endpoint%>,decryptedPassword_<%=cid%>,<%=clientAccessID%>);
			client_<%=cid%>.setTimeOut(<%=timeout%>);
			client_<%=cid%>.refreshToken();
			<%
			if("getLeadActivity".equals(operation)){
				if(setIncludeTypes){
					%>
					java.util.Set<Integer> includeTypes_<%=cid%> = new java.util.HashSet<Integer>(){
                		{
	                    	<%
	                    	for(Map<String,String> includeTypesMap:includeTypesListRest){
		    				%>
		    					add(<%=includeTypesMap.get("TYPES")%>);
		    				<%
		    				} 
	                    	%>
                		}
            		};
				<%
				}else{
				%>
					java.util.Set<Integer> includeTypes_<%=cid%> = client_<%=cid%>.getLocalActivityTypes().keySet();
					<%
					if(setExcludeTypes){
		    			for(Map<String,String> excludeTypesMap:excludeTypesListRest){
		    			%>
		    				includeTypes_<%=cid%>.remove(<%=excludeTypesMap.get("TYPES")%>);
		    			<%
		    			} 
					}
				}
			}
			if("getLeadActivity".equals(operation) || "getLeadChanges".equals(operation)){
				String sinceDateTime = ElementParameterParser.getValue(node, "__SINCE_DATETIME__");
			%>
				String nextPageToken_<%=cid%> = client_<%=cid%>.getPageToken(<%=sinceDateTime%>);
			<%
			}else{
			%>
			org.talend.marketo.response.ResultBasic leadRecords_<%=cid%> = null;
			java.util.List<java.util.Map<String, String>> leads_<%=cid%> = null;
				String[] includeAttributes_<%=cid%> = new String[]{
				<%for(String key:fldMapping.keySet()){%>	
	    			<%=fldMapping.get(key)%>,		
				<%}%>
				};
			<%
			}
			if("getLead".equals(operation)){
			%>
				try{
					for(int i_<%=cid%>=0;i_<%=cid%> <= reConnMaxNum_<%=cid%>;i_<%=cid%>++){
	            		try{
	                		leadRecords_<%=cid%>  = client_<%=cid%>.getLead(includeAttributes_<%=cid%>,"<%=leadKeyType%>",<%=leadKeyValue%>);
	                		if(client_<%=cid%>.isAccessTokenExpired(leadRecords_<%=cid%>.getErrors())){
	                			client_<%=cid%>.refreshToken();
	                			continue;
	                		}else{
	                			break;
	                		}
						}catch(java.lang.Exception ex_<%=cid%>){
							if(i_<%=cid%> != reConnMaxNum_<%=cid%>){
								System.err.println("Connection error:");
								System.err.println(ex_<%=cid%>.getMessage());
								System.err.println("Waiting to retry...");
								Thread.sleep(<%=attemptsInterval%>);
								System.err.println("Attempting to reconnect...");
							}else{
								throw ex_<%=cid%>;
							}
						}
	                }
					globalMap.put("<%=cid %>_NB_CALL",++nb_call_<%=cid%>);  
				}catch(java.lang.Exception ex_<%=cid%>){
					<%
			        if (dieOnError) {
			        %>
			            throw(ex_<%=cid%>);
			        <%
			        } else {
			        %>
			        	System.err.println(ex_<%=cid%>.getMessage());
			        <%
			        }
			        %>
				}
				if(leadRecords_<%=cid%> != null && leadRecords_<%=cid%>.getResult()!=null){
					leads_<%=cid%> = leadRecords_<%=cid%>.getResult();
					for (java.util.Map<String, String> record_<%=cid%>:leads_<%=cid%>) {
			<%			
			}else if("getMutipleLeads".equals(operation)){
			%>
	        	String nextPageToken_<%=cid%> = null;
	        	<%
	        	if("LeadKeySelector".equals(leadSelector)){
	        	%>
	        		for(String[] valuesArray_<%=cid%>:leadKeyValues_<%=cid %>){
	        	<%
	        	}
				if("StaticListSelector".equals(leadSelector)){
					if("STATIC_LIST_NAME".equals(listParam)){
				%>
						Integer listId_<%=cid%> =  client_<%=cid%>.getListIdByName(<%=listParamValue%>);
					<%
					}else{
					%>
						int listId_<%=cid%> = <%=listParamValue%>;
					<%
					}
				}
				%>
	            while(true){
					for(int i_<%=cid%>=0;i_<%=cid%> <= reConnMaxNum_<%=cid%>;i_<%=cid%>++){
	            		try{
	            			<%
							if("LeadKeySelector".equals(leadSelector)){
								batchSize = ElementParameterParser.getValue(node, "__MAX_RETURN__");
								%>
									leadRecords_<%=cid%> = client_<%=cid%>.getMultipleLeads(includeAttributes_<%=cid%>, "<%=leadKeyType%>",valuesArray_<%=cid%>,<%=batchSize%>, nextPageToken_<%=cid%>);
							<%
							}else if("StaticListSelector".equals(leadSelector)){
				            %>
								leadRecords_<%=cid%> = client_<%=cid%>.getLeadsByListId(includeAttributes_<%=cid%>, <%=batchSize%>, nextPageToken_<%=cid%>,listId_<%=cid%>);
							<%
							}
							%>
							globalMap.put("<%=cid %>_NB_CALL",++nb_call_<%=cid%>);
	                		if(client_<%=cid%>.isAccessTokenExpired(leadRecords_<%=cid%>.getErrors())){
		                		client_<%=cid%>.refreshToken();
		                		continue;
		                	}else{
		                		break;
		                	}	
						}catch(java.lang.Exception ex_<%=cid%>){
							if(i_<%=cid%> != reConnMaxNum_<%=cid%>){
								System.err.println("Connection error:");
								System.err.println(ex_<%=cid%>.getMessage());
								System.err.println("Waiting to retry...");
								Thread.sleep(<%=attemptsInterval%>);
								System.err.println("Attempting to reconnect...");
							}else{
								throw ex_<%=cid%>;
							}
						}
	                }
	            	if(leadRecords_<%=cid%> != null && leadRecords_<%=cid%>.getResult()!=null){
		            	leads_<%=cid%> = leadRecords_<%=cid%>.getResult();
		            	for (java.util.Map<String, String> record_<%=cid%>:leads_<%=cid%>) {
<%
			}else if("getLeadActivity".equals(operation)){
%>
			java.util.List<java.util.List<Integer>> activityTypes_<%=cid%> = org.talend.marketo.MarketoUtils.splitList(java.util.Arrays.asList(includeTypes_<%=cid%>.toArray(new Integer[0])),10);
			for(java.util.List<Integer> activPageIds_<%=cid%>:activityTypes_<%=cid%>){
				while(true){
					org.talend.marketo.response.ResultGetLeadActivities activityRecords_<%=cid%> = null;
					java.util.List<org.talend.marketo.type.LeadActivityRecord> activities_<%=cid%> = null;
                	for(int i_<%=cid%>=0;i_<%=cid%> <= reConnMaxNum_<%=cid%>;i_<%=cid%>++){
                		try{
	                		activityRecords_<%=cid%> = client_<%=cid%>.getLeadActivities(activPageIds_<%=cid%>, nextPageToken_<%=cid%>,<%=batchSize%>,null);
	                		globalMap.put("<%=cid %>_NB_CALL",++nb_call_<%=cid%>);	
	                		if(client_<%=cid%>.isAccessTokenExpired(activityRecords_<%=cid%>.getErrors())){
	                			client_<%=cid%>.refreshToken();
	                			continue;
	                		}else{
	                			break;
	                		}
						}catch(java.lang.Exception ex_<%=cid%>){
							if(i_<%=cid%> != reConnMaxNum_<%=cid%>){
								System.err.println("Connection error:");
								System.err.println(ex_<%=cid%>.getMessage());
								System.err.println("Waiting to retry...");
								Thread.sleep(<%=attemptsInterval%>);
								System.err.println("Attempting to reconnect...");
							}else{
								throw ex_<%=cid%>;
							}
						}
	                }
					if(activityRecords_<%=cid%> != null && activityRecords_<%=cid%>.getResult()!=null){
						activities_<%=cid%> = activityRecords_<%=cid%>.getResult();
		                for (org.talend.marketo.type.LeadActivityRecord activityRecord_<%=cid%>:activities_<%=cid%>) {
		                    java.util.Map<String, String> record_<%=cid%> = client_<%=cid%>.readActivity(activityRecord_<%=cid%>);
			<%
			}else if("getLeadChanges".equals(operation)){
				String fields = ElementParameterParser.getValue(node, "__FIELD_LIST__");
			%>
			String[] fields_<%=cid%> = (<%=fields%>!=null && <%=fields%>.length()>0)?<%=fields%>.split(","):new String[0];
            while(true){
            	org.talend.marketo.response.ResultGetLeadChanges changeRecords_<%=cid%> = null;
				java.util.List<org.talend.marketo.type.LeadChangeRecord> changes_<%=cid%> = null;
				for(int i_<%=cid%>=0;i_<%=cid%> <= reConnMaxNum_<%=cid%>;i_<%=cid%>++){
            		try{
                		changeRecords_<%=cid%> = client_<%=cid%>.getLeadChanges(nextPageToken_<%=cid%>, <%=batchSize%>,null,fields_<%=cid%> );
                		globalMap.put("<%=cid %>_NB_CALL",++nb_call_<%=cid%>);
                		if(client_<%=cid%>.isAccessTokenExpired(changeRecords_<%=cid%>.getErrors())){
                			client_<%=cid%>.refreshToken();
                			continue;
                		}else{
                			break;
                		}
					}catch(java.lang.Exception ex_<%=cid%>){
						if(i_<%=cid%> != reConnMaxNum_<%=cid%>){
							System.err.println("Connection error:");
							System.err.println(ex_<%=cid%>.getMessage());
							System.err.println("Waiting to retry...");
							Thread.sleep(<%=attemptsInterval%>);
							System.err.println("Attempting to reconnect...");
						}else{
							throw ex_<%=cid%>;
						}
					}
                }
            
                if(changeRecords_<%=cid%> != null && changeRecords_<%=cid%>.getResult()!=null){
	                changes_<%=cid%> = changeRecords_<%=cid%>.getResult();
	                for (org.talend.marketo.type.LeadChangeRecord change_<%=cid%>:changes_<%=cid%>) {
	                    java.util.Map<String, String> record_<%=cid%> = client_<%=cid%>.readChange(change_<%=cid%>);
			<%
			}
			for( int i = 0; i < columnList.size(); i++) {
			
				IMetadataColumn column = columnList.get(i);
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
				JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
				String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
				%>
				if(record_<%=cid%>.get(<%=fldMapping.get(column.getLabel())%>)!=null){
    				<%	
    				if (javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
    				%>				
    					<%=outgoingConn.getName()%>.<%=column.getLabel()%> = record_<%=cid%>.get(<%=fldMapping.get(column.getLabel())%>);
    				<%
    				} else if(javaType == JavaTypesManager.DATE) { // Date
	    				if("getMutipleLeads".equals(operation)||"getLead".equals(operation)){
	    				%>
	    					<%=outgoingConn.getName()%>.<%=column.getLabel()%> = ParserUtils.parseTo_Date(record_<%=cid%>.get(<%=fldMapping.get(column.getLabel())%>).replaceFirst("Z", ""), "yyyy-MM-dd'T'HH:mm:ss");
	    				<%
	    				}else{
	    				%>
	    					<%=outgoingConn.getName()%>.<%=column.getLabel()%> = ParserUtils.parseTo_Date(record_<%=cid%>.get(<%=fldMapping.get(column.getLabel())%>), "yyyy-MM-dd'T'HH:mm:ssZ");
	    				<%
	    				}
    				}  else  { // other
    				%>							
    					<%=outgoingConn.getName()%>.<%=column.getLabel()%> = ParserUtils.parseTo_<%= typeToGenerate %>(record_<%=cid%>.get(<%=fldMapping.get(column.getLabel())%>));	
    				<%
    				}
    				%>
    			}else{
    				<%=outgoingConn.getName()%>.<%=column.getLabel()%> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
    			}
			<%
			}
			%>



        
