<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.Map
		java.util.List
	"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
	String accesskey = ElementParameterParser.getValue(node, "__ACCESS_KEY__");
	String provider = ElementParameterParser.getValue(node, "__PROVIDER__");
	String imageId = ElementParameterParser.getValue(node, "__IMAGE_ID__");
	String region = ElementParameterParser.getValue(node, "__REGION__");
	String zone = ElementParameterParser.getValue(node, "__ZONE__");
	int instanceCount = 0;
	String instanceName = ElementParameterParser.getValue(node, "__INSTANCE_NAME__");
	String type = ElementParameterParser.getValue(node, "__TYPE__");
	boolean proceedWithKeyPair = "true".equals(ElementParameterParser.getValue(node, "__PROCEED_WITH_KEYPAIR__"));
	String keypairOption = ElementParameterParser.getValue(node, "__KEYPAIR_OPTION__");
	String keypair = ElementParameterParser.getValue(node, "__KEYPAIR__");
	String keypairFolder = ElementParameterParser.getValue(node, "__KEYPAIR_FOLDER__");
	List<Map<String, String>> securityGroups = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, "__SECURITY_GROUPS__");
	List<Map<String, String>> volumes = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__VOLUMES__");
	
	String providerId = "";
	if("AWS_EC2".equals(provider)) {
		providerId = "aws-ec2";
	}
	
	String securityGroupsString = null;
	if(securityGroups.size() > 0){
		boolean isFirstGroup = true;
		for(Map<String, String> item : securityGroups){
			if(isFirstGroup) {
				isFirstGroup = false;
				securityGroupsString = item.get("GROUP");
			} else {
				securityGroupsString += " ," + item.get("GROUP");
			}
		} 
	}
	
	try {
		instanceCount = Integer.parseInt(ElementParameterParser.getValue(node, "__INSTANCE_COUNT__"));
	} catch (Exception e) {
		
%>
		if(true) {
			throw new Exception("The instance count must be a numeric.");
		}
<%
	}
%>
	        
	<%
	String passwordFieldName = "__SECRET_KEY__";
	%>
	
	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
   	
	org.jclouds.compute.ComputeServiceContext context_<%=cid%> = new org.jclouds.compute.ComputeServiceContextFactory().createContext("<%=providerId%>", <%=accesskey%>, decryptedPassword_<%=cid%>);
	org.jclouds.compute.ComputeService client_<%=cid%> = context_<%=cid%>.getComputeService();
	
<%
	if(proceedWithKeyPair && "CREATE_KEYPAIR".equals(keypairOption)) {
%>
		org.jclouds.ec2.services.KeyPairClient keyPairClient_<%=cid%> = org.jclouds.ec2.EC2Client.class.cast(context_<%=cid%>.getProviderSpecificContext().getApi()).getKeyPairServices();
		org.jclouds.ec2.domain.KeyPair result_<%=cid%> = keyPairClient_<%=cid%>.createKeyPairInRegion(<%=region%>, <%=keypair%>);
		java.io.FileWriter fstream_<%=cid%> = new java.io.FileWriter(<%=keypairFolder%> + "/" + <%=keypair%> +".pem");
		java.io.BufferedWriter out_<%=cid%> = new java.io.BufferedWriter(fstream_<%=cid%>);
		out_<%=cid%>.write(result_<%=cid%>.getKeyMaterial());
		out_<%=cid%>.close();
<%
	}

	if("AWS_EC2".equals(provider)) {
%>
		org.jclouds.aws.ec2.compute.AWSEC2TemplateOptions options_<%=cid%> = new org.jclouds.aws.ec2.compute.AWSEC2TemplateOptions();
<%
	}
	if(proceedWithKeyPair && "CREATE_KEYPAIR".equals(keypairOption)) {
%>
		options_<%=cid%>.overrideLoginPrivateKey(result_<%=cid%>.getKeyMaterial());
<%
	}
%>
	options_<%=cid%>.as(<%="AWS_EC2".equals(provider)?"org.jclouds.aws.ec2.compute.AWSEC2TemplateOptions":""%>.class)
	.<%=(proceedWithKeyPair?("USE_EXISTING".equals(keypairOption)?"keyPair("+keypair+")":"keyPair(result_"+cid+".getKeyName())"):"noKeyPair()")%>
	<%=securityGroupsString!=null?".securityGroups("+securityGroupsString+")":""%>
<%
	for(Map<String, String> volume : volumes) { //1
			String volume_type = volume.get("VOLUME_TYPE");
			if("ROOT".equals(volume_type)) {
%>
				.mapNewVolumeToDeviceName(<%=volume.get("DEVICE")%>, <%=volume.get("SIZE")%>, <%="true".equals(volume.get("DELETE_ON_TERMINATION"))%>)
<%
			} else if("EBS".equals(volume_type)) {
%>
				.mapEBSSnapshotToDeviceName(<%=volume.get("DEVICE")%>, <%=volume.get("SNAPSHOT_ID")%>, <%=volume.get("SIZE")%>, <%="true".equals(volume.get("DELETE_ON_TERMINATION"))%>)
<%
			} else if("EPHEMERAL".equals(volume_type)) {
%>
				.mapEphemeralDeviceToDeviceName(<%=volume.get("DEVICE")%>, <%=volume.get("VIRTUAL_NAME")%>)
<%
			}
	}
%>
	;
	
	org.jclouds.compute.domain.Template template_<%=cid%> = context_<%=cid%>.getComputeService().templateBuilder()
		.imageId(<%=region%> +"/" + <%=imageId%>)
		.hardwareId(org.jclouds.ec2.domain.InstanceType.<%=type%>)
		.locationId(<%=zone%>)
		.options(options_<%=cid%>).build();
	
	java.util.Set<? extends org.jclouds.compute.domain.NodeMetadata> nodes_<%=cid%> = context_<%=cid%>.getComputeService().createNodesInGroup(<%=instanceName%>.toLowerCase(), <%=instanceCount%>, template_<%=cid%>);
	
	globalMap.put("<%=cid %>_NODE_GROUP", <%=instanceName%>.toLowerCase());
	globalMap.put("<%=cid %>_NODES", nodes_<%=cid%>);