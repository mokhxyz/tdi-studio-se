<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    java.util.List
" 
%>
	<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%>
<%
		CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
		INode node = (INode)codeGenArgument.getArgument();
		String cid = node.getUniqueName();
		
		String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
		String accessToken = ElementParameterParser.getValue(node, "__ACCESS_TOKEN__");
		String refreshToken = ElementParameterParser.getValue(node, "__REFRESH_TOKEN__");
		
		String clientId = ElementParameterParser.getValue(node, "__CLIENT_ID__");
		String clientSecret = ElementParameterParser.getValue(node, "__CLIENT_SECRET__");
		
		String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	    String connectionKey = "\"conn_" + connection+"\"";
		
		String boxPath = ElementParameterParser.getValue(node, "__PATH__");
		String outputFolder = ElementParameterParser.getValue(node, "__OUTPUT__");
		String storeToLocal = ElementParameterParser.getValue(node, "__STORE_TO_LOCAL__");
		
		final boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
				log4jFileUtil.componentStartInfo(node);
        String dataOutputConnection = null;
	    
		List< ? extends IConnection> outputConnections = node.getOutgoingSortedConnections();
	    for(IConnection conn : outputConnections) {
	        if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
	        	dataOutputConnection = conn.getName();
	        	break;
	        } // if(conn) end
	    } // for(conns) end
%>
<%
if(!"true".equals(useExistingConn)){
	String useProxy = ElementParameterParser.getValue(node,"__USE_PROXY__");
	String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
	String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
%>
	com.box.boxjavalibv2.BoxRESTClient <%=cid%>_httpClient = new com.box.boxjavalibv2.BoxRESTClient();
<%
	if("true".equals(useProxy)){
%>   
		<%=cid%>_httpClient.setConnectionTimeOut(3000);
		String <%=cid%>_proxyHost = <%=proxyHost%>;
		if (null == <%=cid%>_proxyHost || <%=cid%>_proxyHost.isEmpty())
		{
			throw new Exception("Proxy host can not be empty");
		}
		org.apache.http.HttpHost <%=cid%>_proxy = new org.apache.http.HttpHost(<%=cid%>_proxyHost, <%=proxyPort%>, "http");
		org.apache.http.client.HttpClient <%=cid%>_cl = <%=cid%>_httpClient.getRawHttpClient();
		<%=cid%>_cl.getParams().setParameter(org.apache.http.conn.params.ConnRoutePNames.DEFAULT_PROXY, <%=cid%>_proxy);
<%
	}else{
%>
<%
	}
%>
	com.box.boxjavalibv2.BoxClient <%=cid%>_client = null;
	String <%=cid%>_accessToken = <%=accessToken%>;
	String <%=cid%>_refreshToken = <%=refreshToken%>;
	String <%=cid%>_clientId = <%=clientId%>;
	String <%=cid%>_clientSecret = <%=clientSecret%>;
	if (null == <%=cid%>_clientId || <%=cid%>_clientId.isEmpty() || null == <%=cid%>_clientSecret || <%=cid%>_clientSecret.isEmpty()) {
		throw new Exception("Client Id and secret can not be empty");
	}
	if(globalMap.get("get_<%=cid%>") == null)
	{
		<%=cid%>_client = new com.box.boxjavalibv2.BoxClient(<%=cid%>_clientId, <%=cid%>_clientSecret, null, null, <%=cid%>_httpClient, new com.box.boxjavalibv2.BoxConfigBuilder().build());
		
		if((<%=cid%>_accessToken == null || "".equals(<%=cid%>_accessToken.trim())) && (<%=cid%>_refreshToken == null || "".equals(<%=cid%>_refreshToken.trim()))) {
			throw new Exception("One of Access token or Refresh token should be provided");
		} else {
			java.util.Map<String, Object> <%=cid%>_map = new java.util.HashMap<String, Object>();
		if (<%=cid%>_accessToken != null && !<%=cid%>_accessToken.isEmpty()  && !<%=cid%>_accessToken.trim().matches("\"?\"?")
		 && <%=cid%>_refreshToken != null && !<%=cid%>_refreshToken.isEmpty() && !<%=cid%>_refreshToken.trim().matches("\"?\"?")) {
			<%=cid%>_map.put(com.box.boxjavalibv2.dao.BoxOAuthToken.FIELD_ACCESS_TOKEN, <%=cid%>_accessToken);
			<%=cid%>_map.put(com.box.boxjavalibv2.dao.BoxOAuthToken.FIELD_REFRESH_TOKEN, <%=cid%>_refreshToken);
		    <%=cid%>_client.getOAuthDataController().setAutoRefreshOAuth(true);
		} else if (<%=cid%>_accessToken != null && !<%=cid%>_accessToken.isEmpty() && !<%=cid%>_accessToken.trim().matches("\"?\"?")) {
		    <%=cid%>_map.put(com.box.boxjavalibv2.dao.BoxOAuthToken.FIELD_ACCESS_TOKEN, <%=cid%>_accessToken);
		} else if (<%=cid%>_refreshToken != null && !"".equals(<%=cid%>_refreshToken.trim()) && !<%=cid%>_refreshToken.trim().matches("\"?\"?")) {
		    <%=cid%>_map.put(com.box.boxjavalibv2.dao.BoxOAuthToken.FIELD_REFRESH_TOKEN, <%=cid%>_refreshToken);
		    <%=cid%>_client.getOAuthDataController().setAutoRefreshOAuth(true);
		}  
		    <%=cid%>_client.authenticate(new com.box.boxjavalibv2.dao.BoxOAuthToken(<%=cid%>_map));
			globalMap.put("get_<%=cid%>", <%=cid%>_client);
		}
	} else {
		<%=cid%>_client = (com.box.boxjavalibv2.BoxClient)globalMap.get("get_<%=cid%>");
	}
<%
	} else {
%>
	com.box.boxjavalibv2.BoxClient <%=cid%>_client = (com.box.boxjavalibv2.BoxClient)globalMap.get(<%=connectionKey%>);
<%
}
%>
	String <%=cid%>_boxPath = <%=boxPath%>;
	if (null == <%=cid%>_boxPath || <%=cid%>_boxPath.isEmpty()) {
		throw new Exception("Box path can not be empty");
	}
	String <%=cid%>_path = normalizePath(<%=cid%>_boxPath);
	boolean <%=cid%>_hasError = false;
	String <%=cid%>_name = getFolderFromPath(<%=cid%>_path);

	com.box.boxjavalibv2.dao.BoxFile <%=cid%>_boxFile = null;
	com.box.boxjavalibv2.dao.BoxFolder <%=cid%>_boxFolder = null;
	com.box.restclientv2.requestsbase.BoxDefaultRequestObject <%=cid%>_requestObject = new com.box.restclientv2.requestsbase.BoxDefaultRequestObject();
	
	    String parentPath = normalizePath(<%=cid%>_path.replace(<%=cid%>_name, ""));
                
        <%=cid%>_boxFolder = <%=cid%>_client.getFoldersManager().getFolder("0", <%=cid%>_requestObject);
	
        List<String> <%=cid%>_paths = new java.util.ArrayList<String>(java.util.Arrays.asList(parentPath.split("/")));

        <%=cid%>_boxFolder = getBoxFolderRecursively(<%=cid%>_paths, <%=cid%>_boxFolder, <%=cid%>_client);
	
		com.box.boxjavalibv2.dao.BoxCollection <%=cid%>_searchResults = <%=cid%>_boxFolder.getItemCollection();
		for (com.box.boxjavalibv2.dao.BoxTypedObject <%=cid%>_entry : <%=cid%>_searchResults.getEntries())
		{
		
		     if(<%=cid%>_entry.getValue("name").equals(<%=cid%>_name)){
                   if("folder".equals(<%=cid%>_entry.getType())){
                        <%=cid%>_hasError = true;
                        throw new Exception(<%=boxPath%> + " exists but is a directory");   
                   }else{
                        <%=cid%>_boxFile = <%=cid%>_client.getFilesManager().getFile(<%=cid%>_entry.getId(),null);
                   }
            }
		}

	if (<%=cid%>_boxFile == null && !<%=cid%>_hasError) {
		throw new Exception("No file found in " + <%=cid%>_boxPath);
	} else if (<%=cid%>_boxFile == null && <%=cid%>_hasError) {
	//Do Nothing, error already occured
	} else {
		java.io.OutputStream <%=cid%>_fos = null;
		java.io.InputStream <%=cid%>_bais = null;
		try {
<% if("true".equals(storeToLocal)) { %>
			String <%=cid%>_outputFolder = <%=outputFolder%>;
			if (null == <%=cid%>_outputFolder || <%=cid%>_outputFolder.isEmpty()) {
				throw new Exception("Output folder can not be empty");
			}
		    java.io.File <%=cid%>_f = new java.io.File(<%=cid%>_outputFolder);
			if(!<%=cid%>_f.getParentFile().exists()){
				<%=cid%>_f.getParentFile().mkdirs();
			}
			<%=cid%>_fos = new java.io.FileOutputStream(<%=cid%>_f);
			<%=cid%>_client.getFilesManager().downloadFile(<%=cid%>_boxFile.getId(), new java.io.OutputStream[] {<%=cid%>_fos}, null, new com.box.restclientv2.requestsbase.BoxDefaultRequestObject());
			
	<%if(dataOutputConnection != null){%>			
			<%=dataOutputConnection%>.fileName = <%=cid%>_f.getName();
			<%=dataOutputConnection%>.content = new java.io.FileInputStream(<%=cid%>_f);
	<%}%>
<%} else {%>
			<%=cid%>_fos = new java.io.ByteArrayOutputStream();
			<%=cid%>_client.getFilesManager().downloadFile(<%=cid%>_boxFile.getId(), new java.io.OutputStream[] {<%=cid%>_fos}, null, new com.box.restclientv2.requestsbase.BoxDefaultRequestObject());
			((ByteArrayOutputStream) <%=cid%>_fos).flush();
			((ByteArrayOutputStream) <%=cid%>_fos).close();
			<%=cid%>_bais = new java.io.ByteArrayInputStream(((ByteArrayOutputStream) <%=cid%>_fos).toByteArray());
<%if(dataOutputConnection != null){%>
			<%=dataOutputConnection%>.fileName = <%=cid%>_boxFile.getName();
			<%=dataOutputConnection%>.content = <%=cid%>_bais;	
<%} else {%>
			globalMap.put("<%=cid %>_INPUT_STREAM", <%=cid%>_bais);
			globalMap.put("<%=cid %>_FILE_NAME", <%=cid%>_boxFile.getName());
<%}
}%>
			
		} finally {
			if(<%=cid%>_fos != null){
				try {
					<%=cid%>_fos.close();
				} catch (java.io.IOException e) {
					// Ignore
				}
			}
		}
	
		
		
	}	
			