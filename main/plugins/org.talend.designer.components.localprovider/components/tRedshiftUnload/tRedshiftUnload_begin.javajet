<%@ jet
imports="
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.MetadataTalendType
	org.talend.core.model.metadata.MappingTypeRetriever
	java.util.List
	java.util.ArrayList
	java.util.Map
	java.util.HashMap
"
%>
<%@ include file="../templates/Log4j/Log4jDBConnUtil.javajet"%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
	String host = ElementParameterParser.getValue(node, "__HOST__");
	String port = ElementParameterParser.getValue(node, "__PORT__");
	String dbName = ElementParameterParser.getValue(node, "__DBNAME__");
	String dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__");
	String table = ElementParameterParser.getValue(node, "__TABLE__");
	String userName = ElementParameterParser.getValue(node, "__USER__");
	
	String dbschema = ElementParameterParser.getValue(node, "__SCHEMA_DB__");
	
	String dbquery= ElementParameterParser.getValue(node, "__QUERY__");
	dbquery = org.talend.core.model.utils.NodeUtil.replaceCRLFInMEMO_SQL(dbquery);
	
	boolean useExistingConnection = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
%>
	java.sql.Connection conn_<%=cid%> = null;
<%
	if(useExistingConnection) {
		String conn = "conn_" + ElementParameterParser.getValue(node,"__CONNECTION__");
%>
	 	conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
<%
		log4jCodeGenerateUtil.useExistConnection(node);
	} else {
%>
		String driverClass_<%=cid%> = "com.amazon.redshift.jdbc41.Driver";
		Class.forName(driverClass_<%=cid%>).newInstance();
		<%
		if(dbproperties == null || ("\"\"").equals(dbproperties) || ("").equals(dbproperties)) {
		%>
			String url_<%=cid%> = "jdbc:redshift://" + <%=host%> + ":" + <%=port%> + "/" + <%=dbName%>;
		<%
		} else {
		%>
			String url_<%=cid%> = "jdbc:redshift://" + <%=host%> + ":" + <%=port%> + "/" + <%=dbName%> + "?" + <%=dbproperties%>;
		<%
		}
		String passwordFieldName = "__PASS__";
		%>
		<%if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {%> 
		final String decryptedPass_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
		<%} else {%>
		final String decryptedPass_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
		<%}%>
		String dbUser_<%=cid %> = <%=userName%>;
		String dbPwd_<%=cid %> = decryptedPass_<%=cid%>;
		<%
		log4jCodeGenerateUtil.connect(node);
	}
	
	boolean	log4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	String fieldSeparator = ElementParameterParser.getValue(node,"__FIELDSEPARATOR__");
	String exportType = ElementParameterParser.getValue(node, "__EXPORT_TYPE__");
%>
	StringBuilder command_<%=cid%> = new StringBuilder();
<%
	if("DELIMITED_OR_CSV".equals(exportType)) {
%>
		char fieldSeparator_<%=cid %> = 
<%
		if(fieldSeparator.trim().isEmpty()) {
%>
		',';
<%
		} else {
%>
		String.valueOf(<%=fieldSeparator.trim()%>).charAt(0);
<%
		}
	}
%>
	command_<%=cid%>.append("UNLOAD ('").append(<%=dbquery%>).append("') TO ");
<%
	String bucket = ElementParameterParser.getValue(node,"__BUCKET__");
    String keyPrefix = ElementParameterParser.getValue(node,"__OBJECTS_PREFIX__");
    String access_key = ElementParameterParser.getValue(node, "__ACCESS_KEY__");
    String passwordFieldKey = "__SECRET_KEY__";
%>
	<%if (ElementParameterParser.canEncrypt(node, passwordFieldKey)) {%> 
	final String decryptedPwd_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldKey)%>);
	<%} else {%>
	final String decryptedPwd_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldKey)%>; 
	<%}%>
	command_<%=cid%>.append("'s3://").append(<%=bucket%>).append("/").append(<%=keyPrefix%>).append("' ")
	.append("credentials 'aws_access_key_id=").append(<%=access_key%>).append(";aws_secret_access_key=").append(decryptedPwd_<%=cid%>)
<%
	boolean encrypt = "true".equals(ElementParameterParser.getValue(node, "__ENCRYPT__"));
	if(encrypt) {
		String encryptedKey = ElementParameterParser.getValue(node,"__ENCRYPTED_KEY__");
%>
		.append(";master_symmetric_key=").append(<%=encryptedKey%>)
<%
	}
%>
	.append("' ")
<%
	if(encrypt) {
%>
		.append("ENCRYPTED ")
<%
	}
	
	if("DELIMITED_OR_CSV".equals(exportType)) {
		if("DOUBLE_QUOTE".equals(ElementParameterParser.getValue(node, "__TEXT_ENCLOSURE__"))) {
%>
		.append("ADDQUOTES ")
<%
		}
%>
		.append("DELIMITER '").append(fieldSeparator_<%=cid%>).append("' ")
<%
	} else if("FIXEDWIDTH".equals(exportType)) {
		String mapping = ElementParameterParser.getValue(node, "__FIXEDWIDTH_MAPPING__");
%>
		.append("FIXEDWIDTH '").append(<%=mapping%>).append("' ")
<%
	}
	
	boolean compressed = "true".equals(ElementParameterParser.getValue(node, "__COMPRESS__"));
	if(compressed) {
		String compression = ElementParameterParser.getValue(node, "__COMPRESSION__");
%>
		.append("<%=compression%> ")
<%
	}
	
	boolean escape = "true".equals(ElementParameterParser.getValue(node, "__ESCAPE__"));
	if(escape) {
%>
		.append("ESCAPE ")
<%
	}
	
	boolean allowOverwrite = "true".equals(ElementParameterParser.getValue(node, "__ALLOWOVERWRITE__"));
	if(allowOverwrite) {
%>
		.append("ALLOWOVERWRITE ")
<%
	}
	
	boolean parallel = "true".equals(ElementParameterParser.getValue(node, "__PARALLEL__"));
	if(!parallel) {
%>
		.append("PARALLEL OFF ")
<%
	}
	
	boolean specifyNullString = "true".equals(ElementParameterParser.getValue(node, "__SPECIFY_NULL_STRING__"));
	if(specifyNullString) {
		String nullString = ElementParameterParser.getValue(node, "__NULL_STRING__");
%>
		.append("NULL '").append(<%=nullString%>).append("' ")
<%
	}
%>
	;
	
	java.sql.Statement stmt_<%=cid %>=conn_<%=cid %>.createStatement();
	stmt_<%=cid %>.execute(command_<%=cid%>.toString());
	<%if(log4jEnabled){%>
		log.info("<%=cid%> - Finish unloading data to s3.");
	<%}%>
<%
	if(!useExistingConnection) {
		log4jCodeGenerateUtil.close(node);
	}
%>
