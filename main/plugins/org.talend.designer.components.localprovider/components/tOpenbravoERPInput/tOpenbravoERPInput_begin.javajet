<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType		
		java.util.List
		"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
    
	String endpoint = ElementParameterParser.getValue(node, "__ENDPOINT__");
	String entityName = ElementParameterParser.getValue(node, "__ENTITYNAME__");
	String encoding = ElementParameterParser.getValue(node, "__ENCODING__");

	String username = ElementParameterParser.getValue(node, "__USER__");


	String condition = ElementParameterParser.getValue(node, "__CONDITION__");
	if(condition == null || "".equals(condition)){
		condition = "\"\"";
	}
	String isOrderBy = ElementParameterParser.getValue(node, "__ORDERBY__");
	String orderBy = "";
	if("true".equals(isOrderBy)){
		orderBy = ElementParameterParser.getValue(node, "__ORDERBY_COLUMN__");
		orderBy += "%20";
		orderBy += ElementParameterParser.getValue(node, "__ORDERBY_SORTING__");
	}
	
	String firstResult = ElementParameterParser.getValue(node, "__FIRSTRESULT__");
	if(firstResult==null || "".equals(firstResult)){
		firstResult = "0";
	}
	
	String maxResult = ElementParameterParser.getValue(node, "__MAXRESULT__");
	if(maxResult==null || "".equals(maxResult)){
		maxResult = "-1";
	}
	
	String entities = ElementParameterParser.getValue(node, "__ENTITIES__");
	String[] entitieArray = entities.split(";");
	java.util.Set<String> entitySet = new java.util.HashSet<String>();
	for(int i=0; i<entitieArray.length; i++){
    	entitySet.add(entitieArray[i]);
    }
    
    String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
	boolean advancedSeparator = (advancedSeparatorStr!=null&&!("").equals(advancedSeparatorStr))?("true").equals(advancedSeparatorStr):false;
	String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
	String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER);
%>
int nb_line_<%=cid%> = 0;

class NameSpaceTool_<%=cid%> {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    public String addDefaultNSPrefix(String path, String loopPath) {
        if (defualtNSPath.size() > 0) {
        	String fullPath = loopPath;
        	if(!path.equals(fullPath)){
            	for (String tmp : path.split("/")) {
            		if (("..").equals(tmp)) {
                        fullPath = fullPath.substring(0, fullPath.lastIndexOf("/"));
                    } else {
                        fullPath += "/" + tmp;
                    }
            	}
            }
        	int[] indexs = new int[fullPath.split("/").length - 1];
            java.util.Arrays.fill(indexs, -1);
            int length = 0;
            for (int i = 0; i < defualtNSPath.size(); i++) {
                if (defualtNSPath.get(i).length() > length && fullPath.startsWith(defualtNSPath.get(i))) {
                    java.util.Arrays.fill(indexs, defualtNSPath.get(i).split("/").length - 2, indexs.length, i);
                    length = defualtNSPath.get(i).length();
                }
            }

            StringBuilder newPath = new StringBuilder();
            String[] pathStrs = path.split("/");
            for (int i = 0; i < pathStrs.length; i++) {
                String tmp = pathStrs[i];
                if (newPath.length() > 0) {
                    newPath.append("/");
                }
                if (tmp.length() > 0 && tmp.indexOf(":") == -1 && tmp.indexOf(".") == -1 /*&& tmp.indexOf("@") == -1*/) {
                    int index = indexs[i + indexs.length - pathStrs.length];
                    if (index >= 0) {
                    	//==== add by wliu to support both filter and functions==
						if(tmp.indexOf("[")>0 && tmp.indexOf("]")>tmp.indexOf("[")){//include filter
							String tmpStr=replaceElementWithNS(tmp,"pre"+index+":");
							newPath.append(tmpStr);
						}else{
							if(tmp.indexOf("@") != -1 || tmp.indexOf("(")<tmp.indexOf(")")){  // include attribute
								newPath.append(tmp);
							}else{
						//==add end=======	
                        		newPath.append("pre").append(index).append(":").append(tmp);
                        	}
                        }                    
                    } else {
                        newPath.append(tmp);
                    }
                } else {
                    newPath.append(tmp);
                }
            }
            return newPath.toString();
        }
        return path;
    }

	private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
    private java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(matches);
    
	private String replaceElementWithNS(String global, String pre){

        java.util.regex.Matcher match = pattern.matcher(global);
        StringBuffer sb = new StringBuffer();
        match.reset();
        while (match.find()) {
            String group = match.group();
            String tmp = "";
            if (group.toLowerCase().matches("\\b(div|mod|and|or)\\b.*") || group.matches("@.*")) {
                tmp = group;
            } else {
                tmp = tmp + pre + group;
            }
            match.appendReplacement(sb, tmp);
        }
        match.appendTail(sb);
        
        return sb.toString();
	}    

}

class XML_API_<%=cid%>{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
final String ob_url_<%=cid %> = <%=endpoint %>;
final String login_<%=cid %> = <%=username %>;

<%
String passwordFieldName = "__PASS__";
%>

<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

final String pwd_<%=cid %> = decryptedPassword_<%=cid%>;
final String method_<%=cid %> = "GET";
final String entity_<%=cid %> = "<%=entityName %>";
String whereClause_<%=cid %> = <%=condition %>;
final String orderBy_<%=cid %> = "<%=orderBy %>";
final int firstResult_<%=cid %> = <%=firstResult %>;
final int maxResult_<%=cid %> = <%=maxResult %>;
whereClause_<%=cid %> = java.net.URLEncoder.encode(whereClause_<%=cid %>, "UTF-8");
String urlString_<%=cid %> = ob_url_<%=cid %>.trim() + "/" + entity_<%=cid %>.trim();
boolean hasParameter = false;
//where clause
if(!whereClause_<%=cid %>.equals("")){
	if(!hasParameter){
		urlString_<%=cid %> += "?where=";
		hasParameter = true;
	}else{
		urlString_<%=cid %> += "&where=";
	}
	urlString_<%=cid %> += whereClause_<%=cid %>;
}
//orderby
if(!orderBy_<%=cid %>.equals("")){
	if(!hasParameter){
		urlString_<%=cid %> += "?";
		hasParameter = true;
	}else{
		urlString_<%=cid %> += "&";
	}
	urlString_<%=cid %> += ("orderBy="+orderBy_<%=cid %>);
}
//first result
if(firstResult_<%=cid %> > 0){
	if(!hasParameter){
		urlString_<%=cid %> += "?";
		hasParameter = true;
	}else{
		urlString_<%=cid %> += "&";
	}
	urlString_<%=cid %> += ("firstResult="+firstResult_<%=cid %>);
}
//max result
if(maxResult_<%=cid %> > 0){
	if(!hasParameter){
		urlString_<%=cid %> += "?";
		hasParameter = true;
	}else{
		urlString_<%=cid %> += "&";
	}
	urlString_<%=cid %> += ("maxResult="+maxResult_<%=cid %>);
}

final java.net.URL url_<%=cid %> = new java.net.URL(urlString_<%=cid %>);
java.net.Authenticator.setDefault(new java.net.Authenticator() {

	protected java.net.PasswordAuthentication getPasswordAuthentication() {
		return new java.net.PasswordAuthentication(login_<%=cid %>, pwd_<%=cid %>.toCharArray());
	}
});
final java.net.HttpURLConnection hc_<%=cid %> = (java.net.HttpURLConnection) url_<%=cid %>.openConnection();
hc_<%=cid %>.setRequestMethod(method_<%=cid %>);
hc_<%=cid %>.setAllowUserInteraction(false);
hc_<%=cid %>.setDefaultUseCaches(false);
hc_<%=cid %>.setDoOutput(true);
hc_<%=cid %>.setDoInput(true);
hc_<%=cid %>.setInstanceFollowRedirects(true);
hc_<%=cid %>.setUseCaches(false);
hc_<%=cid %>.setRequestProperty("Content-Type", "text/xml");
hc_<%=cid %>.connect();
int responseCode_<%=cid %> = hc_<%=cid %>.getResponseCode();
String responseMsg_<%=cid %> = hc_<%=cid %>.getResponseMessage();
//ResponseCode
if(responseCode_<%=cid %> == 401){
	System.out.println("Server returned HTTP response code: 401, response message: "+ responseMsg_<%=cid %> +". Entity " + entity_<%=cid %> + " is not readable by user \"" + login_<%=cid %> + "\"");	
}else if(responseCode_<%=cid %> == 500){
	System.out.println("Server returned HTTP response code: 500, response message: "+ responseMsg_<%=cid %> +". The server encountered an unexpected condition which prevented it from fulfilling the request.");
}else if(responseCode_<%=cid %> != 200){
	System.out.println("Server returned HTTP response code: " + responseCode_<%=cid %> + ", response message: "+ responseMsg_<%=cid %> + ".");
}else{

//hc_<%=cid %>.getContentType();
final java.io.InputStream is_<%=cid %> = hc_<%=cid %>.getInputStream();
org.dom4j.io.SAXReader reader_<%=cid%> = new org.dom4j.io.SAXReader();
org.dom4j.Document doc_<%=cid%> = reader_<%=cid %>.read(is_<%=cid %>);
NameSpaceTool_<%=cid%> nsTool_<%=cid%> = new NameSpaceTool_<%=cid%>();
nsTool_<%=cid%>.countNSMap(doc_<%=cid%>.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_<%=cid%> = nsTool_<%=cid%>.xmlNameSpaceMap;  
String loopPath_<%=cid %> = "/ob:Openbravo/<%=entityName %>";
org.dom4j.XPath x_<%=cid%> = doc_<%=cid%>.createXPath(nsTool_<%=cid%>.addDefaultNSPrefix(loopPath_<%=cid %>, loopPath_<%=cid %>));  
x_<%=cid%>.setNamespaceURIs(xmlNameSpaceMap_<%=cid%>); 

java.util.List<org.dom4j.tree.AbstractNode> nodeList_<%=cid%> = (java.util.List<org.dom4j.tree.AbstractNode>)x_<%=cid%>.selectNodes(doc_<%=cid%>);	
XML_API_<%=cid%> xml_api_<%=cid%> = new XML_API_<%=cid%>();
String str_<%=cid %> = "";
String referenceFieldSeparator_<%=cid %> = ";";
org.dom4j.Node node_<%=cid%> = null;
StringBuilder referenceValue_<%=cid %> = new StringBuilder();
is_<%=cid %>.close();
hc_<%=cid %>.disconnect();
for (org.dom4j.tree.AbstractNode temp_<%=cid%>: nodeList_<%=cid%>) {
	nb_line_<%=cid%>++;
<%
List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
String firstConnName = "";
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
	if (metadata!=null) {
		List<IMetadataColumn> columns=metadata.getListColumns();
		if (conns!=null && conns.size() > 0) {		
			IConnection conn = conns.get(0);
			firstConnName = conn.getName();
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) { // test for connection type
%>
	<%=firstConnName %> = new <%=conn.getName() %>Struct();
<%
				//by default, Object type are reference type. List are list of references.
				for (int i=0;i<columns.size();i++) { // loop for columns
					IMetadataColumn column = columns.get(i);
					String columnName = column.getLabel();
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					//String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
					//The date pattern in Openbravo is yyyy-MM-ddThh:mm:ss.SSSZ. But this is an invalid pattern.
					//We use the pattern in hard code: yyyy-MM-dd hh:mm:ss.SSS
					String patternValue = "\"yyyy-MM-dd hh:mm:ss.SSS\"";
					boolean isNotSetDefault = false;
					String defaultValue=column.getDefault();
					if(defaultValue!=null){
						isNotSetDefault = (defaultValue.length()==0);
					}else{
						isNotSetDefault=true;
					}
					String openbravoName = columnName;
					if(columnName.equals("Default")){
						openbravoName = "default";
					}
					if(columnName.equals("Transient")){
						openbravoName = "transient";
					}
					boolean attribute = false;

					if(openbravoName.equals("identifier") || openbravoName.equals("reference")){
						attribute = true;
					}
					
					
					if(javaType == JavaTypesManager.LIST){
						//get the entity name of List item.
						String itemType = openbravoName;
						if(itemType.endsWith("List")){
							itemType = itemType.substring(0, itemType.length()-4);
						}
						//Convert first char to uppercase
						if(itemType.length() > 0){
							char firstChar = itemType.charAt(0);
							if(firstChar >= 'a' && firstChar <= 'z'){
								itemType = itemType.replaceFirst(""+firstChar, ""+(char)(firstChar-32));
							}
						}
						
						while(itemType.length() > 0){
							if(entitySet.contains(itemType)){
								break;
							}
							int ii = itemType.length()-1;
							for(; ii>=0; ii--){
								char charTemp = itemType.charAt(ii);
								if(charTemp >= 'A' && charTemp <= 'Z'){
									itemType = itemType.substring(0, ii);
									break;
								}
							}
							//can't find the item type of the list 
							if(ii < 0){
								itemType = "";
							}
						}
						if(itemType.equals("")){
%>
String itemType<%=i %>_<%=cid %> = "<%=itemType %>";
if(itemType<%=i %>_<%=cid %>.equals("")){
	throw new Exceptin("No entity name found for the list item in field \"<%=columnName %>\".");
}
<%
						}
%>
// List field: <%=columnName %>. Entity type of the list item is "<%=itemType %>".
java.util.List<org.dom4j.tree.AbstractNode> nodes<%=i %>_<%=cid %> = temp_<%=cid %>.selectNodes("./<%=openbravoName %>/<%=itemType %>");
//System.out.print(nodes23_<%=cid %>.size());
<%=conn.getName() %>.<%=columnName %> = new java.util.ArrayList<String>();
for (org.dom4j.tree.AbstractNode node<%=i %>_<%=cid %> : nodes<%=i %>_<%=cid %>) {
	// string value for Reference.
    referenceValue_<%=cid %>.delete(0, referenceValue_<%=cid %>.length());
    // @id
    org.dom4j.XPath xTmp<%=i %>_<%=cid %> = node<%=i %>_<%=cid %>.createXPath(nsTool_<%=cid %>.addDefaultNSPrefix("@id", "/ob:Openbravo/<%=entityName %>/<%=openbravoName %>/<%=itemType %>"));
    xTmp<%=i %>_<%=cid %>.setNamespaceURIs(xmlNameSpaceMap_<%=cid %>);
    Object obj<%=i %>_<%=cid %> = xTmp<%=i %>_<%=cid %>.evaluate(node<%=i %>_<%=cid %>);
    if (obj<%=i %>_<%=cid %> instanceof String || obj<%=i %>_<%=cid %> instanceof Number) {
    	node_<%=cid %> = node<%=i %>_<%=cid %>;
        str_<%=cid %> = String.valueOf(obj<%=i %>_<%=cid %>);
	} else {
    	node_<%=cid %> = xTmp<%=i %>_<%=cid %>.selectSingleNode(node<%=i %>_<%=cid %>);
		str_<%=cid %> = xTmp<%=i %>_<%=cid %>.valueOf(node<%=i %>_<%=cid %>);
    }
    
    if (xml_api_<%=cid %>.isDefNull(node_<%=cid %>) || xml_api_<%=cid %>.isEmpty(node_<%=cid %>) || xml_api_<%=cid %>.isMissing(node_<%=cid %>)) {
		// nothing to append
	} else {
    	referenceValue_<%=cid %>.append(str_<%=cid %>);
	}
    referenceValue_<%=cid %>.append(referenceFieldSeparator_<%=cid %>);
    
	// @entityName
    referenceValue_<%=cid %>.append("<%=itemType %>");
    referenceValue_<%=cid %>.append(referenceFieldSeparator_<%=cid %>);
    
    // @identifier
    xTmp<%=i %>_<%=cid %> = node<%=i %>_<%=cid %>.createXPath(nsTool_<%=cid %>.addDefaultNSPrefix("@identifier", "/ob:Openbravo/<%=entityName %>/<%=openbravoName %>/<%=itemType %>"));
	xTmp<%=i %>_<%=cid %>.setNamespaceURIs(xmlNameSpaceMap_<%=cid %>);
    obj<%=i %>_<%=cid %> = xTmp<%=i %>_<%=cid %>.evaluate(node<%=i %>_<%=cid %>);
    if (obj<%=i %>_<%=cid %> instanceof String || obj<%=i %>_<%=cid %> instanceof Number) {
    	node_<%=cid %> = node<%=i %>_<%=cid %>;
        str_<%=cid %> = String.valueOf(obj<%=i %>_<%=cid %>);
	} else {
    	node_<%=cid %> = xTmp<%=i %>_<%=cid %>.selectSingleNode(node<%=i %>_<%=cid %>);
		str_<%=cid %> = xTmp<%=i %>_<%=cid %>.valueOf(node<%=i %>_<%=cid %>);
	}
    if (xml_api_<%=cid %>.isDefNull(node_<%=cid %>) || xml_api_<%=cid %>.isEmpty(node_<%=cid %>) || xml_api_<%=cid %>.isMissing(node_<%=cid %>)) {
		//nothing to append
	} else {
		referenceValue_<%=cid %>.append(str_<%=cid %>);
    }
    <%=conn.getName() %>.<%=columnName %>.add(referenceValue_<%=cid %>.toString());
}
<%
					}else if(javaType == JavaTypesManager.OBJECT){//if(javaType == JavaTypesManager.LIST){
%>
//Reference type: values will be in string, the order is id, ntity-name, identifier, transient, inactive 
org.dom4j.XPath xTmp<%=i%>_1_<%=cid%> = temp_<%=cid%>.createXPath(nsTool_<%=cid%>.addDefaultNSPrefix("<%=openbravoName %>/@id", "/ob:Openbravo/<%=entityName %>"));
xTmp<%=i%>_1_<%=cid%>.setNamespaceURIs(xmlNameSpaceMap_<%=cid%>);
Object obj<%=i%>_<%=cid%> = xTmp<%=i%>_1_<%=cid%>.evaluate(temp_<%=cid%>);
if(obj<%=i%>_<%=cid%> instanceof String || obj<%=i%>_<%=cid%> instanceof Number){
	node_<%=cid%> = temp_<%=cid%>;
	str_<%=cid %> = String.valueOf(obj<%=i%>_<%=cid%>);
}else{
	node_<%=cid%> = xTmp<%=i%>_1_<%=cid%>.selectSingleNode(temp_<%=cid%>);
	str_<%=cid %> = xTmp<%=i%>_1_<%=cid%>.valueOf(temp_<%=cid%>);
}
if (!(xml_api_<%=cid %>.isDefNull(node_<%=cid %>) || xml_api_<%=cid %>.isEmpty(node_<%=cid %>) || xml_api_<%=cid %>.isMissing(node_<%=cid %>))) {
	referenceValue_<%=cid %>.delete(0, referenceValue_<%=cid %>.length());
	referenceValue_<%=cid %>.append(str_<%=cid %>);
	referenceValue_<%=cid %>.append(referenceFieldSeparator_<%=cid %>);

	org.dom4j.XPath xTmp<%=i%>_2_<%=cid%> = temp_<%=cid%>.createXPath(nsTool_<%=cid%>.addDefaultNSPrefix("<%=openbravoName %>/@entity-name", "/ob:Openbravo/<%=entityName %>"));
    xTmp<%=i%>_2_<%=cid%>.setNamespaceURIs(xmlNameSpaceMap_<%=cid%>);
    obj<%=i%>_<%=cid%> = null;
    obj<%=i%>_<%=cid%> = xTmp<%=i%>_2_<%=cid%>.evaluate(temp_<%=cid%>);
    if(obj<%=i%>_<%=cid%> instanceof String || obj<%=i%>_<%=cid%> instanceof Number){
    	node_<%=cid%> = temp_<%=cid%>;
    	str_<%=cid %> = String.valueOf(obj<%=i%>_<%=cid%>);
    }else{
    	node_<%=cid%> = xTmp<%=i%>_2_<%=cid%>.selectSingleNode(temp_<%=cid%>);
    	str_<%=cid %> = xTmp<%=i%>_2_<%=cid%>.valueOf(temp_<%=cid%>);
	}
	if (!(xml_api_<%=cid %>.isDefNull(node_<%=cid %>) || xml_api_<%=cid %>.isEmpty(node_<%=cid %>) || xml_api_<%=cid %>.isMissing(node_<%=cid %>))) {
		referenceValue_<%=cid %>.append(str_<%=cid %>);
	}else{
		//nothing to append
	}
	referenceValue_<%=cid %>.append(referenceFieldSeparator_<%=cid %>);

	org.dom4j.XPath xTmp<%=i%>_3_<%=cid%> = temp_<%=cid%>.createXPath(nsTool_<%=cid%>.addDefaultNSPrefix("<%=openbravoName %>/@identifier","/ob:Openbravo/<%=entityName %>"));
    xTmp<%=i%>_3_<%=cid%>.setNamespaceURIs(xmlNameSpaceMap_<%=cid%>);
    obj<%=i%>_<%=cid%> = null;
    obj<%=i%>_<%=cid%> = xTmp<%=i%>_3_<%=cid%>.evaluate(temp_<%=cid%>);
    if(obj<%=i%>_<%=cid%> instanceof String || obj<%=i%>_<%=cid%> instanceof Number){
    	node_<%=cid%> = temp_<%=cid%>;
    	str_<%=cid %> = String.valueOf(obj<%=i%>_<%=cid%>);
    }else{
    	node_<%=cid%> = xTmp<%=i%>_3_<%=cid%>.selectSingleNode(temp_<%=cid%>);
    	str_<%=cid %> = xTmp<%=i%>_3_<%=cid%>.valueOf(temp_<%=cid%>);
	}
	if (!(xml_api_<%=cid %>.isDefNull(node_<%=cid %>) || xml_api_<%=cid %>.isEmpty(node_<%=cid %>) || xml_api_<%=cid %>.isMissing(node_<%=cid %>))) {
		referenceValue_<%=cid %>.append(str_<%=cid %>);
	}else{
		//nothing to append
	}
	referenceValue_<%=cid %>.append(referenceFieldSeparator_<%=cid %>);

	org.dom4j.XPath xTmp<%=i%>_4_<%=cid%> = temp_<%=cid%>.createXPath(nsTool_<%=cid%>.addDefaultNSPrefix("<%=openbravoName %>/@transient","/ob:Openbravo/<%=entityName %>"));
    xTmp<%=i%>_4_<%=cid%>.setNamespaceURIs(xmlNameSpaceMap_<%=cid%>);
    obj<%=i%>_<%=cid%> = null;
    obj<%=i%>_<%=cid%> = xTmp<%=i%>_4_<%=cid%>.evaluate(temp_<%=cid%>);
    if(obj<%=i%>_<%=cid%> instanceof String || obj<%=i%>_<%=cid%> instanceof Number){
    	node_<%=cid%> = temp_<%=cid%>;
    	str_<%=cid %> = String.valueOf(obj<%=i%>_<%=cid%>);
    }else{
    	node_<%=cid%> = xTmp<%=i%>_4_<%=cid%>.selectSingleNode(temp_<%=cid%>);
    	str_<%=cid %> = xTmp<%=i%>_4_<%=cid%>.valueOf(temp_<%=cid%>);
	}
	if (!(xml_api_<%=cid %>.isDefNull(node_<%=cid %>) || xml_api_<%=cid %>.isEmpty(node_<%=cid %>) || xml_api_<%=cid %>.isMissing(node_<%=cid %>))) {
		referenceValue_<%=cid %>.append(str_<%=cid %>);
	}else{
		//nothing to append
	}
	referenceValue_<%=cid %>.append(referenceFieldSeparator_<%=cid %>);

	org.dom4j.XPath xTmp<%=i%>_5_<%=cid%> = temp_<%=cid%>.createXPath(nsTool_<%=cid%>.addDefaultNSPrefix("<%=openbravoName %>/@inactive", "/ob:Openbravo/<%=entityName %>"));
    xTmp<%=i%>_5_<%=cid%>.setNamespaceURIs(xmlNameSpaceMap_<%=cid%>);
    obj<%=i%>_<%=cid%> = null;
    obj<%=i%>_<%=cid%> = xTmp<%=i%>_5_<%=cid%>.evaluate(temp_<%=cid%>);
    if(obj<%=i%>_<%=cid%> instanceof String || obj<%=i%>_<%=cid%> instanceof Number){
    	node_<%=cid%> = temp_<%=cid%>;
   		str_<%=cid %> = String.valueOf(obj<%=i%>_<%=cid%>);
    }else{
    	node_<%=cid%> = xTmp<%=i%>_5_<%=cid%>.selectSingleNode(temp_<%=cid%>);
    	str_<%=cid %> = xTmp<%=i%>_5_<%=cid%>.valueOf(temp_<%=cid%>);
	}
	if (!(xml_api_<%=cid %>.isDefNull(node_<%=cid %>) || xml_api_<%=cid %>.isEmpty(node_<%=cid %>) || xml_api_<%=cid %>.isMissing(node_<%=cid %>))) {
		referenceValue_<%=cid %>.append(str_<%=cid %>);
	}else{
		//nothing to append
	}
	<%=conn.getName() %>.<%=columnName %> = referenceValue_<%=cid %>.toString();
}else{
	// is it nullable?
	<%=conn.getName() %>.<%=columnName %> = null;
}
<%
					}else{//}else if(javaType == JavaTypesManager.OBJECT){
//for other types
%>
org.dom4j.XPath xTmp<%=i %>_<%=cid %> = temp_<%=cid %>.createXPath(nsTool_<%=cid %>.addDefaultNSPrefix("<%=attribute ? "@" : "" %><%=openbravoName %>", "/ob:Openbravo/<%=entityName %>"));
xTmp<%=i%>_<%=cid%>.setNamespaceURIs(xmlNameSpaceMap_<%=cid%>);
Object obj<%=i%>_<%=cid%> = xTmp<%=i%>_<%=cid%>.evaluate(temp_<%=cid%>);
if(obj<%=i%>_<%=cid%> instanceof String || obj<%=i%>_<%=cid%> instanceof Number){
   	node_<%=cid%> = temp_<%=cid%>;
   	str_<%=cid %> = String.valueOf(obj<%=i%>_<%=cid%>);
}else{
   	node_<%=cid%> = xTmp<%=i%>_<%=cid%>.selectSingleNode(temp_<%=cid%>);
   	str_<%=cid %> = xTmp<%=i%>_<%=cid%>.valueOf(temp_<%=cid%>);
}
<%
						if(javaType == JavaTypesManager.STRING){
							if(column.isNullable()){
%>
if(xml_api_<%=cid%>.isDefNull(node_<%=cid%>)){
	<%=conn.getName() %>.<%=column.getLabel() %> =null;
}else if(xml_api_<%=cid%>.isEmpty(node_<%=cid%>)){
	<%=conn.getName() %>.<%=column.getLabel() %> ="";
}else if(xml_api_<%=cid%>.isMissing(node_<%=cid%> )){ 
	<%=conn.getName() %>.<%=column.getLabel() %> =<%=isNotSetDefault?null:column.getDefault()%>;
}else{
<%
							}else{ // column.isNullable()
%>
if(xml_api_<%=cid%>.isEmpty(node_<%=cid%>)){
	<%=conn.getName() %>.<%=column.getLabel() %> ="";
}else if(xml_api_<%=cid%>.isMissing(node_<%=cid%> )){ 
	<%=conn.getName() %>.<%=column.getLabel() %> =<%=isNotSetDefault?JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate):column.getDefault()%>;
}else{
<%
							}
						}else{ // other type
							if(column.isNullable()){
%>	
if(xml_api_<%=cid%>.isDefNull(node_<%=cid%>)){
	<%=conn.getName() %>.<%=column.getLabel() %> =null;
}else if(xml_api_<%=cid%>.isEmpty(node_<%=cid%>) || xml_api_<%=cid%>.isMissing(node_<%=cid%>)){
	<%=conn.getName() %>.<%=column.getLabel() %>=<%=isNotSetDefault?null:column.getDefault()%>;
}else{
<%
							}else{ // column.isNullable()
%>
if(xml_api_<%=cid%>.isMissing(node_<%=cid%>) || xml_api_<%=cid%>.isEmpty(node_<%=cid%>)){
	<%=conn.getName() %>.<%=column.getLabel() %> =<%=isNotSetDefault?JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate):column.getDefault()%>;
}else{
<%
							}
						}
					
						if (javaType == JavaTypesManager.STRING ) {
%>
	<%=conn.getName() %>.<%=column.getLabel() %> = str_<%=cid %>;
<%
						} else if (javaType == JavaTypesManager.DATE) {
%>
	str_<%=cid %> = str_<%=cid %>.replace('T',' ');
	str_<%=cid %> = str_<%=cid %>.replaceAll("Z","");
	<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(str_<%=cid %>, <%= patternValue %>);
<%  
						} else if(javaType == JavaTypesManager.BYTE_ARRAY){ 
%>							
	<%=conn.getName() %>.<%=column.getLabel() %> = str_<%=cid %>.getBytes(<%=encoding %>);
<%
						} else if(javaType == JavaTypesManager.LONG || javaType == JavaTypesManager.INTEGER){
%>
	if(str_<%=cid %>.endsWith(".0")){
		str_<%=cid %> = str_<%=cid %>.substring(0, str_<%=cid %>.length() - 2);
	}
	<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(str_<%=cid %>);
<%
						}else if(advancedSeparator && JavaTypesManager.isNumberType(javaType)) { 
%>
	<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(ParserUtils.parseTo_Number(str_<%=cid %>, <%= thousandsSeparator %>, <%= decimalSeparator %>));
<%
						} else {
%>
	<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(str_<%=cid %>);
<%
						}
%>
}
<%
					}//if(javaType == JavaTypesManager.LIST)
				}// loop for columns
			}// test for connection type
			
			for (int i=0;i<conns.size();i++) {//other conns
				IConnection tmpconn = conns.get(i);
				if ((tmpconn.getName().compareTo(firstConnName)!=0)&&(tmpconn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))) {
%>     
<%=tmpconn.getName() %> = new <%=tmpconn.getName() %>Struct();
<%
		    	 	for (IMetadataColumn column: metadata.getListColumns()) {
%>
<%=tmpconn.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;    				
<%
			 		}
				}
			}//other conns
		} // if (conns!=null && conns.size() > 0) {
	}// if (metadata!=null)
} //if ((metadatas!=null)&&(metadatas.size()>0))
%>
			
	