<%@ jet
imports="
        java.util.ArrayList
        java.util.LinkedList
        java.util.List
        java.util.Map
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.metadata.types.JavaType
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.process.EConnectionType
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.process.INode
        org.talend.designer.codegen.config.CodeGeneratorArgument
"
skeleton="tHL7Output_java.skeleton"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
final String cid = node.getUniqueName();

String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
String hl7Version = ElementParameterParser.getValue(node, "__HL7_VER__");

String incomingName = (String)codeGenArgument.getIncomingName();

List<Map<String, String>> rootTable = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__ROOT__");

//get the right input connection and the previous input node and metadatas
    
List< ? extends IConnection> incomingConns = node.getIncomingConnections();

	if (incomingName == null && incomingConns.size() > 0) {
		   incomingName = incomingConns.get(0).getName(); 
	}
	
	IMetadataTable preMetadataTable = null;
	for (IConnection incomingConn : incomingConns) {
		if ( incomingConn.getLineStyle().equals(EConnectionType.FLOW_MERGE) && incomingConn.getName().equals(incomingName)) {
			preMetadataTable = incomingConn.getMetadataTable();
		    break;
		}
	}
	
	if(preMetadataTable==null){
		return "";
	}

	if (incomingConns != null && incomingConns.size() > 0) {
		if (incomingConns.get(0).getName().equals(incomingName) ) { // the first connector
%>
	if(msg_<%=cid %>==null){
		msg_<%=cid %>= new ca.uhn.hl7v2.model.v<%=hl7Version%>.message.<%=getHL7MsgType(rootTable) %>();
		terser_<%=cid %> = new ca.uhn.hl7v2.util.Terser(msg_<%=cid %>);
		util_<%=cid %>.findSegments(msg_<%=cid %>,map2Seg_<%=cid %>);
	}
<%
		}
		for (IConnection conn : incomingConns) {
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA) && conn.getName().equals(incomingName)){

				IMetadataTable metadata = conn.getMetadataTable();
				if(metadata!=null) {
					List<IMetadataColumn> columns = metadata.getListColumns();
					List<HL7Node> xmlNodes = getTree(rootTable, columns, incomingName);
//					boolean isHL7TreeWithGroup = isHL7Group(xmlNodes);
					if(xmlNodes != null && xmlNodes.size() > 0) {
%>
<%
						for (int i = 0 ; i< xmlNodes.size(); i++) {
							IMetadataColumn column = xmlNodes.get(i).relatedColumn;
							if (column != null) {
								JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
								boolean isPrimitive = JavaTypesManager.isJavaPrimitiveType( javaType, column.isNullable());
				    			if(!isPrimitive) {
%>
	if(<%=incomingName %>.<%=column.getLabel() %> != null) {
<% 
    							} 
%>
	tmpValue_<%=cid %> =
 <%
		    			        String pattern = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
		    			        if (javaType == JavaTypesManager.DATE && pattern != null && pattern.trim().length() != 0) {
    			            %>
    						FormatterUtils.format_Date(<%=incomingName %>.<%=column.getLabel() %>, <%=pattern %>);
    						<%	
								} else if(javaType == JavaTypesManager.BIGDECIMAL){
    						%>
    						<%=column.getPrecision() == null? incomingName + "." + column.getLabel() : incomingName + "." + column.getLabel() + ".setScale(" + column.getPrecision() + ", java.math.RoundingMode.HALF_UP)" %>.toPlainString();
							<%
								} else if(javaType == JavaTypesManager.BYTE_ARRAY){
    						%>
    						java.nio.charset.Charset.forName(<%=encoding %>).decode(java.nio.ByteBuffer.wrap(<%=incomingName %>.<%=column.getLabel() %>)).toString();
    						<%
    			        		} else {
    			            %>
    						String.valueOf(<%=incomingName %>.<%=column.getLabel() %>);
    						<%				
	    			        	}
								if(!isPrimitive) {
%>   				
	}
<%
								}
							} else { // use the default value
%>
tmpValue_<%=cid %> = <%=(xmlNodes.get(i).defaultValue==null || "".equals(xmlNodes.get(i).defaultValue)? "\"\"":xmlNodes.get(i).defaultValue) %>;
<%
							}
							StringBuilder nodePath = new StringBuilder("\"");
							if (xmlNodes.get(i).isRepeating) {
								nodePath.append(xmlNodes.get(i).path);
								nodePath.append("(\"+i_" + incomingName + "_" + cid + "+\")"+xmlNodes.get(i).addPath);
							} else {
								nodePath.append(xmlNodes.get(i).path);
							}
							nodePath.append("\"");
%>
	terser_<%=cid %>.set(<%=nodePath.toString()%>,tmpValue_<%=cid %>);
<%
						} // for (int i = 0 ; i< xmlNodes.size(); i++);
%>
	i_<%=incomingName %>_<%=cid %>++;
<%
					}
				} //if(metadata!=null)
				break; // each input connector generate one segment
			}
		} // for (IConnection conn : incomingConns)
	}
%>
