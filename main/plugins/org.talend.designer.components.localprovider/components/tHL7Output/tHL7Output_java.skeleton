/**
 * add by xzhang
 */
public class CLASS {


// *************************************************************************
//  the following part is for NULL
//*************************************************************************
    static class HL7Node {

        // table parameter of component

        public String path = null;
        
        public String addPath = "";

        public String column = null;
        
        public String defaultValue = "";
        
        public String connName = "";
        
        public String hl7SegType = "";

        // column
        public IMetadataColumn relatedColumn = null;
        
        
        // /MFN_M02/MSH/MSH-1(1)[ST]/MSH-1(1)-1-1[ST]
        private void init(String path) {
            String[] paths = path.split("/");

            String hl7MsgType = paths[1]; // MFN_M02
            
//            for (int i=0; i< paths.length; i++) {
//                System.out.println(i+"="+paths[i]+",");
//            }
//            System.out.println("hl7MsgType=" + hl7MsgType);

            path = path.replace("/"+hl7MsgType, ""); //  /MSH/MSH-1(1)[ST]/MSH-1(1)-1-1[ST]
            
            String xpath= paths[paths.length-1]; //MSH-1(1)-1-1[ST]
            if (xpath.contains("[")) {
                xpath = xpath.substring(0, xpath.indexOf("["));
            }
//            System.out.println("isRepStartFromZero"+isRepStartFromZero);

            int indexOfRWrap = xpath.indexOf("(");
            int indexOfLWrap = xpath.indexOf(")");
            if (indexOfRWrap>0 && indexOfRWrap < indexOfLWrap) {
                int rep = Integer.parseInt(xpath.substring(indexOfRWrap+1, indexOfLWrap));
//                    System.out.println("xpath beore:"+xpath + ",rep="+rep);
                if(rep==0) {
                } else {
                    xpath = xpath.replace("("+rep + ")", "("+(rep-1) + ")");
                }
            }

            
            this.path = xpath;
            this.hl7SegType = this.path.split("-")[0]; // MSH
//            System.out.println("xpath after:"+xpath +",SegType=" + this.hl7SegType);
            if (!path.startsWith("/" + this.hl7SegType + "/")) { // this path is a group path
                this.path = path.substring(0, path.indexOf("/" + this.hl7SegType + "/")+1) + this.path;
            } else {
                this.path = "/" + this.path;
            }
            
        }


        public HL7Node(String path, String column, String value) {
            init(path);

            this.column = column;
            if(this.column.contains(":")) {
                this.connName = this.column.substring(0, this.column.indexOf(":"));
            } else {
                this.connName = this.column;
            }
            if(value!=null){
                this.defaultValue = value;
            }
        }
        
        public boolean isRepeating = false;
        public void calAddPath(List<String> repeatingNodes) {
            if(repeatingNodes == null || repeatingNodes.size() == 0) {
                return;
            }
            
            for (String repeatingNode : repeatingNodes) {
                int index = this.path.indexOf("/"+repeatingNode);
                if (index >= 0) {
                    this.addPath = this.path.substring(index+repeatingNode.length()+1);
                    this.path = this.path.substring(0, index + repeatingNode.length()+1);
                    this.isRepeating = true;
                    break;
                }
            }
        }
       
    }
    
    /**
    * return the table which is related to the connection name
    */
    public List<Map<String, String>> getTable(List<Map<String, String>> rootTable, String connName){
        List<Map<String, String>> resultTable = new ArrayList<Map<String, String>>();
        for(Map<String, String> map: rootTable){
            if(map.get("COLUMN").contains(connName)){
                resultTable.add(map);
            }
        }
        return resultTable;
    }

    /**
     * result Map:
     * key: segment/group name
     * value: the original path
     */
    public java.util.List<String> findRepeatingNodes (List<Map<String, String>> rootTable) {
        java.util.List<String> result = new java.util.ArrayList<String>();
        for (Map<String, String> map : rootTable) {
            String strTemp = map.get("REPEATABLE");
            
            if ("true".equalsIgnoreCase(strTemp)) {
                String[] tempArr = map.get("PATH").split("/");
                result.add(tempArr[tempArr.length-1]);
            }
        }
        return result;
        
    }
    
    // return [0] is root(HL7Node), [1] is groups(List<HL7Node>), [2] loop(HL7Node)
    public List<HL7Node> getTree(List<Map<String, String>> rootTable, List<IMetadataColumn> colList, String incomingName) {
        
        List<HL7Node> nodes = new java.util.ArrayList<HL7Node>();

        List<Map<String, String>> maps = getTable(rootTable, incomingName);
        
        List<String> repeativeNodes = findRepeatingNodes (rootTable);

        Map<String, String> prevMap = null;
        for (Map<String, String> tmpMap : maps) {
            if (prevMap!=null) {
                if (!tmpMap.get("PATH").startsWith(prevMap.get("PATH"))) {
                    HL7Node node = new HL7Node(prevMap.get("PATH"),prevMap.get("COLUMN"),prevMap.get("VALUE"));
                    node.calAddPath(repeativeNodes);
                    setIMetadataColumn(node, colList);
                    nodes.add(node);
                }
            }
            prevMap = tmpMap;
        }
        if (prevMap != null) {
            HL7Node node = new HL7Node(prevMap.get("PATH"),prevMap.get("COLUMN"),prevMap.get("VALUE"));
            node.calAddPath(repeativeNodes);
            setIMetadataColumn(node, colList);
            nodes.add(node);
        }

        return nodes;
    }

    private void setIMetadataColumn(HL7Node node, List<IMetadataColumn> colList) {
        String value = null;
        JavaType javaType = null;
        String[] str = node.column.split(":");
        if (node.column != null && node.column.length() > 0 && node.column.indexOf(":")>0) {
            for (IMetadataColumn column : colList) {
                if (column.getLabel().equals(node.column.substring(node.column.indexOf(":")+1))) {
                    node.relatedColumn = column;
                    break;
                }
            }
        }
        // test
//        System.out.println("xpath:"+node.path+",column:"+node.column+"relatedColumn:"+node.relatedColumn+",defaultValue="+node.defaultValue);
    }
    
    public String getHL7MsgType (List<Map<String, String>> rootTable) {
        String result = "";
        for (Map<String, String> map : rootTable) {
            String strTemp = map.get("PATH");
            String[] strArr = strTemp.split("/");
            if (strArr.length == 2) {
                result = strArr[1];
                break;
            }
        }
        return result;
    }
    
    public boolean isHL7Group(List<HL7Node> nodes) {
        boolean isHL7Group = false;
        
        if (nodes==null || nodes.isEmpty()) {
            return false;
        }
        
        for (HL7Node node: nodes) {
            if (node.path.startsWith("/")) {
                isHL7Group = true;
                break;
            }
        }
        
        return isHL7Group;
        
    }

    public String generate(Object argument) {
        return "";
    }
}
