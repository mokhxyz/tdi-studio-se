<%@ jet 
imports="
    	org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser  
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		java.util.List
		java.util.Map
" 
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
    List<Map<String, String>> addCols =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,"__ADD_COLS__" );
    String axHost = ElementParameterParser.getValue(node, "__HOST__");
	String axDomain = ElementParameterParser.getValue(node, "__DOMAIN__");
	String axUser= ElementParameterParser.getValue(node, "__USER__");

	String axTable = ElementParameterParser.getValue(node,"__TABLE__");
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
	
	String connectionType = ElementParameterParser.getValue(node, "__CONNECTION_TYPE__");
	String assemblyName = ElementParameterParser.getValue(node, "__ASSEMBLY_NAME__");
    String port = ElementParameterParser.getValue(node, "__PORT__");
	String aosServer = ElementParameterParser.getValue(node, "__AOS_SERVER_INSTANCE__");
	String company = ElementParameterParser.getValue(node, "__COMPANY__");
	String language = ElementParameterParser.getValue(node, "__LANGUAGE__");
	String configurationFile = ElementParameterParser.getValue(node, "__CONFIGURATION_FILE__");
    
    List<IMetadataColumn> columnList = null;
    List<IMetadataTable> metadatas = node.getMetadataList();
    if(metadatas !=null && metadatas.size()>0){
    	IMetadataTable metadata = metadatas.get(0);
    	if(metadata != null){
    		columnList = metadata.getListColumns();
    	}
    }
%>

<%
if(!("INSERT").equals(dataAction)){
    int keyCount = 0;
    for(IMetadataColumn column:columnList){
    	if(column.isKey()){
    		keyCount++;
    	}
    }
%>
    int keyCount_<%=cid%> = <%=keyCount%>;
    if(keyCount_<%=cid%> < 1){
    	throw new RuntimeException("For update or delete, Schema must have a key");
    }
<%
}

class VariantTool{
	public String vStr(String value){
		return "new org.jinterop.dcom.core.JIVariant(new org.jinterop.dcom.core.JIString("+value+"))";
	}
	public String vInt(int value){
		return "new org.jinterop.dcom.core.JIVariant("+value+")";
	}
}
VariantTool vTool = new VariantTool();
%> 

int nb_line_<%=cid%> = 0;
int nb_line_update_<%=cid%> = 0;
int nb_line_inserted_<%=cid%> = 0;
int nb_line_deleted_<%=cid%> = 0;
int nb_line_rejected_<%=cid%> = 0;

int deletedCount_<%=cid%>=0;
int updatedCount_<%=cid%>=0;
int insertedCount_<%=cid%>=0;

boolean whetherReject_<%=cid%> = false;

<%
String passwordFieldName = "__PASS__";
%>

<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

<%
if("DCOM".equals(connectionType)){
%>
	java.util.Calendar calendar_<%=cid %> = java.util.Calendar.getInstance();
	calendar_<%=cid %>.set(1, 0, 1, 0, 0, 0);
	long year1_<%=cid %> = calendar_<%=cid %>.getTime().getTime();
	calendar_<%=cid %>.set(10000, 0, 1, 0, 0, 0);
	long year10000_<%=cid %> = calendar_<%=cid %>.getTime().getTime();
	long date_<%=cid %>;
	
	//connect to com server
	org.jinterop.dcom.common.JISystem.setAutoRegisteration(true);
	org.jinterop.dcom.core.JISession session_<%=cid%> = org.jinterop.dcom.core.JISession.createSession(<%=axDomain%>, <%=axUser%>, decryptedPassword_<%=cid%>);
	org.jinterop.dcom.core.JIClsid clsid_<%=cid%> = org.jinterop.dcom.core.JIClsid.valueOf("71421B8A-81A8-4373-BD8D-E0D83B0B3DAB");
	org.jinterop.dcom.core.JIComServer comServer_<%=cid%> = new org.jinterop.dcom.core.JIComServer(clsid_<%=cid%>, <%=axHost%>, session_<%=cid%>);
	
	//get IAxapta3 interface
	org.jinterop.dcom.core.IJIComObject comObject_<%=cid%> = comServer_<%=cid%>.createInstance();
	org.jinterop.dcom.win32.IJIDispatch  axapta3_<%=cid%> = (org.jinterop.dcom.win32.IJIDispatch) org.jinterop.dcom.win32.ComFactory.createCOMInstance(
	                    org.jinterop.dcom.win32.ComFactory.IID_IDispatch, comObject_<%=cid%>);
	
	//logon ax server
	axapta3_<%=cid%>.callMethod("Logon", 
		new Object[] { <%=vTool.vStr("\"\"")%>, <%=vTool.vStr("\"\"")%>, <%=vTool.vStr("\"\"")%>, <%=vTool.vStr("\"\"")%> });
	
	//init record
	org.jinterop.dcom.core.JIVariant[] results_<%=cid%> = axapta3_<%=cid%>.callMethodA("CreateRecord", new Object[]{<%=vTool.vStr(axTable)%> });
	org.jinterop.dcom.win32.IJIDispatch record_<%=cid%> = (org.jinterop.dcom.win32.IJIDispatch) results_<%=cid%>[0].getObjectAsComObject(comObject_<%=cid%>);
	
	//begin modify
	axapta3_<%=cid%>.callMethod("TTSBegin");

<%
}else{
%>	
	//init .NET businnes connector
    org.talend.net.Object netBC_<%=cid%> = org.talend.net.Object.createInstance(<%=assemblyName%>,"Microsoft.Dynamics.BusinessConnectorNet.Axapta");
    //logon ax server
    org.talend.net.Object cred_<%=cid%> = org.talend.net.Object.createInstance(
        "System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "System.Net.NetworkCredential",
        new java.lang.Object[] { <%=axUser%>, decryptedPassword_<%=cid%>, <%=axDomain%> });
		    
    netBC_<%=cid%>.invoke("LogonAs", new Object[]{<%=axUser%>,<%=axDomain%>,cred_<%=cid%>,<%=company%>,<%=language%>,<%=aosServer%>+"@"+<%=axHost%>+":"+<%=port%>,<%=configurationFile%>});

 	//Create a record for a specific table.
    org.talend.net.Object dynRec_<%=cid%> = netBC_<%=cid%>.invoke("CreateAxaptaRecord",new Object[]{<%=axTable%>});
<%}%>
