<%@ jet 
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.process.IConnectionCategory	
	java.util.List
	java.util.ArrayList
	java.util.Map
	java.util.LinkedList
"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	String axTable = ElementParameterParser.getValue(node,"__TABLE__");
	String connectionType = ElementParameterParser.getValue(node, "__CONNECTION_TYPE__");
	
	List<Map<String, String>> addCols =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__ADD_COLS__");

	String incomingConnName = null;
	List<IMetadataColumn> columnList = null;
	
	List< ? extends IConnection> conns = node.getIncomingConnections();
	if(conns!=null && conns.size()>0){
		IConnection conn = conns.get(0);
		incomingConnName = conn.getName();
	}
	
	List<IMetadataTable> metadatas = node.getMetadataList();
	if(metadatas != null && metadatas.size()>0){
		IMetadataTable metadata = metadatas.get(0);
		if(metadata != null){
			columnList = metadata.getListColumns();
		}
	}
	
	String rejectConnName = null;
	List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
	if(rejectConns != null && rejectConns.size() > 0) {
	    IConnection rejectConn = rejectConns.get(0);
	    rejectConnName = rejectConn.getName();
	}
	List<IMetadataColumn> rejectColumnList = null;
	IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
	if(metadataTable != null) {
	    rejectColumnList = metadataTable.getListColumns();
	}
	
	List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
    for(IConnection conn : outgoingConns) {
        if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
        <%=conn.getName() %> = null;            
<%      }
    }

class Column{
	IMetadataColumn column;
	String name;
	String dataType;
	String operator;
	String DBname;
	String value;
	boolean addCol;
	List<Column> replacement = new ArrayList<Column>();
	
	public Column(String colName,String value,boolean addCol, String dataType){
		this.column = null;
		this.name=colName;
		this.DBname = colName;
		this.value = value;
		this.addCol =addCol;
		this.dataType = dataType;
	}
	
	public Column(IMetadataColumn column, String rowName){
		this.column = column;
		this.name = column.getLabel();
		this.value =rowName+"."+name;
		this.addCol =false;
		this.DBname=column.getOriginalDbColumnName();
		this.dataType=JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
	}

	public boolean isReplaced(){
		return replacement.size()>0;
	}
	
	public void replace(Column column){
		this.replacement.add(column);
	}
	
	public List<Column> getReplacement(){
		return this.replacement;
	}
}

class VariantTool{
	public String vStr(String value){
		return "new org.jinterop.dcom.core.JIVariant(new org.jinterop.dcom.core.JIString("+value+"))";
	}

	public String vCulomnVale(Column column,String rowName){
		if(("String").equals(column.dataType)){
			return vStr(column.value);
		}else if(("Int").equals(column.dataType) || ("Float").equals(column.dataType) || ("Double").equals(column.dataType)
			|| ("Short").equals(column.dataType) || ("Char").equals(column.dataType) || ("Object").equals(column.dataType)
			|| ("Date").equals(column.dataType) || ("Boolean").equals(column.dataType)){
			return "new org.jinterop.dcom.core.JIVariant("+column.value+")";
		}
		return "new org.jinterop.dcom.core.JIVariant.EMPTY";
	}
	
	public String whereStatement(Column column, String connectionType){
		if("DCOM".equals(connectionType)){
			return column.name + " " + column.operator + " \\\"\"+" + column.value + "+\"\\\"";
		}else{
			StringBuffer whereStatement = new StringBuffer();
			whereStatement.append(column.name);
			whereStatement.append(" ");
			whereStatement.append(column.operator);
			whereStatement.append(" ");
			if(("Int").equals(column.dataType) || ("Float").equals(column.dataType) || ("Double").equals(column.dataType)
				|| ("Short").equals(column.dataType) || ("Long").equals(column.dataType) || ("BigDecimal").equals(column.dataType)){
				whereStatement.append("\"+");
				whereStatement.append(column.value);
				whereStatement.append("+\"");
			}else{
				whereStatement.append("\\\"\"+");
				whereStatement.append(column.value);
				whereStatement.append("+\"\\\"");
			}	
			return whereStatement.toString();
		}
	}
}
VariantTool vTool = new VariantTool();

List<Column> stmtStructure =  new LinkedList<Column>();
for(IMetadataColumn column:columnList){
    Column myColumn = new Column(column,incomingConnName);
    myColumn.operator = "==";
	stmtStructure.add(myColumn);
}

for(IMetadataColumn column:columnList){
	if(addCols != null && addCols.size()>0){
		for(Map<String, String> addCol:addCols){
			if(addCol.get("REFCOL").equals(column.getLabel())){
				int stmtIndex = 0;
				for(Column stmtStr:stmtStructure){					
					if(stmtStr.name.equals(addCol.get("REFCOL"))){
						break;
					}
					stmtIndex++;
				}
				
				if(("AFTER").equals(addCol.get("POS"))){
					Column insertAfter = new Column(addCol.get("NAME").replaceAll("\"",""),addCol.get("SQL"),true,addCol.get("DATATYPE"));
					insertAfter.dataType = addCol.get("DATATYPE");
					insertAfter.operator = addCol.get("OPERATOR");
					stmtStructure.add(stmtIndex+1,insertAfter);
				}else if(("BEFORE").equals(addCol.get("POS"))){
					Column insertBefore = new Column(addCol.get("NAME").replaceAll("\"",""),addCol.get("SQL"),true,addCol.get("DATATYPE"));
					insertBefore.dataType = addCol.get("DATATYPE");
					insertBefore.operator = addCol.get("OPERATOR");
					stmtStructure.add(stmtIndex,insertBefore);
				}else if(("REPLACE").equals(addCol.get("POS"))){
					Column replacementCol = new Column(addCol.get("NAME").replaceAll("\"",""),addCol.get("SQL"),true,addCol.get("DATATYPE"));
					replacementCol.dataType = addCol.get("DATATYPE");
					replacementCol.operator = addCol.get("OPERATOR");
					Column replacedCol = (Column) stmtStructure.get(stmtIndex);
					replacedCol.replace(replacementCol);
				}
			}
		}
	}
}

List<Column> insertValueList = new LinkedList<Column>();
List<Column> updateValueList = new LinkedList<Column>();
StringBuilder whereStmt = new StringBuilder();
for(Column column : stmtStructure) {
    if(column.isReplaced()) {
        List<Column> replacedColumns = column.getReplacement();          
        for(Column replacedColumn : replacedColumns) {
			insertValueList.add(replacedColumn);
            if(column.column.isKey()) {
            	if(whereStmt.length()>0){
            		whereStmt.append(" && ");
            		//whereStmt.append("%1." + replacedColumn.name + " " + replacedColumn.operator + " \\\"\"+" + replacedColumn.value + "+\"\\\"" );
            		whereStmt.append("%1." + vTool.whereStatement(replacedColumn, connectionType));
            	}else{
            		//whereStmt.append(" %1." + replacedColumn.name + " " + replacedColumn.operator + " \\\"\"+" + replacedColumn.value+ "+\"\\\"");
            		whereStmt.append(" %1." + vTool.whereStatement(replacedColumn, connectionType));
            	}
            } else {
                updateValueList.add(replacedColumn);
            }
        }
    } else {
        if(column.addCol) {
            insertValueList.add(column);
			updateValueList.add(column);
        } else {
            insertValueList.add(column);
            if(column.column.isKey()) {
            	if(whereStmt.length()>0){
            		whereStmt.append(" && ");
            		//whereStmt.append("%1." + column.name + " " + column.operator + " \\\"\"+" + column.value+"+\"\\\"");
            		whereStmt.append("%1." + vTool.whereStatement(column, connectionType));
            	}else{
            		//whereStmt.append(" %1." + column.name + " " + column.operator + " \\\"\"+" + column.value+"+\"\\\"");
            		whereStmt.append(" %1." + vTool.whereStatement(column, connectionType));
            	}
            } else {
                updateValueList.add(column);
            }
        }
    }
}

//select recode
if(!("INSERT").equals(dataAction)){
	String executeStmt = "\"select forupdate %1 where"+whereStmt.toString()+"\"";
%>
	<%if("DCOM".equals(connectionType)){%>
		record_<%=cid%>.callMethod("ExecuteStmt", new Object[] { <%=vTool.vStr(executeStmt)%>});
	<%}else{%>
		dynRec_<%=cid%>.invoke("ExecuteStmt", new Object[] { <%=executeStmt%> });
	<%}%>
<%
}else{
%>
	<%if("DCOM".equals(connectionType)){%>
		record_<%=cid%>.callMethod("InitValue");
	<%}%>
<%
}



if(incomingConnName != null && columnList != null){
%>
    whetherReject_<%=cid%> = false;
<%
    if(("INSERT").equals(dataAction)){
		for(Column column : insertValueList){
%>
			<%if("DCOM".equals(connectionType)){%>
				record_<%=cid%>.put("field",new Object[]{<%=vTool.vStr("\""+column.name+"\"")%>,<%=vTool.vCulomnVale(column,incomingConnName)%>});
			<%}else{%>
				dynRec_<%=cid%>.invoke("set_Field", new Object[] { "<%=column.name%>", <%=incomingConnName%>.<%=column.name%> });
			<%}%>
<%
		}
%>
    try{
    	<%if("DCOM".equals(connectionType)){%>
        	record_<%=cid%>.callMethod("Insert");
        <%}else{%>
        	dynRec_<%=cid%>.invoke("Insert");
        <%}%>
        insertedCount_<%=cid%>++;
        nb_line_<%=cid%>++;
    }catch(java.lang.Exception e){
        whetherReject_<%=cid%> = true;
<%
        if (("true").equals(dieOnError)) {
%>
            throw(e);
<%
        } else {
            if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
%>
            <%=rejectConnName %> = new <%=rejectConnName %>Struct();
<%
                for(IMetadataColumn column : columnList) {
%>
            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
<%
                }
%>
			nb_line_rejected_<%=cid%>++;
			<%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
            <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
<%
            } else {
%>
            System.err.print(e.getMessage());
<%
            }
        } 
%>
    }
<%
	}else if(("UPDATE").equals(dataAction)){
%>
        try{
        	<%if("DCOM".equals(connectionType)){%>
            	while(record_<%=cid%>.get("Found").getObjectAsBoolean()){
            <%}else{%>
            	while(((Boolean)dynRec_<%=cid%>.accessGenericProperty("Found")).booleanValue()){
            		netBC_<%=cid%>.invoke("TTSBegin");
            <%}%>
<%
		for(Column column : updateValueList){
%>
			<%if("DCOM".equals(connectionType)){%>
				record_<%=cid%>.put("field",new Object[]{<%=vTool.vStr("\""+column.name+"\"")%>,<%=vTool.vCulomnVale(column,incomingConnName)%>});
			<%}else{%>
				dynRec_<%=cid%>.invoke("set_Field", new Object[]{"<%=column.name%>", <%=incomingConnName%>.<%=column.name%>});
			<%}%>
<%
		}
%>	
			<%if("DCOM".equals(connectionType)){%>
				record_<%=cid%>.callMethod("Update");
                record_<%=cid%>.callMethod("Next");
            <%}else{%>
            	dynRec_<%=cid%>.invoke("Update");
            	netBC_<%=cid%>.invoke("TTSCommit");
            	dynRec_<%=cid%>.invoke("Next");
            <%}%>
                updatedCount_<%=cid%>++;
            }
            nb_line_<%=cid%>++;
        }catch(java.lang.Exception e){
            whetherReject_<%=cid%> = true;
<%
            if (("true").equals(dieOnError)) {
%>
                throw(e);
<%
            } else {
                if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
%>
                    <%=rejectConnName %> = new <%=rejectConnName %>Struct();
<%
                    for(IMetadataColumn column : columnList) {
%>
                    <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
<%
                    }
%>
					nb_line_rejected_<%=cid%>++;
                    <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                    <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
<%
                } else {
%>
                    System.err.print(e.getMessage());
<%
                }
            } 
%>
        }
<%
	}else if (("INSERT_OR_UPDATE").equals(dataAction)){
%>
		
        <%if("DCOM".equals(connectionType)){%>
		if(record_<%=cid%>.get("Found").getObjectAsBoolean()){
            try{
				while(record_<%=cid%>.get("Found").getObjectAsBoolean()){
		<%}else{%>
		if(((Boolean)dynRec_<%=cid%>.accessGenericProperty("Found")).booleanValue()){
            try{
				while(((Boolean)dynRec_<%=cid%>.accessGenericProperty("Found")).booleanValue()){
					netBC_<%=cid%>.invoke("TTSBegin");
        <%}%>
<%
		for(Column column : updateValueList){
%>
					<%if("DCOM".equals(connectionType)){%>
						record_<%=cid%>.put("field",new Object[]{<%=vTool.vStr("\""+column.name+"\"")%>,<%=vTool.vCulomnVale(column,incomingConnName)%>});
					<%}else{%>
						dynRec_<%=cid%>.invoke("set_Field", new Object[]{"<%=column.name%>", <%=incomingConnName%>.<%=column.name%>});
					<%}%>
<%
		}
%>	
					<%if("DCOM".equals(connectionType)){%>
						record_<%=cid%>.callMethod("Update");
		                record_<%=cid%>.callMethod("Next");
		            <%}else{%>
		            	dynRec_<%=cid%>.invoke("Update");
		            	netBC_<%=cid%>.invoke("TTSCommit");
		            	dynRec_<%=cid%>.invoke("Next");
		            <%}%>
                	updatedCount_<%=cid%>++;
            	}
            }catch(java.lang.Exception e){
                whetherReject_<%=cid%> = true;
<%
                if (("true").equals(dieOnError)) {
%>
                    throw(e);
<%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
%>
                    <%=rejectConnName %> = new <%=rejectConnName %>Struct();
<%
                        for(IMetadataColumn column : columnList) {
%>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
<%
                        }
%>
						nb_line_rejected_<%=cid%>++;
                        <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                        <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
<%
                    } else {
%>
                        System.err.print(e.getMessage());
<%
                    }
                }
%>
            }
		}else{ //insert
            try{
<%
			for(Column column : insertValueList){
%>
				<%if("DCOM".equals(connectionType)){%>
					record_<%=cid%>.put("field",new Object[]{<%=vTool.vStr("\""+column.name+"\"")%>,<%=vTool.vCulomnVale(column,incomingConnName)%>});
				<%}else{%>
					dynRec_<%=cid%>.invoke("set_Field", new Object[] { "<%=column.name%>", <%=incomingConnName%>.<%=column.name%> });
				<%}%>
<%
			}
%>
                <%if("DCOM".equals(connectionType)){%>
		        	record_<%=cid%>.callMethod("Insert");
		        <%}else{%>
		        	dynRec_<%=cid%>.invoke("Insert");
		        <%}%>
        		insertedCount_<%=cid%>++;
            }catch(java.lang.Exception e)
            {
                whetherReject_<%=cid%> = true;
<%
                if (("true").equals(dieOnError)) {
%>
                    throw(e);
<%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
%>
                    <%=rejectConnName %> = new <%=rejectConnName %>Struct();
<%
                        for(IMetadataColumn column : columnList) {
%>
                    <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
<%
                        }
%>
					nb_line_rejected_<%=cid%>++;
                    <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                    <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
<%
                    } else {
%>
                    System.err.print(e.getMessage());
<%
                    }
                }
%>
            }
		}
		nb_line_<%=cid%>++;
<%
	}else if (("UPDATE_OR_INSERT").equals(dataAction)){
%>
		int updateFlag_<%=cid%>=0;
        try{
       		<%if("DCOM".equals(connectionType)){%>
            	while(record_<%=cid%>.get("Found").getObjectAsBoolean()){
            <%}else{%>
            	while(((Boolean)dynRec_<%=cid%>.accessGenericProperty("Found")).booleanValue()){
            		netBC_<%=cid%>.invoke("TTSBegin");
            <%}%>
<%
		for(Column column : updateValueList){
%>
				<%if("DCOM".equals(connectionType)){%>
					record_<%=cid%>.put("field",new Object[]{<%=vTool.vStr("\""+column.name+"\"")%>,<%=vTool.vCulomnVale(column,incomingConnName)%>});
				<%}else{%>
					dynRec_<%=cid%>.invoke("set_Field", new Object[]{"<%=column.name%>", <%=incomingConnName%>.<%=column.name%>});
				<%}%>
<%
		}
%>	
                <%if("DCOM".equals(connectionType)){%>
					record_<%=cid%>.callMethod("Update");
	                record_<%=cid%>.callMethod("Next");
	            <%}else{%>
	            	dynRec_<%=cid%>.invoke("Update");
	            	netBC_<%=cid%>.invoke("TTSCommit");
	            	dynRec_<%=cid%>.invoke("Next");
	            <%}%>
                updateFlag_<%=cid%>++;
                updatedCount_<%=cid%>++;
            }
            nb_line_<%=cid%>++;
        if(updateFlag_<%=cid%> == 0) {
<%
			for(Column column : insertValueList){
%>
				<%if("DCOM".equals(connectionType)){%>
					record_<%=cid%>.put("field",new Object[]{<%=vTool.vStr("\""+column.name+"\"")%>,<%=vTool.vCulomnVale(column,incomingConnName)%>});
				<%}else{%>
					dynRec_<%=cid%>.invoke("set_Field", new Object[] { "<%=column.name%>", <%=incomingConnName%>.<%=column.name%> });
				<%}%>
<%
			}
%>
                <%if("DCOM".equals(connectionType)){%>
		        	record_<%=cid%>.callMethod("Insert");
		        <%}else{%>
		        	dynRec_<%=cid%>.invoke("Insert");
		        <%}%>
        		insertedCount_<%=cid%>++;
        }
            }catch(java.lang.Exception e){
                whetherReject_<%=cid%> = true;
<%
                if (("true").equals(dieOnError)) {
%>
                    throw(e);
<%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
%>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct(); 
<%
                        for(IMetadataColumn column : columnList) {
%>
                    <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
<%
                        }
%>
					nb_line_rejected_<%=cid%>++;
                    <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                    <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
<%
                    } else {
%>
                    System.err.print(e.getMessage());
<%
                    }
                }
%>
            }
        nb_line_<%=cid%>++;
<%
	}else if (("DELETE").equals(dataAction)){
%>
    try{
    	<%if("DCOM".equals(connectionType)){%>
	    while(record_<%=cid%>.get("Found").getObjectAsBoolean()){
			record_<%=cid%>.callMethod("Delete");
            record_<%=cid%>.callMethod("Next");
            updatedCount_<%=cid%>++;
        }
        <%}else{%>
        while(((Boolean)dynRec_<%=cid%>.accessGenericProperty("Found")).booleanValue()){
            netBC_<%=cid%>.invoke("TTSBegin");
			dynRec_<%=cid%>.invoke("Delete");
            netBC_<%=cid%>.invoke("TTSCommit");
            dynRec_<%=cid%>.invoke("Next");
            updatedCount_<%=cid%>++;
        }	
        <%}%>
    }catch(java.lang.Exception e){
        whetherReject_<%=cid%> = true;
<%
        if (("true").equals(dieOnError)) {
%>
            throw(e);
<%
        } else {
            if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
%>
            <%=rejectConnName %> = new <%=rejectConnName %>Struct();
<%
                for(IMetadataColumn column : columnList) {
%>
            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
<%
            	}
%>
			nb_line_rejected_<%=cid%>++;
            <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
            <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
<%
            } else {
%>
                System.err.print(e.getMessage());
<%
            }
        }
%>
    }
    nb_line_<%=cid%>++;
<%
	}
	
    if(outgoingConns != null && outgoingConns.size() > 0) {
        %>
        if(!whetherReject_<%=cid%>) {
        <%
            for(IConnection outgoingConn : outgoingConns) {
                if(rejectConnName == null || (rejectConnName != null && !outgoingConn.getName().equals(rejectConnName))) {
                    if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
        	<%=outgoingConn.getName()%> = new <%=outgoingConn.getName()%>Struct();
<%
                        for(IMetadataColumn column : columnList) {
%>
       		<%=outgoingConn.getName()%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
<%
                        }
                    }
                }
            }
%>
        }
<%
    }
}
%>
