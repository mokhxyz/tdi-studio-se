<%@ jet 
imports="
  org.talend.core.model.process.INode
  org.talend.core.model.process.ElementParameterParser
  org.talend.core.model.process.IConnection
  org.talend.core.model.process.IConnectionCategory
  org.talend.designer.codegen.config.CodeGeneratorArgument
  java.util.List
    org.talend.core.model.process.IElementParameter
    org.talend.core.model.utils.NodeUtil 
" 
%>
<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%> 
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
String host = ElementParameterParser.getValue(node, "__HOST__");
String port = ElementParameterParser.getValue(node, "__PORT__");
String username = ElementParameterParser.getValue(node, "__USERNAME__");

boolean use_encoding = "true".equals(ElementParameterParser.getValue(node, "__USE_ENCODING__"));

String filename = ElementParameterParser.getValue(node, "__FILENAME__");
String remoteDir = ElementParameterParser.getValue(node, "__REMOTEDIR__");
String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
String user = ElementParameterParser.getValue(node, "__USERNAME__");
String pass = ElementParameterParser.getValue(node, "__PASSWORD__");
String authMethod = ElementParameterParser.getValue(node, "__AUTH_METHOD__");
String privateKey = ElementParameterParser.getValue(node, "__PRIVATEKEY__");

boolean useProxy = ("true").equals(ElementParameterParser.getValue(node, "__USE_PROXY__"));
String proxyHost = ElementParameterParser.getValue(node, "__PROXY_HOST__");
String proxyPort = ElementParameterParser.getValue(node, "__PROXY_PORT__");
String proxyUser = ElementParameterParser.getValue(node, "__PROXY_USERNAME__");

String connectMode = ElementParameterParser.getValue(node, "__CONNECT_MODE__");
String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
String conn= "conn_" + connection;
String useExistingConn = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");
String mode = ElementParameterParser.getValue(node, "__MODE__");
boolean MD5 = new Boolean(ElementParameterParser.getValue(node, "__MD5__"));
boolean sftp = false;

log4jFileUtil.componentStartInfo(node);

if (("true").equals(useExistingConn)) {
  List<? extends INode> nodeList = node.getProcess().getGeneratingNodes();

  for (INode n : nodeList) {
    if (n.getUniqueName().equals(connection)) {
      sftp = ("true").equals(ElementParameterParser.getValue(n, "__SFTP__"));
    }
  }
} else {
  sftp = ("true").equals(ElementParameterParser.getValue(node, "__SFTP__"));
}

boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
String passwordFieldName = "";

if (useProxy) {
%>
  java.util.Properties props_<%=cid%> = System.getProperties();
  props_<%=cid%>.put("socksProxyPort", <%=proxyPort %>);
  props_<%=cid%>.put("socksProxyHost", <%=proxyHost %>);
  props_<%=cid%>.put("java.net.socks.username", <%=proxyUser %>);
  
<%
passwordFieldName = "__PROXY_PASSWORD__";
if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
%> 
  String decryptedProxyPassword_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
<%} else {%>
  String decryptedProxyPassword_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
<%}%>

  props_<%=cid%>.put("java.net.socks.password", decryptedProxyPassword_<%=cid%>);    
<%
}
String outputConnName = null;
List< ? extends IConnection> conns = node.getOutgoingSortedConnections();

if (conns != null) {
  if (conns.size() > 0) {
    for (int i = 0; i < conns.size(); i++) {
      IConnection connTemp = conns.get(i);
      if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
        outputConnName = connTemp.getName();
        break;
      }
    }
  }
}

if (outputConnName == null) {
  return "";
}

//The following part support the socks proxy for FTP and SFTP (Socks V4 or V5, they are all OK). 
//And it can not work with the FTP proxy directly, only support the socks proxy.
if (sftp) {  // *** sftp *** //

	if (("false").equals(useExistingConn)) {
	%>
		class MyUserInfo_<%=cid%> implements com.jcraft.jsch.UserInfo, com.jcraft.jsch.UIKeyboardInteractive {
		
		    <%
            passwordFieldName = "__PASSPHRASE__";
            if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
            %> 
          		String decryptedPassphrase_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
            <%} else {%>
          		String decryptedPassphrase_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
            <%}%>
            
			String passphrase_<%=cid %> = decryptedPassphrase_<%=cid%>;
			public String getPassphrase() { return passphrase_<%=cid %>; }
			public String getPassword() { return null; } 
			public boolean promptPassword(String arg0) { return true; } 
			public boolean promptPassphrase(String arg0) { return true; } 
			public boolean promptYesNo(String arg0) { return true; } 
			public void showMessage(String arg0) { } 

      		public String[] promptKeyboardInteractive(String destination, String name, String instruction, String[] prompt,
        	boolean[] echo) {
        	
        	<%
			passwordFieldName = "__PASSWORD__";
			%> 
    	
    		<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
    			
        		String[] password_<%=cid%> = {decryptedPassword_<%=cid%>};
        		return password_<%=cid%>;
      		}
    	}; 
    	final com.jcraft.jsch.UserInfo defaultUserInfo_<%=cid%> = new MyUserInfo_<%=cid%>();
    	com.jcraft.jsch.JSch jsch_<%=cid%>=new com.jcraft.jsch.JSch(); 

	    <%if (("PUBLICKEY").equals(authMethod)) {%>
			<%if(isLog4jEnabled){%>
				log.info("<%=cid%> - SFTP authentication using a public key.");
				log.debug("<%=cid%> - Private key: '" + <%=privateKey%> + "'.");
	  		<%}%>
	      jsch_<%=cid%>.addIdentity(<%=privateKey %>, defaultUserInfo_<%=cid%>.getPassphrase());
	    <%}%>
	    
    	com.jcraft.jsch.Session session_<%=cid%>=jsch_<%=cid%>.getSession(<%=user%>, <%=host%>, <%=port%>);
    	session_<%=cid%>.setConfig("PreferredAuthentications", "publickey,password,keyboard-interactive,gssapi-with-mic");

	    <%if (("PASSWORD").equals(authMethod)) {%> 
			<%if(isLog4jEnabled){%>
				log.info("<%=cid%> - SFTP authentication using a password.");
			<%}%>
			
        	<%
			passwordFieldName = "__PASSWORD__";
			%> 
    	
    		<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
    		
	      session_<%=cid%>.setPassword(decryptedPassword_<%=cid%>); 
	    <%}%>
    	session_<%=cid%>.setUserInfo(defaultUserInfo_<%=cid%>); 
		<%if (!useProxy) {%>
	  	if(("true").equals(System.getProperty("http.proxySet")) ){
	  		com.jcraft.jsch.ProxyHTTP proxy_<%=cid%> = new com.jcraft.jsch.ProxyHTTP(System.getProperty("http.proxyHost"),Integer.parseInt(System.getProperty("http.proxyPort")));
	  		if(!"".equals(System.getProperty("http.proxyUser"))){
	  			proxy_<%=cid%>.setUserPasswd(System.getProperty("http.proxyUser"),System.getProperty("http.proxyPassword"));
	  		}
	  		session_<%=cid%>.setProxy(proxy_<%=cid%>);
	  	}
		<%}%>
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Attempt to connect to '" + <%=host %> + "' with username '" + <%=user%> + "'.");
		<%}%>
	    session_<%=cid%>.connect();
	    com.jcraft.jsch. Channel channel_<%=cid%>=session_<%=cid%>.openChannel("sftp");
	    channel_<%=cid%>.connect();
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Connect to '" + <%=host %> + "' has succeeded.");
		<%}%>
	    com.jcraft.jsch.ChannelSftp c_<%=cid%>=(com.jcraft.jsch.ChannelSftp)channel_<%=cid%>;
	    
	    <%if(use_encoding) {%>
	    	c_<%=cid%>.setFilenameEncoding(<%=encoding%>);
	    <%}%>
	    
	<%} else {%>    
		com.jcraft.jsch.ChannelSftp c_<%=cid%> = (com.jcraft.jsch.ChannelSftp)globalMap.get("<%=conn %>");
		<%if(isLog4jEnabled){%>
			if(c_<%=cid%>!=null && c_<%=cid%>.getSession()!=null) {
				log.info("<%=cid%> - Use an existing connection. Connection username: " + c_<%=cid%>.getSession().getUserName() + ", Connection hostname: " + c_<%=cid%>.getSession().getHost() + ", Connection port: " + c_<%=cid%>.getSession().getPort() + "."); 
			}
		<%}%>
		if(c_<%=cid%>.getHome()!=null && !c_<%=cid%>.getHome().equals(c_<%=cid%>.pwd())){
	  		c_<%=cid%>.cd(c_<%=cid%>.getHome());
  		}
  	<%}%> 
	String remoteDir_<%=cid %> = <%=remoteDir %>.replaceAll("\\\\", "/");
	<%=outputConnName %> = new <%=outputConnName %>Struct();
	String remoteFile_<%=cid %> = <%=remoteDir %> + "/" + <%=filename%>;
	com.jcraft.jsch.SftpATTRS lstat_<%=cid %> = c_<%=cid %>.lstat(remoteFile_<%=cid %>);

	if (lstat_<%=cid %> != null) {
	    <%=outputConnName %>.abs_path = (remoteFile_<%=cid %>).replaceAll("//", "/");
	    <%=outputConnName %>.dirname = <%=remoteDir %>;
	    <%=outputConnName %>.basename = <%=filename%>;
	    <%=outputConnName %>.size = lstat_<%=cid %>.getSize();
	    <%=outputConnName %>.mtime = (long)lstat_<%=cid %>.getMTime();
	    <%=outputConnName %>.mtime_string = lstat_<%=cid %>.getMtimeString();

	    <%if (MD5) {%>
	      // Calculation of the Message Digest MD5
	      java.io.InputStream is_<%=cid %> = c_<%=cid%>.get(remoteFile_<%=cid %>);
	      byte[] buffer_<%=cid %> = new byte[8192];
	      int read_<%=cid %> = 0;
	      java.security.MessageDigest dgs_<%=cid %> = java.security.MessageDigest.getInstance("MD5");
	
	      while ( (read_<%=cid %> = is_<%=cid %>.read(buffer_<%=cid %>)) > 0) {
	        dgs_<%=cid %>.update(buffer_<%=cid %>, 0, read_<%=cid %>);
	      }
	      <%=outputConnName %>.md5 =String.format("%032x", new java.math.BigInteger(1, dgs_<%=cid %>.digest()));
	      <%if(isLog4jEnabled){%>
				log.info("<%= cid %> - md5 message is : '"+ <%=outputConnName %>.md5 + "'."); 
		  <%}%>
	      is_<%=cid %>.close();
		<%}%>
	}  
<%
} else {// *** ftp *** //
%>
	com.enterprisedt.net.ftp.FTPClient ftp_<%=cid %> =null;

	<%if (("true").equals(useExistingConn)) {%>
		ftp_<%=cid %> = (com.enterprisedt.net.ftp.FTPClient)globalMap.get("<%=conn %>");
		<%if(isLog4jEnabled){%>
			if(ftp_<%=cid %>!=null) {
				log.info("<%=cid%> - Use an existing connection. Connection hostname: " + ftp_<%=cid %>.getRemoteHost() + ", Connection port: " + ftp_<%=cid %>.getRemotePort() + "."); 
			}
		<%}%>
	<%} else {%>
	    ftp_<%=cid %> = new com.enterprisedt.net.ftp.FTPClient();
	    ftp_<%=cid %>.setRemoteHost(<%=host %>);
	    ftp_<%=cid %>.setRemotePort(<%=port %>);

		<%if(isLog4jEnabled){%>
			log.debug("<%=cid%> - " + <%=(("ACTIVE").equals(connectMode))?"\"Using the active mode.\"":"\"Using the passive mode.\""%>);
		<%}%>
		<%if (("ACTIVE").equals(connectMode)) {%>
	    	ftp_<%=cid %>.setConnectMode(com.enterprisedt.net.ftp.FTPConnectMode.ACTIVE);
		<%} else {%>
	    	ftp_<%=cid %>.setConnectMode(com.enterprisedt.net.ftp.FTPConnectMode.PASV);
	    <%}%>
		ftp_<%=cid %>.setControlEncoding(<%=encoding%>);
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Attempt to connect to '" + <%=host %> + "' with username '" +<%=user %>+ "'.");
		<%}%>
	    ftp_<%=cid %>.connect();
	    
		<%
    	passwordFieldName = "__PASSWORD__";
    	%> 
    
    	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
    		
	    ftp_<%=cid %>.login(<%=username %>, decryptedPassword_<%=cid%>);
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Connect to '" + <%=host %> + "' has succeeded.");
		<%}%>  
	<%}%>
	<%
  //add feature 19709,add the "Transfer mode" option,
  //the default transfer mode is ASCII,we don't change the mode when ascii is choosed.
	if("binary".equalsIgnoreCase(mode)){
	%>
		ftp_<%=cid %>.setType(com.enterprisedt.net.ftp.FTPTransferType.BINARY);
	<%
	}
	%>
	String remoteDir_<%=cid %> = <%=remoteDir %>.replaceAll("\\\\", "/");
	<%=outputConnName %> = new <%=outputConnName %>Struct();
  	String remoteFile_<%=cid %> = <%=remoteDir %> + "/" + <%=filename%>;

	if (ftp_<%=cid %>.exists(remoteFile_<%=cid %>)) {
	    <%=outputConnName %>.abs_path = (remoteFile_<%=cid %>).replaceAll("//", "/");
	    <%=outputConnName %>.dirname = <%=remoteDir %>;
	    <%=outputConnName %>.basename = <%=filename%>;
	    <%=outputConnName %>.size = ftp_<%=cid %>.size(remoteFile_<%=cid %>);
	    <%=outputConnName %>.mtime = ftp_<%=cid %>.modtime(remoteFile_<%=cid %>).getTime();
	    <%=outputConnName %>.mtime_string =ftp_<%=cid %>.modtime(remoteFile_<%=cid %>).toString();
		<%if(isLog4jEnabled){%>
			log4jSb_<%=cid%>.append("<%=cid%> - File properties for remoteDir is : '" + <%=remoteDir %> + "',file name is : '" + <%=filename%> +"',file size is : '" + <%=outputConnName %>.size + "',file last modify time is : '" + <%=outputConnName %>.mtime_string + "'");
		<%}%>

	    <%if (MD5) {%>
	      // Calculation of the Message Digest MD5
	      java.security.MessageDigest dgs_<%=cid %> = java.security.MessageDigest.getInstance("MD5");
	      dgs_<%=cid %>.update(ftp_<%=cid %>.get(remoteFile_<%=cid %>));
	      <%=outputConnName %>.md5 =String.format("%032x", new java.math.BigInteger(1, dgs_<%=cid %>.digest()));
			<%if(isLog4jEnabled){%>
				log4jSb_<%=cid%>.append(",md5 message is : '"+ <%=outputConnName %>.md5 + "'.");
			<%}%>
	    <%}%>
		<%if(isLog4jEnabled){%>
			log.debug(log4jSb_<%=cid%>);
		<%}%>
  	}
<%
}
%>
