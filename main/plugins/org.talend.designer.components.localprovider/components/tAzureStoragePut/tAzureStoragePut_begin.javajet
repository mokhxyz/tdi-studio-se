<%@ jet 
	imports="
	    org.talend.core.model.process.INode 
	    org.talend.core.model.process.ElementParameterParser 
	    org.talend.designer.codegen.config.CodeGeneratorArgument
	    java.util.List
	    java.util.Map
	" 
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();

	String cid = node.getUniqueName();
	boolean useExistingConnection = "true".equals(ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__"));
	String accountName = ElementParameterParser.getValue(node, "__ACCESS_KEY__");
	String accountSecret = ElementParameterParser.getValue(node, "__SECRET_KEY__");
	String protocol = ElementParameterParser.getValue(node, "__PROTOCOL__");
	
	String container = ElementParameterParser.getValue(node, "__CONTAINER__");
	//String remoteFileName = ElementParameterParser.getValue(node, "__REMOTE_FILENAME__");
	//String localFileName = ElementParameterParser.getValue(node, "__LOCAL_FILENAME__");
	String remoteFolder = ElementParameterParser.getValue(node, "__REMOTE_FOLDER__");
	String localFolder = ElementParameterParser.getValue(node, "__LOCAL_FOLDER__");
	List<Map<String, String>> files = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FILES__");	
	
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	boolean dieOnError = "true".equals(ElementParameterParser.getValue(node, "__DIE_ON_ERROR__"));
	boolean useFileList = "true".equals(ElementParameterParser.getValue(node, "__USE_FILES_LIST__"));
	
%>
	try {
<%
		if(useExistingConnection) {
			String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
%>
			com.microsoft.windowsazure.services.core.storage.CloudStorageAccount myAzureStorageAccount_<%=cid%> = (com.microsoft.windowsazure.services.core.storage.CloudStorageAccount)globalMap.get("connection_" + "<%=connection%>");
<%
			if(isLog4jEnabled) {
%>
			log.info("<%=cid%> - Get the existed cloud storage account object from <%=connection%>.");
<%
			}
		} else {
%>
			String myAzureStorageConn_<%=cid%> = "DefaultEndpointsProtocol=<%=protocol.toLowerCase()%>;" + "AccountName=" + <%=accountName%> + ";" + "AccountKey=" + <%=accountSecret%>;
			// Retrieve storage account from connection-string
			com.microsoft.windowsazure.services.core.storage.CloudStorageAccount myAzureStorageAccount_<%=cid%> = com.microsoft.windowsazure.services.core.storage.CloudStorageAccount.parse(myAzureStorageConn_<%=cid%>);
<%
			if(isLog4jEnabled) {
%>
			log.info("<%=cid%> - Create the cloud storage account object successfully.");
<%
			}
%>
			globalMap.put("<%=cid%>_ACCOUNT_NAME", <%=accountName%>);
			globalMap.put("<%=cid%>_ACCOUNT_KEY", <%=accountSecret%>);
<%
		}
%>
		// Create the blob client
		com.microsoft.windowsazure.services.blob.client.CloudBlobClient blobClient_<%=cid%> = myAzureStorageAccount_<%=cid%>.createCloudBlobClient();

		// Retrieve reference to a previously created container
		com.microsoft.windowsazure.services.blob.client.CloudBlobContainer container_<%=cid%> = blobClient_<%=cid%>.getContainerReference(<%=container%>);

		org.talend.azurestorage.utils.AzureStorageUtils azureStorageUtils_<%=cid%> = new org.talend.azurestorage.utils.AzureStorageUtils();
		
		java.io.File dataDir_<%=cid%>=new java.io.File(<%=localFolder%>);
		java.util.List<com.microsoft.windowsazure.services.blob.client.CloudBlockBlob> objects_<%=cid%> =new java.util.ArrayList<com.microsoft.windowsazure.services.blob.client.CloudBlockBlob>();
		java.util.List<java.util.Map<String,String>> list_<%=cid %> = new java.util.ArrayList<java.util.Map<String,String>>();
<%
		if(useFileList && files!=null && files.size()>0){
			for (int i=0; i<files.size(); i++) {
				Map<String, String> line = files.get(i);
%>    
				java.util.Map<String,String> map_<%=cid %>_<%=i %> = new java.util.HashMap<String,String>();
				map_<%=cid %>_<%=i %>.put(<%= line.get("FILEMASK") %>,<%= line.get("NEWNAME") %>);		
				list_<%=cid %>.add(map_<%=cid %>_<%=i %>);       
<%
			}
		}
%>
<%
		if(useFileList) {
%>
			java.util.Map<String,String> fileMap_<%=cid%>=azureStorageUtils_<%=cid%>.genFileFilterList(list_<%=cid %>, <%=localFolder%>, <%=remoteFolder%>);
<%
		} else {
%>
			java.util.Map<String,String> fileMap_<%=cid%>=azureStorageUtils_<%=cid%>.genAzureObjectList(new java.io.File(<%=localFolder%>), <%=remoteFolder%>);
<%			
		}
%>
		for(java.util.Map.Entry entry_<%=cid%>:fileMap_<%=cid%>.entrySet()) {
			com.microsoft.windowsazure.services.blob.client.CloudBlockBlob object_<%=cid%> = container_<%=cid%>.getBlockBlobReference(entry_<%=cid%>.getValue().toString());
			java.io.File source_<%=cid%> = new java.io.File(entry_<%=cid%>.getKey().toString());
			java.io.FileInputStream currentStream_<%=cid%> = new java.io.FileInputStream(source_<%=cid%>);
			resourceMap.put("stream_<%=cid%>", currentStream_<%=cid%>);
			object_<%=cid%>.upload(currentStream_<%=cid%>, source_<%=cid%>.length());
			resourceMap.remove("stream_<%=cid%>");
			currentStream_<%=cid%>.close();
<%
			if(isLog4jEnabled) {
%>
			log.info("<%=cid%> - Upload the file : " + source_<%=cid%>.getName() + " successfully.");
<%
			}
%>
		}
		
		
		globalMap.put("<%=cid%>_CONTAINER", <%=container%>);
		globalMap.put("<%=cid%>_REMOTE_FOLDER", <%=remoteFolder%>);
		globalMap.put("<%=cid%>_LOCAL_FOLDER", <%=localFolder%>);
	} catch (java.lang.Exception e_<%=cid%>) {
<%
		if(dieOnError) {
%>
			throw e_<%=cid%>;
<%
		} else {
			if(isLog4jEnabled) {
%>
			log.error("<%=cid%> - " + e_<%=cid%>.getMessage());
<%
			}
%>
			System.err.println(e_<%=cid%>.getMessage());
<%
		}
%>
	} finally {
		java.io.FileInputStream lastStream_<%=cid%> = (java.io.FileInputStream)resourceMap.remove("stream_<%=cid%>");
		if(lastStream_<%=cid%> != null) {
			try {
				lastStream_<%=cid%>.close();
			} catch(java.io.IOException eStreamClose_<%=cid%>) {
<%
				if(isLog4jEnabled) {
%>
				log.error("<%=cid%> - " + eStreamClose_<%=cid%>.getMessage());
<%
				}
%>
			}
		}
	}
