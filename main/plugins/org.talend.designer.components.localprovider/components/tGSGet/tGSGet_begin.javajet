<%@ jet 
imports="
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.INode
	org.talend.designer.codegen.config.CodeGeneratorArgument
	
	java.util.List
	java.util.Map
" 
%>
	<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    
    String accessKey = ElementParameterParser.getValue(node, "__ACCESS_KEY__");

	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
	boolean isSpecifyprojectID=("true").equals(ElementParameterParser.getValue(node,"__SPECIFY_PROJECT__"));
	String projectID=ElementParameterParser.getValue(node,"__PROJECT_ID__");
	List<Map<String, String>> keys = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__KEYS__");
	String objects_prefix=ElementParameterParser.getValue(node,"__OBJECTS_PREFIX__");
	String delimiter=ElementParameterParser.getValue(node,"__DELIMITER__");
	String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	
	String outputsDir = ElementParameterParser.getValue(node, "__DIRECTORY__");
	List<Map<String, String>> buckets = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__BUCKETS__");
	%>
	int nb_line_<%=cid%> = 0;
	org.jets3t.service.impl.rest.httpclient.GoogleStorageService service_<%=cid%> = null;
	try {
	<%
	if(("true").equals(useExistingConn)) {
		String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
		%>
		service_<%=cid%> = (org.jets3t.service.impl.rest.httpclient.GoogleStorageService)globalMap.get("service_<%=connection%>");
		<%
		if(isLog4jEnabled){
		%>	
			log.info("<%=cid%> - Get an free connection from " + "<%=connection%>" + ".");
		<%
		}
	}else{
	%>

       <%
       String passwordFieldName = "__SECRET_KEY__";
       %>

	   <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

		org.jets3t.service.security.GSCredentials credentials_<%=cid%> = new org.jets3t.service.security.GSCredentials(<%=accessKey%>,decryptedPassword_<%=cid%>);
	
		service_<%=cid%> = new org.jets3t.service.impl.rest.httpclient.GoogleStorageService(credentials_<%=cid%>,jobName+"/"+jobVersion+" (GPN:Talend)",null);
		service_<%=cid%>.getAccountOwner();
	<%		
	}
	boolean getList = "true".equals(ElementParameterParser.getValue(node,"__GETLIST__"));
	boolean useKeysList = "true".equals(ElementParameterParser.getValue(node,"__USE_KEYS_LIST__"));
	if(!getList && !useKeysList){
		if(isSpecifyprojectID){
		%>
			org.jets3t.service.model.GSBucket[] buckets_<%=cid%>=service_<%=cid%>.listAllBuckets(<%=projectID%>);
		<%
		}else{
		%>
			org.jets3t.service.model.GSBucket[] buckets_<%=cid%>=service_<%=cid%>.listAllBuckets();
		<%
		}
		%>
		for (org.jets3t.service.model.GSBucket bucket_<%=cid%> : buckets_<%=cid%>) {
			String currentBucketName_<%=cid%> = bucket_<%=cid%>.getName();
			org.jets3t.service.model.GSObject[] objects_<%=cid%> = service_<%=cid%>.listObjects(currentBucketName_<%=cid%>,
			<%if(objects_prefix!=null && objects_prefix.trim().length()>0){%><%=objects_prefix%><% }else{%> null <%}%>,
			<%if(delimiter!=null && delimiter.trim().length()>0){%><%=delimiter%><% }else{%> null <%}%>
			);
	<%
	}else if(useKeysList && keys.size()>0){
	%>
		java.util.List<java.util.Map<String,String>> list_<%=cid%> = new java.util.ArrayList<java.util.Map<String,String>>();
		<%
		for(int i=0;i<keys.size();i++){
			Map<String, String> objKey=keys.get(i);
			String bucket_name =objKey.get("BUCKET_NAME");
			String key =objKey.get("KEY");
			String newName =objKey.get("NEW_NAME");
			if(key!=null && key.trim().length()>0){
			%>
				java.util.Map<String,String> map_<%=cid %>_<%=i %> = new java.util.HashMap<String,String>();
				map_<%=cid %>_<%=i %>.put("BUCKET_NAME",<%=bucket_name%>);
				map_<%=cid %>_<%=i %>.put("OBJECT_KEY",<%=key%>);
				<%
				if(newName!=null && !"".equals(newName.trim()) && !"\"\"".equals(newName.trim())){
				%>
					map_<%=cid %>_<%=i %>.put("OBJECT_NEWNAME",<%=newName%>);
				<%
				}else{
				%>
					map_<%=cid %>_<%=i %>.put("OBJECT_NEWNAME",<%=key%>);
				<%
				}
			}
			%>
			list_<%=cid%>.add(map_<%=cid %>_<%=i %>);
		<%
		}
	} else if(getList && buckets.size()>0){
	%>
		java.util.List<java.util.Map<String,String>> list_<%=cid%> = new java.util.ArrayList<java.util.Map<String,String>>();
		<%
		for(int i=0;i<buckets.size();i++){
			Map<String, String> map=buckets.get(i);
			String bucket_name =map.get("BUCKET_NAME");
			String object_prefix =map.get("OBJECT_PREFIX");
			String object_delimiter =map.get("OBJECT_DELIMITER");
			%>
			java.util.Map<String,String> map_<%=cid %>_<%=i %> = new java.util.HashMap<String,String>();
			map_<%=cid %>_<%=i %>.put("BUCKET_NAME",<%=bucket_name%>);
			<%
			if(object_prefix!=null && object_prefix.trim().length()>0){
			%>
				map_<%=cid %>_<%=i %>.put("OBJECT_PREFIX",<%=object_prefix%>);
			<%
			}
			if(object_delimiter!=null && object_delimiter.trim().length()>0){
			%>
				map_<%=cid %>_<%=i %>.put("OBJECT_DELIMITER",<%=object_delimiter%>);
			<%
			}
			%>
			list_<%=cid%>.add(map_<%=cid %>_<%=i %>);
		<%
		}
		%>
		for (java.util.Map<String, String> map_<%=cid %>: list_<%=cid%>) {
			String currentBucketName_<%=cid%>=map_<%=cid %>.get("BUCKET_NAME");
			org.jets3t.service.model.GSObject[] objects_<%=cid%> =new org.jets3t.service.model.GSObject[0];
			try {
				objects_<%=cid%> = service_<%=cid%>.listObjects(currentBucketName_<%=cid%>,map_<%=cid %>.get("OBJECT_PREFIX"),map_<%=cid %>.get("OBJECT_DELIMITER"));
			}catch(org.jets3t.service.ServiceException e_<%=cid%>){
				<%
				if (("true").equals(dieOnError)) {
				%>
					throw(e_<%=cid%>);
				<%
				} else {
					if(isLog4jEnabled){
					%>
						log.error("<%=cid%> - Exception in component <%=cid%>:" + e_<%=cid%>.getMessage());
					<%
					}
					%>
					System.err.println("Exception in component <%=cid%>:");
					System.err.println(e_<%=cid%>.getMessage());
					if(e_<%=cid%>.getErrorCode()!=null){
						<%
						if(isLog4jEnabled){
						%>
							log.error("<%=cid%> - " + e_<%=cid%>.getErrorCode());
						<%
						}
						%>
						System.err.println(e_<%=cid%>.getErrorCode());
					}
					if(e_<%=cid%>.getErrorMessage()!=null){
						<%
						if(isLog4jEnabled){
						%>
							log.error("<%=cid%> - " + e_<%=cid%>.getErrorMessage());
						<%
						}
						%>
						System.err.println(e_<%=cid%>.getErrorMessage());
					}
				<%
				}
				%>
			}
	<%
	}
	if((!getList && !useKeysList) || (useKeysList && keys.size()>0) || (getList && buckets.size()>0)){
		if(!useKeysList){
		%>
			for (org.jets3t.service.model.GSObject objectSummary_<%=cid%> : objects_<%=cid%>) {
				String objkey_<%=cid%> = objectSummary_<%=cid%>.getKey();
				java.io.File file_<%=cid%> = new java.io.File(<%=outputsDir%>+objkey_<%=cid%>);
				org.jets3t.service.model.GSObject obj_<%=cid%> = service_<%=cid%>.getObject(currentBucketName_<%=cid%>, objkey_<%=cid%>);
		<%
		}else{
		%>
			for (java.util.Map<String, String> map_<%=cid %>: list_<%=cid%>) {
				String currentBucketName_<%=cid%>=map_<%=cid %>.get("BUCKET_NAME");
				java.io.File file_<%=cid%> = new java.io.File(<%=outputsDir%>+map_<%=cid %>.get("OBJECT_NEWNAME"));
				org.jets3t.service.model.GSObject obj_<%=cid%> =null;
				try {
					obj_<%=cid%> = service_<%=cid%>.getObject(currentBucketName_<%=cid%>, map_<%=cid %>.get("OBJECT_KEY"));
				}catch(org.jets3t.service.ServiceException e_<%=cid%>){
					<%
					if (("true").equals(dieOnError)) {
					%>
						throw(e_<%=cid%>);
					<%
					} else {
						if(isLog4jEnabled){
						%>
							log.error("<%=cid%> - Exception in component <%=cid%>:" + e_<%=cid%>.getMessage());
						<%
						}
						%>
						System.err.println("Exception in component <%=cid%>:");
						System.err.println(e_<%=cid%>.getMessage());
						if(e_<%=cid%>.getErrorCode()!=null){
							<%
							if(isLog4jEnabled){
							%>
								log.error("<%=cid%> - " + e_<%=cid%>.getErrorCode());
							<%
							}
							%>
							System.err.println(e_<%=cid%>.getErrorCode());
						}
						if(e_<%=cid%>.getErrorMessage()!=null){
							<%
							if(isLog4jEnabled){
							%>
								log.error("<%=cid%> - " + e_<%=cid%>.getErrorMessage());
							<%
							}
							%>
							System.err.println(e_<%=cid%>.getErrorMessage());
						}
					<%
					}
					%>
				}
		<%
		}
		%>
		if(obj_<%=cid%>!=null){
			nb_line_<%=cid%>++;
			boolean isDirectory_<%=cid%>=false;
			String fileName_<%=cid%> =file_<%=cid%> .getAbsolutePath();
			fileName_<%=cid%> =fileName_<%=cid%> .replace("\\", "/");
			String createDir_<%=cid%>="";
			if(obj_<%=cid%>.isDirectoryPlaceholder()){
				createDir_<%=cid%> = fileName_<%=cid%>;
			}else{
				createDir_<%=cid%>=	fileName_<%=cid%>.substring(0,fileName_<%=cid%>.indexOf("/"));
			}
			if (!"".equals(createDir_<%=cid%>)) {
				java.io.File parentDir_<%=cid%>=new java.io.File(createDir_<%=cid%>);
				if(!parentDir_<%=cid%>.exists()){
					parentDir_<%=cid%>.mkdirs();
				}
			}
			if(!obj_<%=cid%>.isDirectoryPlaceholder()){
				java.io.File parentDir_<%=cid%>=new java.io.File(file_<%=cid%>.getParent());
				if(!parentDir_<%=cid%>.exists()){
					parentDir_<%=cid%>.mkdirs();
				}
				java.io.InputStream input_<%=cid%> = obj_<%=cid%>.getDataInputStream();
				byte bytes_<%=cid%>[] = new byte[4 * 1024];
				int len_<%=cid%> = -1;
				java.io.FileOutputStream out_<%=cid%> = new java.io.FileOutputStream(file_<%=cid%>);
	
				while ((len_<%=cid%> = input_<%=cid%>.read(bytes_<%=cid%>)) != -1) {
					out_<%=cid%>.write(bytes_<%=cid%>, 0, len_<%=cid%>);
				}
				out_<%=cid%>.flush();
				input_<%=cid%>.close(); 
				out_<%=cid%>.close(); 
			}
			obj_<%=cid%>.closeDataInputStream();
<%
	}
%>