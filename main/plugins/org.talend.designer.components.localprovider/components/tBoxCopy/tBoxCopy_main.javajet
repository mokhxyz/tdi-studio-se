<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    java.util.List
" 
%>
	<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%>
<%
		CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
		INode node = (INode)codeGenArgument.getArgument();
		String cid = node.getUniqueName();
		
		String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
		String accessToken = ElementParameterParser.getValue(node, "__ACCESS_TOKEN__");
		String refreshToken = ElementParameterParser.getValue(node, "__REFRESH_TOKEN__");
		
		String clientId = ElementParameterParser.getValue(node, "__CLIENT_ID__");
		String clientSecret = ElementParameterParser.getValue(node, "__CLIENT_SECRET__");
		
		String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	    String connectionKey = "\"conn_" + connection+"\"";
		
		String fileName = ElementParameterParser.getValue(node, "__FILE_NAME__");
		boolean moveDirectory = "true".equals(ElementParameterParser.getValue(node, "__MOVE_DIRECTORY__"));
		boolean copyDirectory = "true".equals(ElementParameterParser.getValue(node, "__COPY_DIRECTORY__"));
		String sourceDirectory = ElementParameterParser.getValue(node, "__SOURCE_DIRECTORY__");
		String destinationDirectory = ElementParameterParser.getValue(node, "__DESTINATION_DIRECTORY__");
		boolean rename = "true".equals(ElementParameterParser.getValue(node, "__RENAME__"));
		String newDirName = ElementParameterParser.getValue(node, "__NEW_FOLDER_NAME__");
		String destinationFileName = ElementParameterParser.getValue(node, "__DESTINATION_FILE_NAME__");
		boolean removeSource = "true".equals(ElementParameterParser.getValue(node, "__REMOVE_SOURCE_FILE__"));
		
		final boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
				
		List< ? extends IConnection> outputConnections = node.getOutgoingSortedConnections();
		
        String dataOutputConnection = null;	
	    for(IConnection conn : outputConnections) {
	        if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
	        	dataOutputConnection = conn.getName();
	        	break;
	        } // if(conn) end
	    } // for(conns) end
%>

	String <%=cid%>_filePath = normalizePath(<%=fileName%>);
	boolean <%=cid%>_hasError = false;
	String <%=cid%>_fileName = getFolderFromPath(<%=cid%>_filePath);
	String <%=cid%>_destinationFolderPath = normalizePath(<%=destinationDirectory%>);
	String <%=cid%>_destinationFolderName = getFolderFromPath(<%=cid%>_destinationFolderPath);
	com.box.boxjavalibv2.dao.BoxFile <%=cid%>_boxFile = null;
	com.box.boxjavalibv2.dao.BoxFile <%=cid%>_boxFileNew = null;
	com.box.boxjavalibv2.dao.BoxFolder <%=cid%>_boxFolderTo = null;
	com.box.boxjavalibv2.dao.BoxFolder <%=cid%>_boxFolderFrom = null;
	com.box.restclientv2.requestsbase.BoxDefaultRequestObject <%=cid%>_requestObject = new com.box.restclientv2.requestsbase.BoxDefaultRequestObject();

	<%=cid%>_boxFolderTo = <%=cid%>_client.getFoldersManager().getFolder("0", <%=cid%>_requestObject);
	
	List<String> <%=cid%>_paths = new java.util.ArrayList<String>(java.util.Arrays.asList(<%=cid%>_destinationFolderPath.split("/")));
	<%=cid%>_boxFolderTo = getBoxFolderRecursively(<%=cid%>_paths, <%=cid%>_boxFolderTo, <%=cid%>_client);
	if (<%=cid%>_boxFolderTo == null)
		throw new Exception("No destination folder found under path " + <%=cid%>_destinationFolderPath);
<%
	if(moveDirectory || copyDirectory)
	{
%>
		String <%=cid%>_sourceFolderPath = normalizePath(<%=sourceDirectory%>);
		String <%=cid%>_sourceFolderName = getFolderFromPath(<%=cid%>_sourceFolderPath);
		
		<%=cid%>_boxFolderFrom = <%=cid%>_client.getFoldersManager().getFolder("0", <%=cid%>_requestObject);
	
        <%=cid%>_paths = new java.util.ArrayList<String>(java.util.Arrays.asList(<%=cid%>_sourceFolderPath.split("/")));
        <%=cid%>_boxFolderFrom = getBoxFolderRecursively(<%=cid%>_paths, <%=cid%>_boxFolderFrom, <%=cid%>_client);
        
		com.box.boxjavalibv2.dao.BoxCollection <%=cid%>_searchResults = <%=cid%>_boxFolderFrom.getItemCollection();
			if (<%=cid%>_boxFolderFrom == null)
				throw new Exception("No source folder found under path " + <%=cid%>_sourceFolderPath);
			else if (<%=cid%>_boxFolderTo != null && <%=cid%>_boxFolderFrom != null)
			{
				<%if (moveDirectory) {%>
				com.box.boxjavalibv2.requests.requestobjects.BoxFolderRequestObject <%=cid%>_fRequest = com.box.boxjavalibv2.requests.requestobjects.BoxFolderRequestObject.createFolderRequestObject(<%=cid%>_boxFolderFrom.getName(), <%=cid%>_boxFolderTo.getId());
        		<%=cid%>_boxFolderFrom = <%=cid%>_client.getFoldersManager().updateFolderInfo(<%=cid%>_boxFolderFrom.getId(), <%=cid%>_fRequest);
        		<%} else if (copyDirectory) {%>
        		com.box.boxjavalibv2.requests.requestobjects.BoxItemCopyRequestObject <%=cid%>_copyObj = com.box.boxjavalibv2.requests.requestobjects.BoxItemCopyRequestObject.copyItemRequestObject(<%=cid%>_boxFolderTo.getId());
        		com.box.boxjavalibv2.dao.BoxFolder <%=cid%>_copiedFolder = <%=cid%>_client.getFoldersManager().copyFolder(<%=cid%>_boxFolderFrom.getId(), <%=cid%>_copyObj);
        		<%if(rename) { %>
        		String <%=cid%>_newFolderName = <%=newDirName%>;
        		if(<%=cid%>_newFolderName == null || <%=cid%>_newFolderName.isEmpty())
        		{
        			throw new Exception("New folder name can not be empty");
        		}
        		com.box.boxjavalibv2.requests.requestobjects.BoxFolderRequestObject <%=cid%>_rObj = com.box.boxjavalibv2.requests.requestobjects.BoxFolderRequestObject.createFolderRequestObject(<%=cid%>_newFolderName, <%=cid%>_copiedFolder.getParent().getId());
        		<%=cid%>_client.getFoldersManager().updateFolderInfo(<%=cid%>_copiedFolder.getId(), <%=cid%>_rObj);
        		<%}
        		}%>
			}
<%	
	}
	else
	{
%>
		com.box.boxjavalibv2.dao.BoxFolder <%=cid%>_folder = <%=cid%>_client.getFoldersManager().getFolder("0", <%=cid%>_requestObject);
		<%=cid%>_paths = new java.util.ArrayList<String>(java.util.Arrays.asList(<%=cid%>_filePath.substring(0, <%=cid%>_filePath.length() - <%=cid%>_fileName.length()).split("/")));
		<%=cid%>_folder = getBoxFolderRecursively(<%=cid%>_paths, <%=cid%>_folder, <%=cid%>_client);
		com.box.boxjavalibv2.dao.BoxCollection <%=cid%>_searchResults = <%=cid%>_folder.getItemCollection();
 		for (com.box.boxjavalibv2.dao.BoxTypedObject <%=cid%>_entry : <%=cid%>_searchResults.getEntries())
 		{
 			if(<%=cid%>_entry.getValue("name").equals(<%=cid%>_fileName) && "file".equals(<%=cid%>_entry.getType())) {
 				<%=cid%>_boxFile = <%=cid%>_client.getFilesManager().getFile(<%=cid%>_entry.getId(),null);
 				break;
 			}
 		}
		if (<%=cid%>_boxFile == null)
			throw new Exception("No file found with path " + <%=cid%>_filePath);
		
		if (<%=cid%>_boxFolderTo != null)
		{
				String <%=cid%>_boxFilePath = getBoxItemPath(<%=cid%>_boxFile);
				// Check for not to copy in the same directory
				if(!getBoxItemPath(<%=cid%>_boxFile).equals(getBoxItemPath(<%=cid%>_boxFolderTo) + <%=cid%>_boxFolderTo.getName()))
				{
					com.box.boxjavalibv2.requests.requestobjects.BoxItemCopyRequestObject <%=cid%>_copyObject = com.box.boxjavalibv2.requests.requestobjects.BoxItemCopyRequestObject.copyItemRequestObject(<%=cid%>_boxFolderTo.getId());
		    		<%=cid%>_boxFileNew = <%=cid%>_client.getFilesManager().copyFile(<%=cid%>_boxFile.getId(), <%=cid%>_copyObject);
<%					if(removeSource)
					{
%>
					<%=cid%>_client.getFilesManager().deleteFile(<%=cid%>_boxFile.getId(), null);
<%		
					}
%>
		    	}
<%			if(rename)
			{
%>
				com.box.boxjavalibv2.requests.requestobjects.BoxFileRequestObject <%=cid%>_fileRequestObject = new com.box.boxjavalibv2.requests.requestobjects.BoxFileRequestObject();
        		<%=cid%>_fileRequestObject.setName(<%=destinationFileName%>);
        		if (<%=cid%>_boxFileNew != null)
        			<%=cid%>_boxFileNew = <%=cid%>_client.getFilesManager().updateFileInfo(<%=cid%>_boxFileNew.getId(), <%=cid%>_fileRequestObject);
        		else
        			<%=cid%>_boxFileNew = <%=cid%>_client.getFilesManager().updateFileInfo(<%=cid%>_boxFile.getId(), <%=cid%>_fileRequestObject);
<%		
			}
%>   
		}
<%
	}
%>
    
<%
		if(dataOutputConnection != null) {
%>
		if (<%=cid%>_boxFileNew != null)
    	{
			<%=dataOutputConnection%>.destinationFilePath = getBoxItemPath(<%=cid%>_boxFileNew);
			<%=dataOutputConnection%>.destinationFileName = <%=cid%>_boxFileNew.getName();
		}
		if (<%=cid%>_boxFile != null)
    	{
			<%=dataOutputConnection%>.sourceDirectory = getBoxItemPath(<%=cid%>_boxFile);
		}
		else if (<%=cid%>_boxFolderFrom != null)
		{
			<%=dataOutputConnection%>.sourceDirectory = getBoxItemPath(<%=cid%>_boxFolderFrom);
		}
		if (<%=cid%>_boxFileNew != null)
		{
			<%=dataOutputConnection%>.destinationDirectory = getBoxItemPath(<%=cid%>_boxFileNew);
		}
		else if (<%=cid%>_boxFolderTo != null)
		{
			<%=dataOutputConnection%>.destinationDirectory = getBoxItemPath(<%=cid%>_boxFolderTo);
		}
<%
		}
%>
    	if (<%=cid%>_boxFileNew != null)
    	{
			globalMap.put("<%=cid%>_DESTINATION_FILEPATH", getBoxItemPath(<%=cid%>_boxFileNew));
			globalMap.put("<%=cid%>_DESTINATION_FILENAME", <%=cid%>_boxFileNew.getName());
		}
		if (<%=cid%>_boxFile != null)
    	{
			globalMap.put("<%=cid%>_SOURCE_DIRECTORY", getBoxItemPath(<%=cid%>_boxFile));
		}
		else if (<%=cid%>_boxFolderFrom != null)
		{
			globalMap.put("<%=cid%>_SOURCE_DIRECTORY", getBoxItemPath(<%=cid%>_boxFolderFrom));
		}
		if (<%=cid%>_boxFileNew != null)
		{
			globalMap.put("<%=cid%>_DESTINATION_DIRECTORY", getBoxItemPath(<%=cid%>_boxFileNew));
		}
		else if (<%=cid%>_boxFolderTo != null)
		{
			globalMap.put("<%=cid%>_DESTINATION_DIRECTORY", getBoxItemPath(<%=cid%>_boxFolderTo));
		}

	//}			