<%@ jet
imports="
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
	java.util.List
	java.util.Map
"
%>
	<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();

    String cid = node.getUniqueName();
    String bucket = ElementParameterParser.getValue(node,"__BUCKET__");
    String key = ElementParameterParser.getValue(node,"__FILE_NAME_MANIFEST__");
    String file = ElementParameterParser.getValue(node,"__FILE__");
	String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");

  String uris = ElementParameterParser.getValue(node,"__FILE_NAME_DATA__");
  String format = ElementParameterParser.getValue(node,"__FORMAT__");
  String delimiter = ElementParameterParser.getValue(node,"__FIELDS_DELIMITED_BY__");
  String textqualifier = ElementParameterParser.getValue(node,"__FIELDS_ENCLOSED_BY__");
  String containsHeader = ElementParameterParser.getValue(node,"__INCLUDEHEADER__");


	boolean enableServerSideEncryption = "true".equals(ElementParameterParser.getValue(node, "__ENABLE-SERVER-SIDE-ENCRYPTION__"));

	%>



	<%@ include file="../tS3Connection/S3Client.javajet" %>



  org.json.simple.JSONObject globalUploadSettings<%=cid%>  = new org.json.simple.JSONObject();

  globalUploadSettings<%=cid%>.put("format","<%=format%>");
  globalUploadSettings<%=cid%>.put("delimiter",<%=delimiter%>);
  globalUploadSettings<%=cid%>.put("textqualifier",<%=textqualifier%>);
  globalUploadSettings<%=cid%>.put("containsHeader",<%=containsHeader%>);

  org.json.simple.JSONObject URIs<%=cid%> = new org.json.simple.JSONObject();
  org.json.simple.JSONArray uris_tab<%=cid%> = new org.json.simple.JSONArray();

  uris_tab<%=cid%>.add(conn_<%=cid%>.getResourceUrl(<%=bucket%>,<%=uris%>));

  URIs<%=cid%>.put("URIs",uris_tab<%=cid%>);

  org.json.simple.JSONArray fileLocations<%=cid%> = new org.json.simple.JSONArray();
  fileLocations<%=cid%>.add(URIs<%=cid%>);

  org.json.simple.JSONObject jsonManifest<%=cid%> = new org.json.simple.JSONObject();

  jsonManifest<%=cid%>.put("globalUploadSettings",globalUploadSettings<%=cid%>);
  jsonManifest<%=cid%>.put("fileLocations",fileLocations<%=cid%>);

  // try-with-resources statement based on post comment below :)
  try (java.io.FileWriter file<%=cid%> = new java.io.FileWriter(<%=file%>)) {
    file<%=cid%>.write(org.apache.commons.lang3.StringEscapeUtils.unescapeJava(jsonManifest<%=cid%>.toJSONString()));
  }

	try{
		<%
		if(isLog4jEnabled){
		%>
			log.info("<%=cid%> - Uploading an object with key:" + <%=key%>);
		<%
		}
		%>
		com.amazonaws.services.s3.model.PutObjectRequest putRequest_<%=cid%> = new com.amazonaws.services.s3.model.PutObjectRequest(<%=bucket%>, <%=key%>, new java.io.File(<%=file%>));

		<%
		if(enableServerSideEncryption){
		%>
			com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_<%=cid%> = new com.amazonaws.services.s3.model.ObjectMetadata();
			objectMetadata_<%=cid%>.setSSEAlgorithm(com.amazonaws.services.s3.model.ObjectMetadata.AES_256_SERVER_SIDE_ENCRYPTION);
			putRequest_<%=cid%>.setMetadata(objectMetadata_<%=cid%>);
		<%
		}
		%>

		conn_<%=cid%>.putObject(putRequest_<%=cid%>);
		<%
		if(isLog4jEnabled){
		%>
			log.info("<%=cid%> - Upload the object successfully.");
		<%
		}
		%>
	}catch(java.lang.Exception e_<%=cid%>){
		<%
		if (("true").equals(dieOnError)) {
		%>
			throw(e_<%=cid%>);
		<%
		} else {
			if(isLog4jEnabled){
			%>
				log.error("<%=cid%> - " + e_<%=cid%>.getMessage());
			<%
			}
			%>
			System.err.println(e_<%=cid%>.getMessage());
		<%
		}
		if(!("true").equals(useExistingConn)) {
		%>
	}finally{
		if(conn_<%=cid%> !=null){
			conn_<%=cid%>.shutdown();
		}
		<%
		}
		%>
	}
