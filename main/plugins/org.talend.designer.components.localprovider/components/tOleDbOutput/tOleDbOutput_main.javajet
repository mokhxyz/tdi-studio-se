<%@ jet 
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.MappingTypeRetriever     
    org.talend.core.model.metadata.MetadataTalendType	
    org.talend.core.model.process.IConnectionCategory	
	java.util.List
	java.util.ArrayList
	java.util.Map
	java.util.HashMap
"
skeleton="../templates/db_output_bulk.skeleton"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/LogUtil.javajet"%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
    LogUtil logtpl = new LogUtil(node);
	String cid = node.getUniqueName();	
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	String tableName = ElementParameterParser.getValue(node,"__TABLE__");
    String oleDbParamCollClassName = "\"System.Data.OleDb.OleDbParameterCollection, System.Data, "
    	+ "Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"";
    String dbmsId = "MSODBC";    
	List<Map<String, String>> addCols =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__ADD_COLS__");
%>
Object val_<%=cid%> = null;
<%
    boolean useFieldOptions = ("true").equals(ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__"));
    
    List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");	
	
    String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
    boolean isEnableDebug = ("true").equals(ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__"));
	String incomingConnName = null;
	List<IMetadataColumn> columnList = getColumnList(node);
	
	List< ? extends IConnection> conns = node.getIncomingConnections();
	if(conns!=null && conns.size()>0){
		IConnection conn = conns.get(0);
		incomingConnName = conn.getName();
	}
		
    String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }
    List<IMetadataColumn> rejectColumnList = null;
    IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
    if(metadataTable != null) {
        rejectColumnList = metadataTable.getListColumns();      
    }
    
    List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
    for(IConnection conn : outgoingConns) {
        if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
            %>        
            <%=conn.getName() %> = null;            
            <%      
        }
    }
	
	List<Column> stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, useFieldOptions, fieldOptions, addCols);
	
    ////////////////////////////////////////////////////////////
    List<Column> colStruct = new ArrayList();
    for(Column colStmt : stmtStructure) {
    	if(!colStmt.isReplaced() && !colStmt.isAddCol()) {
    		colStruct.add(colStmt);
    	}
    }
	if(isEnableDebug) {
%>
		query_<%=cid%> = new StringBuffer("");
<%
	}
	
		boolean isParallelize ="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__PARALLELIZE__"));
	
	if (isParallelize) { // bug0014422
		String tAsyncIn_cid = "";
		if(conns!=null && conns.size() > 0) {
			tAsyncIn_cid = conns.get(0).getSource().getUniqueName();
		}
		if(!("").equals(commitEvery)&&!("0").equals(commitEvery)) {
%>
				commitEvery_<%=cid%> = buffersSize_<%=tAsyncIn_cid%>;
<%
		}
	} // end bug0014422
	
    if(incomingConnName != null && columnList != null) {
        %>
        whetherReject_<%=cid%> = false;
        <%
        logtpl.info("\"Try to execute \"",logtpl.str(dataAction),"\" query.\"");
        if(("INSERT").equals(dataAction)) {
            int counter = 0;
            for(Column column : colStruct) {
                if(column.isInsertable()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    %>
                    org.talend.net.Object param_<%=column.getColumn().getLabel()%>_<%=cid%> = cmd_<%=cid%>.invoke("CreateParameter");
                    val_<%=cid%> = <%=incomingConnName%>.<%=column.getColumn().getLabel()%> == null ? "[NULL]" : <%=incomingConnName%>.<%=column.getColumn().getLabel()%>;
                    param_<%=column.getColumn().getLabel()%>_<%=cid%>.mutateProperty("ParameterName","<%=column.getColumn().getLabel()%>");
                    param_<%=column.getColumn().getLabel()%>_<%=cid%>.mutateProperty("Value",val_<%=cid%>);
                    cmd_<%=cid%>.accessProperty("Parameters",<%=oleDbParamCollClassName%>)
                    	.invoke("Add",new java.lang.Object[] { param_<%=column.getColumn().getLabel()%>_<%=cid%> });
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "insertSQLSplits_")%>;
                        <%
                    }                    
                    counter++;                        
                }
            }
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                <%
            }            
    		%>
            try {
                insertedCount_<%=cid%> = insertedCount_<%=cid%> + (Integer)cmd_<%=cid %>.invokeGeneric("ExecuteNonQuery");
                cmd_<%=cid%>.accessProperty("Parameters",<%=oleDbParamCollClassName%>).invoke("Clear");
                nb_line_<%=cid%>++;
            } catch(java.lang.Exception e) {                
                        System.err.print(e.getMessage());
                        <%logtpl.logPrintedException("e.getMessage()");%>
            }
            <%
    	} else if(("UPDATE").equals(dataAction)) {
    	    int counterCol = 1;
            for(Column column : colStruct) {
                if(column.isUpdatable()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    %>
                    
                    org.talend.net.Object param_<%=column.getColumn().getLabel()%>_<%=cid%> = cmd_<%=cid%>.invoke("CreateParameter");
                    val_<%=cid%> = <%=incomingConnName%>.<%=column.getColumn().getLabel()%> == null ? "[NULL]" : <%=incomingConnName%>.<%=column.getColumn().getLabel()%>;
                    param_<%=column.getColumn().getLabel()%>_<%=cid%>.mutateProperty("ParameterName","<%=column.getColumn().getLabel()%>");
                    param_<%=column.getColumn().getLabel()%>_<%=cid%>.mutateProperty("Value",val_<%=cid%>);
                    cmd_<%=cid%>.accessProperty("Parameters",<%=oleDbParamCollClassName%>)
                    	.invoke("Add",new java.lang.Object[] { param_<%=column.getColumn().getLabel()%>_<%=cid%> });
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                        <%
                    }                    
                    counterCol++;                   
                }
            }
    
            for(Column column : colStruct) {
                if(column.isUpdateKey()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    %>
                    org.talend.net.Object param_<%=column.getColumn().getLabel()%>_<%=cid%> = cmd_<%=cid%>.invoke("CreateParameter");
                    val_<%=cid%> = <%=incomingConnName%>.<%=column.getColumn().getLabel()%> == null ? "[NULL]" : <%=incomingConnName%>.<%=column.getColumn().getLabel()%>;
                    param_<%=column.getColumn().getLabel()%>_<%=cid%>.mutateProperty("ParameterName","<%=column.getColumn().getLabel()%>");
                    param_<%=column.getColumn().getLabel()%>_<%=cid%>.mutateProperty("Value",val_<%=cid%>);
                    cmd_<%=cid%>.accessProperty("Parameters",<%=oleDbParamCollClassName%>)
                    	.invoke("Add",new java.lang.Object[] { param_<%=column.getColumn().getLabel()%>_<%=cid%> });

                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                        <%
                    }                    
                    counterCol++;
                }
            }
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                <%
            }            
    		%>
            try {
                updatedCount_<%=cid%> = updatedCount_<%=cid%> + (Integer)cmd_<%=cid %>.invokeGeneric("ExecuteNonQuery");
                cmd_<%=cid%>.accessProperty("Parameters",<%=oleDbParamCollClassName%>).invoke("Clear");
                nb_line_<%=cid%>++;
            } catch(java.lang.Exception e) {
                        System.err.print(e.getMessage());
                        <%logtpl.logPrintedException("e.getMessage()");%>
            }
            <%
    	} else if (("INSERT_OR_UPDATE").equals(dataAction)) {
    		int columnIndex = 1;
            for(Column column : colStruct) {
                if(column.isUpdateKey()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    %>
                    org.talend.net.Object param_<%=column.getColumn().getLabel()%>_<%=cid%> = cmd_<%=cid%>.invoke("CreateParameter");
                    val_<%=cid%> = <%=incomingConnName%>.<%=column.getColumn().getLabel()%> == null ? "[NULL]" : <%=incomingConnName%>.<%=column.getColumn().getLabel()%>;
                    param_<%=column.getColumn().getLabel()%>_<%=cid%>.mutateProperty("ParameterName","<%=column.getColumn().getLabel()%>");
                    param_<%=column.getColumn().getLabel()%>_<%=cid%>.mutateProperty("Value",val_<%=cid%>);
                    cmd_<%=cid%>.accessProperty("Parameters",<%=oleDbParamCollClassName%>)
                    	.invoke("Add",new java.lang.Object[] { param_<%=column.getColumn().getLabel()%>_<%=cid%> });
                    <%
                    columnIndex++;
                }
            }
    		%>
    
    		org.talend.net.Object rs_<%=cid%> = cmd_<%=cid %>.invoke("ExecuteReader");
    		cmd_<%=cid%>.accessProperty("Parameters",<%=oleDbParamCollClassName%>)
                    	.invoke("Clear");
    		Boolean hasRows_<%=cid%> = (Boolean)rs_<%=cid%>.accessGenericProperty("HasRows");
    		rs_<%=cid%>.invoke("Close");
    		if(hasRows_<%=cid%> != null && hasRows_<%=cid%>.booleanValue()) {
    			<%
    			int counterCol = 1;
                for(Column column : colStruct) {
                    if(column.isUpdatable()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                        %>
                        org.talend.net.Object paramUpd_<%=column.getColumn().getLabel()%>_<%=cid%> = cmdUpdate_<%=cid%>.invoke("CreateParameter");
                    	val_<%=cid%> = <%=incomingConnName%>.<%=column.getColumn().getLabel()%> == null ? "[NULL]" : <%=incomingConnName%>.<%=column.getColumn().getLabel()%>;
                    	paramUpd_<%=column.getColumn().getLabel()%>_<%=cid%>.mutateProperty("ParameterName","<%=column.getColumn().getLabel()%>");
                    	paramUpd_<%=column.getColumn().getLabel()%>_<%=cid%>.mutateProperty("Value",val_<%=cid%>);
                    	cmdUpdate_<%=cid%>.accessProperty("Parameters",<%=oleDbParamCollClassName%>)
                    		.invoke("Add",new java.lang.Object[] { paramUpd_<%=column.getColumn().getLabel()%>_<%=cid%> });
                        <%
                        if(isEnableDebug) {
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                            <%
                        }                        
                        counterCol++;
                    }
                }
                for(Column column : colStruct) {
                    if(column.isUpdateKey()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                        %>
                        org.talend.net.Object paramUpd_<%=column.getColumn().getLabel()%>_<%=cid%> = cmdUpdate_<%=cid%>.invoke("CreateParameter");
                    	val_<%=cid%> = <%=incomingConnName%>.<%=column.getColumn().getLabel()%> == null ? "[NULL]" : <%=incomingConnName%>.<%=column.getColumn().getLabel()%>;
                    	paramUpd_<%=column.getColumn().getLabel()%>_<%=cid%>.mutateProperty("ParameterName","<%=column.getColumn().getLabel()%>");
                    	paramUpd_<%=column.getColumn().getLabel()%>_<%=cid%>.mutateProperty("Value",val_<%=cid%>);
                    	cmdUpdate_<%=cid%>.accessProperty("Parameters",<%=oleDbParamCollClassName%>)
                    		.invoke("Add",new java.lang.Object[] { paramUpd_<%=column.getColumn().getLabel()%>_<%=cid%> });
                        <%
                        if(isEnableDebug) {
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                            <%
                        }                        
                        counterCol++;                   
                    }
                }
                if(isEnableDebug) {
                    %>
                    globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                    <%
                }                
    			%>
                try {
        			updatedCount_<%=cid%> = updatedCount_<%=cid%> + (Integer)cmdUpdate_<%=cid %>.invokeGeneric("ExecuteNonQuery");
        			cmdUpdate_<%=cid%>.accessProperty("Parameters",<%=oleDbParamCollClassName%>)
                    	.invoke("Clear");
                } catch(java.lang.Exception e) {                    
                            System.err.print(e.getMessage());
                            <%logtpl.logPrintedException("e.getMessage()");%>
                }
    		} else {
    			<%
    			int counterInsert = 1;
                for(Column columnInsert : colStruct) {
                    if(columnInsert.isInsertable()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnInsert.getColumn().getTalendType(), columnInsert.getColumn().isNullable());
                        %>
                        
                        org.talend.net.Object paramIns_<%=columnInsert.getColumn().getLabel()%>_<%=cid%> = cmdInsert_<%=cid%>.invoke("CreateParameter");
                    	val_<%=cid%> = <%=incomingConnName%>.<%=columnInsert.getColumn().getLabel()%> == null ? "[NULL]" : <%=incomingConnName%>.<%=columnInsert.getColumn().getLabel()%>;
                    	paramIns_<%=columnInsert.getColumn().getLabel()%>_<%=cid%>.mutateProperty("ParameterName","<%=columnInsert.getColumn().getLabel()%>");
                    	paramIns_<%=columnInsert.getColumn().getLabel()%>_<%=cid%>.mutateProperty("Value",val_<%=cid%>);
                    	cmdInsert_<%=cid%>.accessProperty("Parameters",<%=oleDbParamCollClassName%>)
                    		.invoke("Add",new java.lang.Object[] { paramIns_<%=columnInsert.getColumn().getLabel()%>_<%=cid%> });
                        <%
                        if(isEnableDebug) {
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnInsert, incomingConnName, cid, "query_" ,  counterInsert, "insertSQLSplits_")%>;
                            <%
                        }                        
                        counterInsert++;
                    }
                }
                if(isEnableDebug) {
                    %>
                    globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                    <%
                }                
    			%>
                try {
                    insertedCount_<%=cid%> = insertedCount_<%=cid%> + (Integer)cmdInsert_<%=cid %>.invokeGeneric("ExecuteNonQuery");
                    cmdInsert_<%=cid%>.accessProperty("Parameters",<%=oleDbParamCollClassName%>)
                    	.invoke("Clear");
                } catch(java.lang.Exception e) {
                     <%logtpl.logPrintedException("e.getMessage()");%>
                            System.err.print(e.getMessage());
                }
    		}
    		nb_line_<%=cid%>++;
    		<%
    	} else if (("UPDATE_OR_INSERT").equals(dataAction)) {
    	    %>
    	    int updateFlag_<%=cid%>=0;
    	    <%
    		int counterColUpdate = 1;
            for(Column columnUpdate : colStruct) {
                if(columnUpdate.isUpdatable()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnUpdate.getColumn().getTalendType(), columnUpdate.getColumn().isNullable());
                    %>
                    	org.talend.net.Object paramUpd_<%=columnUpdate.getColumn().getLabel()%>_<%=cid%> = cmdUpdate_<%=cid%>.invoke("CreateParameter");
                    	val_<%=cid%> = <%=incomingConnName%>.<%=columnUpdate.getColumn().getLabel()%> == null ? "[NULL]" : <%=incomingConnName%>.<%=columnUpdate.getColumn().getLabel()%>;
                    	paramUpd_<%=columnUpdate.getColumn().getLabel()%>_<%=cid%>.mutateProperty("ParameterName","<%=columnUpdate.getColumn().getLabel()%>");
                    	paramUpd_<%=columnUpdate.getColumn().getLabel()%>_<%=cid%>.mutateProperty("Value",val_<%=cid%>);
                    	cmdUpdate_<%=cid%>.accessProperty("Parameters",<%=oleDbParamCollClassName%>)
                    		.invoke("Add",new java.lang.Object[] { paramUpd_<%=columnUpdate.getColumn().getLabel()%>_<%=cid%> });
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_")%>;
                        <%
                    }                    
                    counterColUpdate++;
                }
            }
    
            for(Column columnUpdate : colStruct) {
                if(columnUpdate.isUpdateKey()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnUpdate.getColumn().getTalendType(), columnUpdate.getColumn().isNullable());
                    %>
                    	org.talend.net.Object paramUpd_<%=columnUpdate.getColumn().getLabel()%>_<%=cid%> = cmdUpdate_<%=cid%>.invoke("CreateParameter");
                    	val_<%=cid%> = <%=incomingConnName%>.<%=columnUpdate.getColumn().getLabel()%> == null ? "[NULL]" : <%=incomingConnName%>.<%=columnUpdate.getColumn().getLabel()%>;
                    	paramUpd_<%=columnUpdate.getColumn().getLabel()%>_<%=cid%>.mutateProperty("ParameterName","<%=columnUpdate.getColumn().getLabel()%>");
                    	paramUpd_<%=columnUpdate.getColumn().getLabel()%>_<%=cid%>.mutateProperty("Value",val_<%=cid%>);
                    	cmdUpdate_<%=cid%>.accessProperty("Parameters",<%=oleDbParamCollClassName%>)
                    		.invoke("Add",new java.lang.Object[] { paramUpd_<%=columnUpdate.getColumn().getLabel()%>_<%=cid%> });
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_")%>;
                        <%
                    }                    
                    counterColUpdate++;
                }
            }
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                <%
            }            
    		%>
    	
            try {
            	Integer tmp_uf_<%=cid%> = (Integer)cmdUpdate_<%=cid%>.invokeGeneric("ExecuteNonQuery");
            	cmdUpdate_<%=cid%>.accessProperty("Parameters",<%=oleDbParamCollClassName%>)
                    		.invoke("Clear");
                updateFlag_<%=cid%>=tmp_uf_<%=cid%> != null ? tmp_uf_<%=cid%> : 0;
                updatedCount_<%=cid%> = updatedCount_<%=cid%> + updateFlag_<%=cid%>;
            } catch(java.lang.Exception e) {                
                        System.err.print(e.getMessage());
                     <%logtpl.logPrintedException("e.getMessage()");%>
            }
            if(updateFlag_<%=cid%> == 0) {
            	<%
            	if(isEnableDebug) {
            	%>
				query_<%=cid%> = new StringBuffer("");
        		<%
        		}
        		int counter = 1;
                for(Column column : colStruct) {
                    if(column.isInsertable()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                        %>
                        org.talend.net.Object paramIns_<%=column.getColumn().getLabel()%>_<%=cid%> = cmdInsert_<%=cid%>.invoke("CreateParameter");
                    	val_<%=cid%> = <%=incomingConnName%>.<%=column.getColumn().getLabel()%> == null ? "[NULL]" : <%=incomingConnName%>.<%=column.getColumn().getLabel()%>;
                    	paramIns_<%=column.getColumn().getLabel()%>_<%=cid%>.mutateProperty("ParameterName","<%=column.getColumn().getLabel()%>");
                    	paramIns_<%=column.getColumn().getLabel()%>_<%=cid%>.mutateProperty("Value",val_<%=cid%>);
                    	cmdInsert_<%=cid%>.accessProperty("Parameters",<%=oleDbParamCollClassName%>)
                    		.invoke("Add",new java.lang.Object[] { paramIns_<%=column.getColumn().getLabel()%>_<%=cid%> });
                        <%
                        if(isEnableDebug) {
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "insertSQLSplits_")%>;
                            <%
                        }                        
                        counter++;
                    }
                }
                if(isEnableDebug) {
                    %>
                    globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                    <%
                }                
        		%>
                try {
                	Integer tmp_ic_<%=cid%> = (Integer)cmdInsert_<%=cid%>.invokeGeneric("ExecuteNonQuery");
                	cmdInsert_<%=cid%>.accessProperty("Parameters",<%=oleDbParamCollClassName%>)
                    		.invoke("Clear");
                    insertedCount_<%=cid%> = insertedCount_<%=cid%> + (tmp_ic_<%=cid%> == null ? 0 : tmp_ic_<%=cid%>.intValue());
                } catch(java.lang.Exception e) {                    
                     <%logtpl.logPrintedException("e.getMessage()");%>
                            System.err.print(e.getMessage());
                }
            }
            nb_line_<%=cid%>++;
            <%    	
    	} else if (("DELETE").equals(dataAction)) {
    	    int keyCounter = 1;
            for(Column column : colStruct) {
                if(column.isDeleteKey()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    %>
                    org.talend.net.Object param_<%=column.getColumn().getLabel()%>_<%=cid%> = cmd_<%=cid%>.invoke("CreateParameter");
                    val_<%=cid%> = <%=incomingConnName%>.<%=column.getColumn().getLabel()%> == null ? "[NULL]" : <%=incomingConnName%>.<%=column.getColumn().getLabel()%>;
                    param_<%=column.getColumn().getLabel()%>_<%=cid%>.mutateProperty("ParameterName","<%=column.getColumn().getLabel()%>");
                    param_<%=column.getColumn().getLabel()%>_<%=cid%>.mutateProperty("Value",val_<%=cid%>);
                    cmd_<%=cid%>.accessProperty("Parameters",<%=oleDbParamCollClassName%>)
                    	.invoke("Add",new java.lang.Object[] { param_<%=column.getColumn().getLabel()%>_<%=cid%> });
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , keyCounter, "deleteSQLSplits_")%>;
                        <%
                    }                    
                    keyCounter++;
                }
            }
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                <%
            }            
    		%>
            try {
            	Integer tmp_dc_<%=cid%> = (Integer)cmd_<%=cid%>.invokeGeneric("ExecuteNonQuery");
            	cmd_<%=cid%>.accessProperty("Parameters",<%=oleDbParamCollClassName%>)
                    	.invoke("Clear");
               deletedCount_<%=cid%> = deletedCount_<%=cid%> + (tmp_dc_<%=cid%> == null ? 0 : tmp_dc_<%=cid%>);
            } catch(java.lang.Exception e) {
                <%logtpl.logPrintedException("e.getMessage()");%>
                        System.err.print(e.getMessage());
                        <%logtpl.logPrintedException("e.getMessage()");%>
            }
            nb_line_<%=cid%>++;
    	<%
    	}
    	logtpl.info("\"The \"",logtpl.str(dataAction),"\" query has executed successfully.\"");
        if(outgoingConns != null && outgoingConns.size() > 0) {
            
                for(IConnection outgoingConn : outgoingConns) {
                    if(rejectConnName == null || (rejectConnName != null && !outgoingConn.getName().equals(rejectConnName))) {
                        if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {                            
                            %>
                            <%=outgoingConn.getName()%> = new <%=outgoingConn.getName()%>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=outgoingConn.getName()%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%                  
                            }
                        }
                    }
                }
            
        }        
    }
    %>
