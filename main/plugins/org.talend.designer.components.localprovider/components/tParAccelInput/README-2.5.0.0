This is a simple readme describing how to compile and use the jdbc driver.

---------------------------------------------------------------------------

This isn't a guide on how to use JDBC - for that refer to Sun's website:

	http://java.sun.com/products/jdbc/

For problems with this driver, refer to driver's home page:

	http://www.paraccel.com/jdbc/tbd

and associated mailing list:

	http://archives.postgresql.org/pgsql-jdbc/

---------------------------------------------------------------------------

COMPILING

To compile you will need to have Ant installed. To obtain Ant go to
http://ant.apache.org/index.html and download the binary. Being pure
java it will run on virtually all java platforms. If you have any problems
please email the jdbc list.

Once you have Ant, simply run ant in the top level directory.  This will
compile the correct driver for your JVM, and build a .jar file (Java ARchive)
called paraccel-jdbc.jar.

REMEMBER: Once you have compiled the driver, it will work on ALL platforms
that support that version of the API. You don't need to build it for each
platform.

If you are having problems, prebuilt versions of the driver 
are available at http://www.paraccel.com/tbd

---------------------------------------------------------------------------

INSTALLING THE DRIVER

To install the driver, the paraccel-jdbc.jar file has to be in the classpath.

ie: under LINUX/SOLARIS (the example here is my linux box):

	export CLASSPATH=.:/usr/local/pgsql/share/java/paraccel-jdbc.jar

---------------------------------------------------------------------------

USING THE DRIVER

To use the driver, you must introduce it to JDBC. Again, there's two ways
of doing this:

1: Hardcoded.

   This method hardcodes your driver into your application/applet. You
   introduce the driver using the following snippet of code:

	try {
	  Class.forName("com.paraccel.Driver");
	} catch(Exception e) {
	  // your error handling code goes here
	}

   Remember, this method restricts your code to just the ParAccel database.
   However, this is how most people load the driver.

2: Parameters

   This method specifies the driver from the command line. When running the
   application, you specify the driver using the option:

	-Djdbc.drivers=com.paraccel.Driver

   eg: This is an example of running one of my other projects with the driver:

	java -Djdbc.drivers=com.paraccel.Driver uk.org.retep.finder.Main

   note: This method only works with Applications (not for Applets).
	 However, the application is not tied to one driver, so if you needed
	 to switch databases (why I don't know ;-) ), you don't need to
	 recompile the application (as long as you havent hardcoded the url's).

---------------------------------------------------------------------------

JDBC URL syntax

The driver recognises JDBC URL's of the form:

	jdbc:paraccel:database

	jdbc:paraccel://host/database

	jdbc:paraccel://host:port/database

Also, you can supply both username and passwords as arguments, by appending
them to the URL. eg:

	jdbc:paraccel:database?user=me
	jdbc:paraccel:database?user=me&password=mypass

Notes:

1) If you are connecting to localhost or 127.0.0.1 you can leave it out of the
   URL. ie: jdbc:paraccel://localhost/mydb can be replaced with
   jdbc:paraccel:mydb

2) The port defaults to 5439 if it's left out.

---------------------------------------------------------------------------

That's the basics related to this driver. You'll need to read the JDBC Docs
on how to use it. However, there are some examples included in the example
directory.

To run them, they follow the same syntax. For example, the basic example shows
how to insert data, and perform queries:

	java example.basic jdbc:paraccel:test user password


NOTES FOR PARACCEL VERSION:

 * The namespace has been changed from org.postgresql to com.paraccel
 * Most references to "PostgresSQL" have been changed to "ParAccel", with
 	the exception of copyright notices.
 * The connection environment variables have been changed from "PGxxxx" to
 	"PAxxxx" format
 * The URL protocol string has been changed from "jdbc:postgresql:" to
 	"jdbc:paraccel:"
 * The build output JAR files have been renamed from postgresql.jar and
 	postgresql-tests.jar to paraccel-jdbc.jar and paraccel-jdbc-tests.jar.
 * The test debug output file has been renamed from postgresql-jdbc-tests.debug.txt
 	to paraccel-jdbc-tests.debug.txt
 * The patch to support copyIn/copyOut functions has been applied and test cases added,
 	as ParAccel now supports COPY from STDIN
 * The driver currently will always report a database product name of "ParAccel",
 	even if connected to a PostgreSQL database. A future release will query for
 	ParAccel artifacts to determine the database at runtime.
 * At present, the JUnit test suite will induce a hard failure in PADB; as such,
 	the tests should only be run against PostgreSQL until the test suite is revised
 	for PADB support.
 * The behavior of the loglevel URL property has been modified from an incremental
 	value to a bitmask. When set, the bit values enable logging as follows:
 		Bit 0 (value 1): enables informational logging
 		Bit 1 (value 2): enables debug level logging
 		Bit 2 (value 4): enables protocol level logging wo/ message dumps
 		Bit 3 (value 8): enables protocol level logging w/ message dumps
 	E.g., loglevel=15 enables all levels; loglevel=3 enables only info and debug
 	logging, loglevel=4 enables only protocol logging, etc.
 * A simple smoke test JDBCSmokeTest.java is included, but not currently integrated into
 	the ANT build system. To build it, after building both the JDBC JAR and the JUnit
 	test suite JAR, and including them in the CLASSPATH:
 		javac JDBCSmokeTest.java
 	To run it
 		java JDBCSmokeTest [options]
 	Run "java JDBCSmokeTest -h" to see the current set of options.