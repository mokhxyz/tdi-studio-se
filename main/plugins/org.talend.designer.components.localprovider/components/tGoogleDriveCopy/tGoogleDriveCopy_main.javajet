<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.NodeParamsHelper
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    java.util.List
" 
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
NodeParamsHelper helper = new NodeParamsHelper(node);

String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
String accessToken = helper.getStringParam("__ACCESS_TOKEN__");
String folderID = helper.getStringParam("__FOLDERID__");
boolean useProxy = helper.getBoolParam("__USE_PROXY__");
boolean useSSL = helper.getBoolParam("__USE_SSL__");
boolean isFile = helper.getBoolParam("__FILE_MODE__");

String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
String connectionKey = "\"conn_" + connection+"\"";

List< ? extends IConnection> outputConnections = node.getOutgoingSortedConnections();
		
String dataOutputConnection = null;	
for(IConnection conn : outputConnections) {
    if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    	dataOutputConnection = conn.getName();
    	break;
    } // if(conn) end
} // for(conns) end


String fileName = ElementParameterParser.getValue(node, "__FILE_NAME__");
String folderName = ElementParameterParser.getValue(node, "__FOLDER_NAME__");
String dest_folderName = ElementParameterParser.getValue(node, "__DESTINATION_FOLDER_NAME__");
String dest_fieName = ElementParameterParser.getValue(node,  "__DESTINATION_FILE_NAME__");

boolean dieOnError = "true".equals(ElementParameterParser.getValue(node, "__DIE_ON_ERROR__"));
boolean rename = "true".equals(ElementParameterParser.getValue(node, "__RENAME__"));
boolean remove = "true".equals(ElementParameterParser.getValue(node, "__REMOVE_SOURCE_FILE__"));

%>
com.google.api.services.drive.Drive <%=cid%>_client;
<%

if(!"true".equals(useExistingConn)){
%>
{
<%
	if(useSSL) {
%>
 	javax.net.ssl.TrustManagerFactory tmf = javax.net.ssl.TrustManagerFactory
	.getInstance(javax.net.ssl.TrustManagerFactory
			.getDefaultAlgorithm());

	java.io.FileInputStream fis = new java.io.FileInputStream(
			<%=helper.getStringParam("__SSL_TRUST_STORE__")%>);
	java.security.KeyStore ks = java.security.KeyStore
			.getInstance(java.security.KeyStore.getDefaultType());
	<%String passwordFieldName = "__SSL_TRUST_STORE_PASSWORD__";%>
	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>                       
	ks.load(fis, decryptedPassword_<%=cid%>.toCharArray());
	fis.close();
	tmf.init(ks);
	javax.net.ssl.SSLContext sslContext = javax.net.ssl.SSLContext.getInstance(<%=helper.getStringParam("__SSL_ALGORITHM__")%>);
	sslContext.init(null, tmf.getTrustManagers(), new java.security.SecureRandom());
<%	
	}
%>
com.google.api.client.http.HttpTransport httpTransport = new com.google.api.client.http.javanet.NetHttpTransport.Builder()
<%
    if(useProxy){
        String proxyHost = helper.getStringParam("__PROXY_HOST__");
        String proxyPort = helper.getStringParam("__PROXY_PORT__");
%>
		.setProxy(new java.net.Proxy(java.net.Proxy.Type.HTTP, java.net.InetSocketAddress.createUnresolved(<%=proxyHost%>, <%=proxyPort%>)))
<%
	}
  	if(useSSL) {
%>
	.setSslSocketFactory(sslContext.getSocketFactory())
<%
  	}
%>
	.build();

	com.google.api.client.googleapis.auth.oauth2.GoogleCredential credential = new com.google.api.client.googleapis.auth.oauth2.GoogleCredential().setAccessToken(<%=accessToken%>);
	<%=cid%>_client = new  com.google.api.services.drive.Drive.Builder(httpTransport, new com.google.api.client.json.jackson2.JacksonFactory(), credential)
	.setApplicationName(<%=helper.getStringParam("__APPLICATION_NAME__")%>+" "+jobName+"/"+jobVersion+" (GPN:Talend)").build();
}	
<%
} else {
%>
	<%=cid%>_client = (com.google.api.services.drive.Drive)globalMap.get(<%=connectionKey%>);
<%
}%>

		com.google.api.services.drive.Drive.Files.List <%=cid%>_listRequest =  <%=cid%>_client.files().list();
        String destFolderName_<%=cid %> = <%=dest_folderName%>;
<%
   if (isFile) {
%>
        String fileName_<%=cid %> = <%=fileName%>;
        if(fileName_<%=cid %> == null || "".equals(fileName_<%=cid %>.trim()) || destFolderName_<%=cid %> == null || "".equals(destFolderName_<%=cid %>.trim()) )
		{
			throw new Exception("File/folder name can not be null");
		}
		<%=cid%>_listRequest.setQ("trashed = false and title = '" + <%=fileName%> + "' and mimeType != 'application/vnd.google-apps.folder'");
<%} else {%>
		String sourceFolder_<%=cid %> = <%=folderName%>; 
		if(sourceFolder_<%=cid %> == null || "".equals(sourceFolder_<%=cid %>.trim()) || destFolderName_<%=cid %> == null || "".equals(destFolderName_<%=cid %>.trim()) )
		{
			throw new Exception("File/folder name can not be null");
		}
		<%=cid%>_listRequest.setQ("trashed = false and title = '" + sourceFolder_<%=cid %> + "' and mimeType = 'application/vnd.google-apps.folder'");
<%}%>
		com.google.api.services.drive.model.FileList <%=cid%>_files = <%=cid%>_listRequest.execute();
		if (<%=cid%>_files.getItems().size() > 1)
		{
<%if (isFile) {
%>
			throw new Exception("More than one file found with name \"" + <%=fileName%> + "\" ");
<%} else {%>
			throw new Exception("More than one folder found with name \"" + <%=folderName%> + "\" ");
<%}%>
		}
		else if (<%=cid%>_files.getItems().isEmpty())
		{
<%if (isFile) {
%>
			throw new Exception("No file found with name \"" + <%=fileName%> + "\" ");
<%} else {%>
			throw new Exception("No folder found with name \"" + <%=folderName%> + "\" ");
<%}%>
		}
		else
		{
			com.google.api.services.drive.model.File <%=cid%>_sourceFile = <%=cid%>_files.getItems().get(0);
			String <%=cid%>_fileId = <%=cid%>_sourceFile.getId();
        	com.google.api.services.drive.model.File file = <%=cid%>_client.files().get(<%=cid%>_fileId).execute();
			com.google.api.services.drive.model.File resultFile = new com.google.api.services.drive.model.File();

			<%=cid%>_listRequest =  <%=cid%>_client.files().list();
			com.google.api.services.drive.model.FileList <%=cid%>_destFolders = null;
			String <%=cid%>_destFolderId = "root";
		<% if(!dest_folderName.equals("\"root\"")) { %>
			<%=cid%>_listRequest.setQ("trashed = false and title = '" + <%=dest_folderName%> + "' and mimeType = 'application/vnd.google-apps.folder'");
			<%=cid%>_destFolders = <%=cid%>_listRequest.execute();
			if (<%=cid%>_destFolders.getItems().size() > 1)
			{
				throw new Exception("More than one folder found with name \"" + <%=dest_folderName%> + "\" ");
			}
			else if (<%=cid%>_destFolders.getItems().isEmpty())
			{
				throw new Exception("No folder found with name \"" + <%=dest_folderName%> + "\" ");
			}
			else
			{
			<%=cid%>_destFolderId = <%=cid%>_destFolders.getItems().get(0).getId();
		<% } %>
        <%
        if (isFile) {
        %> 
		        com.google.api.services.drive.model.File copiedFile = new com.google.api.services.drive.model.File();
		        <%
					if (rename) {
		        %>
					copiedFile.setTitle(<%=dest_fieName%>); 
		        <%
				}
		        %>
		        copiedFile.setParents(java.util.Arrays.asList(new com.google.api.services.drive.model.ParentReference().setId(<%=cid%>_destFolderId)));
			    resultFile = <%=cid%>_client.files().copy(<%=cid%>_fileId, copiedFile).execute();
		        <%
				if (remove) {
		        %>
				     <%=cid%>_client.files().delete(<%=cid%>_fileId).execute();
		        <%
				}
		}else{
			    if (rename) {
		        %>
				   com.google.api.services.drive.model.File filePatch = new com.google.api.services.drive.model.File();
                   filePatch.setTitle(<%=dest_fieName%>);
                   com.google.api.services.drive.Drive.Files.Patch patchRequest = <%=cid%>_client.files().patch(<%=cid%>_fileId, filePatch);
                   patchRequest.setFields("title");
                   patchRequest.execute();
		        <%
				}
		        %>
		        if (<%=cid%>_sourceFile.getParents().size() > 1)
		        {
		        	throw new Exception("Failed to delete (this folder has more than one parent)");
		        }
				String <%=cid%>_sourceFolderId = <%=cid%>_sourceFile.getParents().get(0).getId();
               	<%=cid%>_client.parents().insert(<%=cid%>_fileId, new com.google.api.services.drive.model.ParentReference().setId(<%=cid%>_destFolderId)).execute();
			   	<%=cid%>_client.parents().delete(<%=cid%>_fileId, <%=cid%>_sourceFolderId).execute();
			   	resultFile = file;
		<%}	

		if(dataOutputConnection != null) {
        %>
			<%=dataOutputConnection%>.sourceFileID = <%=cid%>_fileId;
			<%=dataOutputConnection%>.destinationFileID =  resultFile.getId();
        <%}%>
		globalMap.put("<%=cid%>_SOURCE_FILEID", <%=cid%>_fileId);
		globalMap.put("<%=cid%>_DESTINATION_FILEID", resultFile.getId());
	<% if(!dest_folderName.equals("\"root\"")) { %>
		}
	<% } %>
	}
			