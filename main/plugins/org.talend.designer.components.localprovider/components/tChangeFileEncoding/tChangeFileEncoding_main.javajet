<%@ jet 
  imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
  "
%>

<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
String inFileName = ElementParameterParser.getValue(node, "__INFILE_NAME__");
String outFileName = ElementParameterParser.getValue(node, "__OUTFILE_NAME__");
String sInEncoding = ElementParameterParser.getValue(node, "__INENCODING__");
String sOutEncoding = ElementParameterParser.getValue(node, "__ENCODING__");
boolean bNeedEncode = "true".equals(ElementParameterParser.getValue(node, "__USE_INENCODING__"));
boolean bCreateDir = "true".equals(ElementParameterParser.getValue(node, "__CREATE__"));
String sTmpOutFileName = outFileName;

log4jFileUtil.componentStartInfo(node);
if (outFileName.equals(inFileName)){
  sTmpOutFileName = outFileName + "+ \"_tmp\"";
  bCreateDir = false;
}
%>
String sOutFileN_<%=cid%> = <%=sTmpOutFileName%>, sOriFileN_<%=cid%> = <%=inFileName%>;
java.io.File outFile_<%=cid%> = new java.io.File(sOutFileN_<%=cid%>);

<%if (bCreateDir) {%>
  //create directory only if not exists
  java.io.File parentFile_<%=cid%> = outFile_<%=cid%>.getParentFile();

  if (parentFile_<%=cid%> != null && !parentFile_<%=cid%>.exists()) {
    parentFile_<%=cid%>.mkdirs();
  }
<%}%>
final java.io.BufferedWriter out<%=cid %> = new java.io.BufferedWriter(
  new java.io.OutputStreamWriter(
    new java.io.FileOutputStream(sOutFileN_<%=cid%>, false), <%=sOutEncoding%>
));
    
java.io.BufferedReader in_<%=cid %> = new java.io.BufferedReader(
  new java.io.InputStreamReader(
    new java.io.FileInputStream(sOriFileN_<%=cid%>), <%=bNeedEncode ? sInEncoding : "System.getProperty(\"file.encoding\")"%>
));

//8192: the default buffer size of BufferedReader
char[] cbuf_<%=cid %> = new char[8192];  
int readSize_<%=cid %> = 0;

while ((readSize_<%=cid %> = in_<%=cid %>.read(cbuf_<%=cid %>)) != -1) {
  out<%=cid %>.write(cbuf_<%=cid %>, 0, readSize_<%=cid %>);
}
out<%=cid %>.flush();
out<%=cid %>.close();
in_<%=cid %>.close();

<%if (outFileName.equals(inFileName)){%>
  if (outFile_<%=cid%>.exists()) {
    java.io.File oriFile_<%=cid%> = new java.io.File(sOriFileN_<%=cid%>);
    
    if (!oriFile_<%=cid%>.exists() || (oriFile_<%=cid%>.exists() && oriFile_<%=cid%>.delete())) {
      outFile_<%=cid%>.renameTo(oriFile_<%=cid%>);
    }
  }
<%}%>
globalMap.put("<%=cid %>_ISEND", true);

