<%@ jet 
  imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
    org.talend.core.model.process.IElementParameter
    org.talend.core.model.utils.NodeUtil 
  "
%>
<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%> 
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
String host = ElementParameterParser.getValue(node, "__HOST__");
String port = ElementParameterParser.getValue(node, "__PORT__");
String user = ElementParameterParser.getValue(node, "__USERNAME__");

boolean use_encoding = "true".equals(ElementParameterParser.getValue(node, "__USE_ENCODING__"));

String remotedir = ElementParameterParser.getValue(node, "__REMOTEDIR__");
List<Map<String, String>> files = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FILES__");  
String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
String authMethod = ElementParameterParser.getValue(node,"__AUTH_METHOD__");
String privateKey = ElementParameterParser.getValue(node,"__PRIVATEKEY__");

boolean useProxy = ("true").equals(ElementParameterParser.getValue(node,"__USE_PROXY__"));
String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
String proxyUser = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");

String connectMode = ElementParameterParser.getValue(node,"__CONNECT_MODE__");
String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
String conn= "conn_" + connection;
String useExistingConn = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");
boolean moveToCurrentDir = ("true").equals(ElementParameterParser.getValue(node, "__MOVE_TO_THE_CURRENT_DIRECTORY__"));
boolean sftp = false;

if (("true").equals(useExistingConn)) {
  List<? extends INode> nodeList = node.getProcess().getGeneratingNodes();

  for (INode n : nodeList) {
    if (n.getUniqueName().equals(connection)) {
      sftp = ("true").equals(ElementParameterParser.getValue(n, "__SFTP__"));
    }
  }
} else {
  sftp = ("true").equals(ElementParameterParser.getValue(node, "__SFTP__"));
}

boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
String passwordFieldName = "";

//The following part support the socks proxy for FTP and SFTP (Socks V4 or V5, they are all OK). 
//And it can not work with the FTP proxy directly, only support the socks proxy.
if (useProxy) {
%>
	java.util.Properties props_<%=cid%> = System.getProperties();
	props_<%=cid%>.put("socksProxyPort", <%=proxyPort %>);
	props_<%=cid%>.put("socksProxyHost", <%=proxyHost %>);
	props_<%=cid%>.put("java.net.socks.username", <%=proxyUser %>);
	
<%
passwordFieldName = "__PROXY_PASSWORD__";
if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
%> 
  	String decryptedProxyPassword_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
<%} else {%>
  	String decryptedProxyPassword_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
<%}%>

	props_<%=cid%>.put("java.net.socks.password", decryptedProxyPassword_<%=cid%>);        
<%}%>
	int nb_file_<%=cid%> = 0;

<%    
if (sftp) {  // *** sftp *** //

	if (("false").equals(useExistingConn)) {
  %>
		class MyUserInfo_<%=cid%> implements com.jcraft.jsch.UserInfo, com.jcraft.jsch.UIKeyboardInteractive {
		
            <%
            passwordFieldName = "__PASSPHRASE__";
            if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
            %> 
      			String decryptedPassphrase_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
            <%} else {%>
          		String decryptedPassphrase_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
            <%}%>
            
			String passphrase_<%=cid %> = decryptedPassphrase_<%=cid%>;
			public String getPassphrase() { return passphrase_<%=cid %>; }
			public String getPassword() { return null; } 
			public boolean promptPassword(String arg0) { return true; } 
			public boolean promptPassphrase(String arg0) { return true; } 
			public boolean promptYesNo(String arg0) { return true; } 
			public void showMessage(String arg0) { } 

			public String[] promptKeyboardInteractive(String destination, String name, String instruction, String[] prompt,
			boolean[] echo) {
			
			<%
			passwordFieldName = "__PASSWORD__";
			%> 
    	
			<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
			
				String[] password_<%=cid%> = {decryptedPassword_<%=cid%>};
				return password_<%=cid%>;
			}
		}; 
		final com.jcraft.jsch.UserInfo defaultUserInfo_<%=cid%> = new MyUserInfo_<%=cid%>();
		com.jcraft.jsch.JSch jsch_<%=cid%>=new com.jcraft.jsch.JSch(); 

		<%if (("PUBLICKEY").equals(authMethod)) {%>
			<%if(isLog4jEnabled){%>
				log.info("<%=cid%> - SFTP authentication using a public key.");
				log.debug("<%=cid%> - Private key: '" + <%=privateKey%> + "'.");
	  		<%}%>
			jsch_<%=cid%>.addIdentity(<%=privateKey %>, defaultUserInfo_<%=cid%>.getPassphrase());
		<%}%>
		
	    com.jcraft.jsch.Session session_<%=cid%>=jsch_<%=cid%>.getSession(<%=user%>, <%=host%>, <%=port%>);
	    session_<%=cid%>.setConfig("PreferredAuthentications", "publickey,password,keyboard-interactive,gssapi-with-mic");

    	<%if (("PASSWORD").equals(authMethod)) {%> 
			<%if(isLog4jEnabled){%>
				log.info("<%=cid%> - SFTP authentication using a password.");
			<%}%>
			
			<%
			passwordFieldName = "__PASSWORD__";
			%> 
    	
			<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
			
		session_<%=cid%>.setPassword(decryptedPassword_<%=cid%>); 
		<%}%>

		session_<%=cid%>.setUserInfo(defaultUserInfo_<%=cid%>); 
		<%if (!useProxy) {%>
			if(("true").equals(System.getProperty("http.proxySet")) ){
				com.jcraft.jsch.ProxyHTTP proxy_<%=cid%> = new com.jcraft.jsch.ProxyHTTP(System.getProperty("http.proxyHost"),Integer.parseInt(System.getProperty("http.proxyPort")));
				if(!"".equals(System.getProperty("http.proxyUser"))){
					proxy_<%=cid%>.setUserPasswd(System.getProperty("http.proxyUser"),System.getProperty("http.proxyPassword"));
				}
			session_<%=cid%>.setProxy(proxy_<%=cid%>);
				}
		<%}%>
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Attempt to connect to '" + <%=host %> + "' with username '" + <%=user%> + "'.");
		<%}%>
		session_<%=cid%>.connect();
		com.jcraft.jsch. Channel channel_<%=cid%>=session_<%=cid%>.openChannel("sftp");
		channel_<%=cid%>.connect();
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Connect to '" + <%=host %> + "' has succeeded.");
		<%}%>
    	com.jcraft.jsch.ChannelSftp c_<%=cid%>=(com.jcraft.jsch.ChannelSftp)channel_<%=cid%>;
    	
    	<%if(use_encoding) {%>
    		c_<%=cid%>.setFilenameEncoding(<%=encoding%>);
    	<%}%>	
    		
<%
	} else {
%>    
	    com.jcraft.jsch.ChannelSftp c_<%=cid%> = (com.jcraft.jsch.ChannelSftp)globalMap.get("<%=conn %>");
		<%if(isLog4jEnabled){%>
			if(c_<%=cid%>!=null && c_<%=cid%>.getSession()!=null) {
				log.info("<%=cid%> - Use an existing connection.Connection username: " + c_<%=cid%>.getSession().getUserName() + ", Connection hostname: " + c_<%=cid%>.getSession().getHost() + ", Connection port: " + c_<%=cid%>.getSession().getPort() + "."); 
			}
		<%}%>
	    if(c_<%=cid%>.getHome()!=null && !c_<%=cid%>.getHome().equals(c_<%=cid%>.pwd())){
	  		c_<%=cid%>.cd(c_<%=cid%>.getHome());
	  	}
  <%
	}
  %>
	java.util.List<java.util.Map<String,String>> list<%=cid %> = new java.util.ArrayList<java.util.Map<String,String>>();
  
	<%
	for (int i = 0; i < files.size(); i++) {
		Map<String, String> line = files.get(i);
	%>    
	    java.util.Map<String,String> map<%=cid %><%=i %> = new java.util.HashMap<String,String>();  
	    map<%=cid %><%=i %>.put(<%= line.get("FILEMASK") %>,<%= line.get("NEWNAME") %>);
	    list<%=cid %>.add(map<%=cid %><%=i %>);       
<%
	}
%>

    <%if(isLog4jEnabled){%>
    	log.info("<%=cid%> - Renaming file from server.");
    <%}%>
	for (java.util.Map<String, String> map<%=cid %> : list<%=cid %>) {

<%
} else {// *** ftp *** //
%>
	com.enterprisedt.net.ftp.FTPClient ftp_<%=cid %> =null;

	<%if (("true").equals(useExistingConn)) {%>
    	ftp_<%=cid %> = (com.enterprisedt.net.ftp.FTPClient)globalMap.get("<%=conn %>");
		<%if(isLog4jEnabled){%>
			if(ftp_<%=cid %>!=null) {
				log.info("<%=cid%> - Use an existing connection. Connection hostname: " + ftp_<%=cid %>.getRemoteHost() + ", Connection port: " + ftp_<%=cid %>.getRemotePort() + "."); 
			}
		<%}%>
	  	<%if(!moveToCurrentDir){%>
	  		String rootDir_<%=cid %> = ftp_<%=cid %>.pwd();
	  	<%}%>
	<%} else {%>    
	    ftp_<%=cid %> = new com.enterprisedt.net.ftp.FTPClient();
	    ftp_<%=cid %>.setRemoteHost(<%=host %>);
	    ftp_<%=cid %>.setRemotePort(<%=port %>);

	    <%if(isLog4jEnabled){%>
			log.debug("<%=cid%> - " + <%=(("ACTIVE").equals(connectMode))?"\"Using the active mode.\"":"\"Using the passive mode.\""%>);
		<%}%>
		<%if (("ACTIVE").equals(connectMode)) {%>
			ftp_<%=cid %>.setConnectMode(com.enterprisedt.net.ftp.FTPConnectMode.ACTIVE);
		<%} else {%>
			ftp_<%=cid %>.setConnectMode(com.enterprisedt.net.ftp.FTPConnectMode.PASV);
		<%}%>
		ftp_<%=cid %>.setControlEncoding(<%=encoding%>);
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Attempt to connect to '" + <%=host %> + "' with username '" +<%=user %>+ "'.");
		<%}%>
		ftp_<%=cid %>.connect();  
		
		<%
		passwordFieldName = "__PASSWORD__";
		%> 
    	
		<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
			
		ftp_<%=cid %>.login(<%=user %>, decryptedPassword_<%=cid%>);
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Connect to '" + <%=host %> + "' has succeeded.");
		<%}%>   
	<%}%>
	java.util.List<java.util.Map<String,String>> list<%=cid %> = new java.util.ArrayList<java.util.Map<String,String>>();

	<%
	for (int i = 0; i < files.size(); i++) {
		Map<String, String> line = files.get(i);
    %>    
		java.util.Map<String,String> map<%=cid %><%=i %> = new java.util.HashMap<String,String>();  
		map<%=cid %><%=i %>.put(<%= line.get("FILEMASK") %>,<%= line.get("NEWNAME") %>);
		list<%=cid %>.add(map<%=cid %><%=i %>);       
	<%
	}
	%>  
	String remotedir<%=cid %> = <%=remotedir%>;
	ftp_<%=cid %>.chdir(remotedir<%=cid %>);

	<%if(isLog4jEnabled){%>
		log.info("<%=cid%> - Renaming file from server.");
	<%}%>
	for (java.util.Map<String, String> map<%=cid %> : list<%=cid %>) { 
<%}%>
