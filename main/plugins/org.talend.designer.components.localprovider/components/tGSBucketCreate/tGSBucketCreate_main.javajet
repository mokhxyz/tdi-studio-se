<%@ jet 
	imports="
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
	"
%>
	<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    
    String accessKey = ElementParameterParser.getValue(node, "__ACCESS_KEY__");

	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
	boolean isSpecialConfig=("true").equals(ElementParameterParser.getValue(node,"__SPECIAL_CONFIGUER__"));
	String bucketName=ElementParameterParser.getValue(node,"__BUCKET__");
	String projectID=ElementParameterParser.getValue(node,"__PROJECT_ID__");
	String location = ElementParameterParser.getValue(node,"__LOCATION__");
	String acl = ElementParameterParser.getValue(node,"__ACL__");
	
	String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	
	%>
	org.jets3t.service.impl.rest.httpclient.GoogleStorageService service_<%=cid%> = null;
	try {
	<%
	if(("true").equals(useExistingConn)) {
		String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
		%>
		service_<%=cid%> = (org.jets3t.service.impl.rest.httpclient.GoogleStorageService)globalMap.get("service_<%=connection%>");
		<%
		if(isLog4jEnabled){
		%>	
			log.info("<%=cid%> - Get an free connection from " + "<%=connection%>" + ".");
		<%
		}
	}else{
	%>

       <%
       String passwordFieldName = "__SECRET_KEY__";
       %>

	   <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
	   
		org.jets3t.service.security.GSCredentials credentials_<%=cid%> = new org.jets3t.service.security.GSCredentials(<%=accessKey%>,decryptedPassword_<%=cid%>);
		
		service_<%=cid%> = new org.jets3t.service.impl.rest.httpclient.GoogleStorageService(credentials_<%=cid%>,jobName+"/"+jobVersion+" (GPN:Talend)",null);
		service_<%=cid%>.getAccountOwner();
		<%		
		}
		if(!isSpecialConfig){
		%>
			service_<%=cid%>.createBucket(<%=bucketName%>);
		<%
		}else{
		%>
			service_<%=cid%>.createBucket(<%=bucketName%>,org.jets3t.service.model.GSBucket.<%=location%>,
				<%if("NONE".endsWith(acl)){%>null<%}else{%>org.jets3t.service.acl.AccessControlList.<%=acl%><%}%>,<%=projectID%>);
		<%
		}
		%>
	}catch(org.jets3t.service.ServiceException e_<%=cid%>) {
		<%
		if (("true").equals(dieOnError)) {
		%>
			throw(e_<%=cid%>);
		<%
		} else {
			if(isLog4jEnabled){
			%>
				log.error("<%=cid%> - Exception in component <%=cid%>:" + e_<%=cid%>.getMessage());
			<%
			}
			%>
			System.err.println("Exception in component <%=cid%>:");
			System.err.println(e_<%=cid%>.getMessage());
			if(e_<%=cid%>.getErrorCode()!=null){
				<%
				if(isLog4jEnabled){
				%>
					log.error("<%=cid%> - " + e_<%=cid%>.getErrorCode());
				<%
				}
				%>
				System.err.println(e_<%=cid%>.getErrorCode());
			}
			if(e_<%=cid%>.getErrorMessage()!=null){
				<%
				if(isLog4jEnabled){
				%>
					log.error("<%=cid%> - " + e_<%=cid%>.getErrorMessage());
				<%
				}
				%>
				System.err.println(e_<%=cid%>.getErrorMessage());
			}
		<%
		}
		if(!("true").equals(useExistingConn)) {
		%>
			}finally{
				if(service_<%=cid%> !=null){
					service_<%=cid%>.shutdown();
				}
		
		<%
		}
		%>
	}
	
	