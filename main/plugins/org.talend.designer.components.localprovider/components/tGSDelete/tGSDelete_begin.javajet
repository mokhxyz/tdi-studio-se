<%@ jet 
	imports="
		org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.process.INode
		org.talend.designer.codegen.config.CodeGeneratorArgument
		
		java.util.List
		java.util.Map
	" 
%>
	<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    
    String accessKey = ElementParameterParser.getValue(node, "__ACCESS_KEY__");

	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
	boolean isSpecifyprojectID=("true").equals(ElementParameterParser.getValue(node,"__SPECIFY_PROJECT__"));
	String projectID=ElementParameterParser.getValue(node,"__PROJECT_ID__");
	String delimiter=ElementParameterParser.getValue(node,"__DELIMITER__");
	String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	
	%>
	int nb_line_<%=cid%> = 0;
	org.jets3t.service.impl.rest.httpclient.GoogleStorageService service_<%=cid%> = null;
	try {
	<%
	if(("true").equals(useExistingConn)) {
		String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
		%>
		service_<%=cid%> = (org.jets3t.service.impl.rest.httpclient.GoogleStorageService)globalMap.get("service_<%=connection%>");
		<%
		if(isLog4jEnabled){
		%>	
			log.info("<%=cid%> - Get an free connection from " + "<%=connection%>" + ".");
		<%
		}
	}else{
	%>

       <%
       String passwordFieldName = "__SECRET_KEY__";
       %>

	   <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

		org.jets3t.service.security.GSCredentials credentials_<%=cid%> = new org.jets3t.service.security.GSCredentials(<%=accessKey%>,decryptedPassword_<%=cid%>);
	
		service_<%=cid%> = new org.jets3t.service.impl.rest.httpclient.GoogleStorageService(credentials_<%=cid%>,jobName+"/"+jobVersion+" (GPN:Talend)",null);
		service_<%=cid%>.getAccountOwner();
	<%		
	}
	List<Map<String, String>> buckets = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__BUCKETS__");
	boolean queryDelObjInListBuckets = "true".equals(ElementParameterParser.getValue(node,"__DEL_IN_LIST_BUCKETS__"));
	if(!queryDelObjInListBuckets){
		String objects_prefix=ElementParameterParser.getValue(node,"__OBJECTS_PREFIX__");
		if(isSpecifyprojectID){
		%>
			org.jets3t.service.model.GSBucket[] buckets_<%=cid%>=service_<%=cid%>.listAllBuckets(<%=projectID%>);
		<%
		}else{
		%>
			org.jets3t.service.model.GSBucket[] buckets_<%=cid%>=service_<%=cid%>.listAllBuckets();
		<%
		}
		%>
		for (org.jets3t.service.model.GSBucket bucket_<%=cid%> : buckets_<%=cid%>) {
			String currentBucketName_<%=cid%> = bucket_<%=cid%>.getName();
			org.jets3t.service.model.GSObject[] objects_<%=cid%> = service_<%=cid%>.listObjects(currentBucketName_<%=cid%>,
			<%if(objects_prefix!=null && objects_prefix.trim().length()>0){%><%=objects_prefix%><% }else{%> null <%}%>,
			<%if(delimiter!=null && delimiter.trim().length()>0){%><%=delimiter%><% }else{%> null <%}%>
			);
	<%
	} else if(buckets.size()>0){
	%>
			java.util.List<java.util.Map<String,String>> list_<%=cid%> = new java.util.ArrayList<java.util.Map<String,String>>();
		<%
		for(int i=0;i<buckets.size();i++){
			Map<String, String> map=buckets.get(i);
			String bucket_name =map.get("BUCKET_NAME");
			String object_prefix =map.get("OBJECT_PREFIX");
			String object_delimiter =map.get("OBJECT_DELIMITER");
			%>
			java.util.Map<String,String> map_<%=cid %>_<%=i %> = new java.util.HashMap<String,String>();
			map_<%=cid %>_<%=i %>.put("BUCKET_NAME",<%=bucket_name%>);
			<%
			if(object_prefix!=null && object_prefix.trim().length()>0){
			%>
				map_<%=cid %>_<%=i %>.put("OBJECT_PREFIX",<%=object_prefix%>);
			<%
			}
			if(object_delimiter!=null && object_delimiter.trim().length()>0){
			%>
				map_<%=cid %>_<%=i %>.put("OBJECT_DELIMITER",<%=object_delimiter%>);
			<%
			}
			%>
			list_<%=cid%>.add(map_<%=cid %>_<%=i %>);
		<%
		}
		%>
		for (java.util.Map<String, String> map_<%=cid %>: list_<%=cid%>) {
			String currentBucketName_<%=cid%>=map_<%=cid %>.get("BUCKET_NAME");
			org.jets3t.service.model.GSObject[] objects_<%=cid%> =new org.jets3t.service.model.GSObject[0];
			try {
				objects_<%=cid%> = service_<%=cid%>.listObjects(currentBucketName_<%=cid%>,map_<%=cid %>.get("OBJECT_PREFIX"),map_<%=cid %>.get("OBJECT_DELIMITER"));
			}catch(org.jets3t.service.ServiceException e_<%=cid%>){
				<%
				if (("true").equals(dieOnError)) {
				%>
					throw(e_<%=cid%>);
				<%
				} else {
					if(isLog4jEnabled){
					%>
						log.error("<%=cid%> - Exception in component <%=cid%>:" + e_<%=cid%>.getMessage());
					<%
					}
					%>
					System.err.println("Exception in component <%=cid%>:");
					System.err.println(e_<%=cid%>.getMessage());
					if(e_<%=cid%>.getErrorCode()!=null){
						<%
						if(isLog4jEnabled){
						%>
							log.error("<%=cid%> - " + e_<%=cid%>.getErrorCode());
						<%
						}
						%>
						System.err.println(e_<%=cid%>.getErrorCode());
					}
					if(e_<%=cid%>.getErrorMessage()!=null){
						<%
						if(isLog4jEnabled){
						%>
							log.error("<%=cid%> - " + e_<%=cid%>.getErrorMessage());
						<%
						}
						%>
						System.err.println(e_<%=cid%>.getErrorMessage());
					}
				<%
				}
				%>
			}
	<%
	}
	if(!queryDelObjInListBuckets || buckets.size()>0){
	%>
		for (org.jets3t.service.model.GSObject objectSummary_<%=cid%> : objects_<%=cid%>) {
			nb_line_<%=cid%>++;
			service_<%=cid%>.deleteObject(currentBucketName_<%=cid%>,objectSummary_<%=cid%>.getKey());
	<%
	}
	%>