<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.MetadataTalendType    
    org.talend.core.model.metadata.MappingTypeRetriever    
    java.util.List
    java.util.ArrayList    
    java.util.Map
    java.util.HashMap
" 
skeleton="../templates/db_output_bulk.skeleton"
%>
<%@ include file="../templates/Log4j/Log4jDBConnUtil.javajet"%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
String table = ElementParameterParser.getValue(node, "__TABLE__");
String dbSchema = ElementParameterParser.getValue(node, "__SCHEMA_DB__");
String parallel = ElementParameterParser.getValue(node, "__COPY_MODE__");
String fileType = ElementParameterParser.getValue(node, "__FILETYPE__");
String fieldTerminator = ElementParameterParser.getValue(node, "__FIELDS_TERMINATED_BY__");
String maxErrors = ElementParameterParser.getValue(node, "__MAX_ERRORS__");
String dateFormat = ElementParameterParser.getValue(node, "__DATE_FORMAT__");
String timeFormat = ElementParameterParser.getValue(node, "__TIME_FORMAT__");
String addlOptions = ElementParameterParser.getValue(node, "__ADDL_OPTIONS__");
String fieldLayout = ElementParameterParser.getValue(node, "__FIELD_LAYOUT__");
String fixedWidth = ElementParameterParser.getValue(node, "__FIXED_WIDTH__");
String methodFixedWidth = ElementParameterParser.getValue(node, "__METHOD_FIXED_WIDTH__");
boolean convertToUppercase = false; // not active this function
boolean useExistingConnection = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
boolean removeQuotes = ("true").equals(ElementParameterParser.getValue(node, "__REMOVE_QUOTES__"));
boolean explicitIDs = ("true").equals(ElementParameterParser.getValue(node, "__EXPLICIT_IDS__"));
boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
String logLevel= ElementParameterParser.getValue(node, "__LOG_LEVEL__");
String logFile= ElementParameterParser.getValue(node, "__LOG_FILE__");
%>
String tableName_<%=cid%> = null;
String dbschema_<%=cid%> = null;
<%
if(useExistingConnection) {
	%>
	dbschema_<%=cid%> = (String)globalMap.get("schema_" + "<%=ElementParameterParser.getValue(node,"__CONNECTION__")%>");
	<%
} else {
	%>
	dbschema_<%=cid%> = <%=dbSchema%>;
	<%
}
%>
if(dbschema_<%=cid%> == null || dbschema_<%=cid%>.trim().length() == 0) {
	tableName_<%=cid%> = <%=table%>;
} else {
	tableName_<%=cid%> = dbschema_<%=cid%> + "\".\"" + <%=table%>;
}
<%
String file = ElementParameterParser.getValue(node, "__FILENAME__");

List<IMetadataColumn> columnList = getColumnList(node);
StringBuilder copyColumns = new StringBuilder("");
if(columnList != null && columnList.size() > 0) {
    copyColumns.append(" (");
    int count = 0;
    for(IMetadataColumn column : columnList) {
        copyColumns.append("\\\"" + column.getOriginalDbColumnName() + "\\\"");
        if(count != columnList.size() - 1) {
            copyColumns.append(",");
        }
        count++;
    }
    copyColumns.append(") ");
}
StringBuilder notNullColumns = new StringBuilder(" ");
List<Map<String, String>> notNullCols =
    (List<Map<String,String>>)ElementParameterParser.getObjectValue(
        node,"__FORCENOTNULL__" );
if(notNullCols != null && notNullCols.size() > 0) {
    notNullColumns.append("FORCE NOT NULL ");
    int notNullCount = 0;
    for(Map<String, String> notNullCol : notNullCols) {
        if(("true").equals(notNullCol.get("FORCENOTNULL"))) {
            notNullColumns.append("\\\"" + notNullCol.get("SCHEMA_COLUMN") + "\\\",");
            notNullCount++;
        }
    }
    if(notNullCount == 0) {
        notNullColumns = new StringBuilder(" ");
    }
}
%>
	String xpxSQL_<%=cid%>="";
	String bulkSQL_<%=cid%>="";
<%
	String gzipped = ("GZIP").equals(fileType) ? "GZIP " : "";
	if(("PARALLEL").equals(parallel)){
%>
	xpxSQL_<%=cid%> += "xpx 'localize \"" + tableName_<%=cid%> +"\"" + <%=file%> + " <%=gzipped%>'";
	bulkSQL_<%=cid%> += "COPY \"" + tableName_<%=cid%> + "\"" + 
		" FROM 'local' WITH PARALLEL <%=gzipped%> ";
<%
	} else {
%>
	bulkSQL_<%=cid%> += "COPY \"" + tableName_<%=cid%> + "\"" + "<%=copyColumns.toString()%>FROM '" +
		<%=file%> + "' WITH <%=gzipped%> ";
<%
	}
	if (("DELIMITED").equals(fieldLayout)) {
%>
	bulkSQL_<%=cid%> += "DELIMITER '" + (<%=fieldTerminator%>).charAt(0) + "' ";
<%
	}
	else {
		if(("true").equals(methodFixedWidth)){
		%>
			bulkSQL_<%=cid%> += "FIXEDWIDTH '" + <%=fixedWidth%> + "' ";
		<%
		} else {
		%>
		bulkSQL_<%=cid%> += "FIXEDWIDTH '";
		<%
		if(columnList!=null){
			int counter = 1;
			for(IMetadataColumn column:columnList){	
				if( columnList.size() != counter){
				%>
					bulkSQL_<%=cid%> += "<%=column.getOriginalDbColumnName()%>:<%=column.getLength()%>,";
				<%	} else { %>
					bulkSQL_<%=cid%> += "<%=column.getOriginalDbColumnName()%>:<%=column.getLength()%>";
				<% 	}
				counter++;
			}
		}
%>
		bulkSQL_<%=cid%> += "' ";
<%		
		}
	}
	if (removeQuotes) {
%>
	bulkSQL_<%=cid%> += "REMOVEQUOTES ";
<%
	}
	if (explicitIDs) {
%>
	bulkSQL_<%=cid%> += "EXPLICIT_IDS ";
<%
	}
/*
	int maxerr = 0;
	try {
		if (!(("").equals(maxErrors) || ("\"\"").equals(maxErrors) || ("\"0\"").equals(maxErrors))) {
			maxerr = ("\"").equals(maxErrors.substring(0, 0))
				? Integer.parseInt(maxErrors.substring(1, maxErrors.length() - 2))
				: Integer.parseInt(maxErrors);
		}
	}
	catch (java.lang.Exception e) { }
*/
	if (!(("").equals(maxErrors) || ("\"\"").equals(maxErrors) || ("\"0\"").equals(maxErrors))) {
%>
	bulkSQL_<%=cid%> += "MAXERROR " + <%=maxErrors%> + " ";
<%
	}
	if (dateFormat.length() > 0) {
%>
	bulkSQL_<%=cid%> += "DATEFORMAT '" + <%=dateFormat%> + "' ";
<%
	}
	if (timeFormat.length() > 0) {
%>
	bulkSQL_<%=cid%> += "TIMEFORMAT '" + <%=timeFormat%> + "' ";
<%
	}
	if (!(("").equals(addlOptions) || ("\"\"").equals(addlOptions))) {
%>
	bulkSQL_<%=cid%> += <%=addlOptions%> + " ";
<%
	}

String host = ElementParameterParser.getValue(node, "__HOST__");
String port = ElementParameterParser.getValue(node, "__PORT__");
String dbName = ElementParameterParser.getValue(node, "__DBNAME__");
String userName = ElementParameterParser.getValue(node, "__USER__");

%> 
if (<%= logLevel %> > 0) {
	java.io.Writer output_<%=cid %> = new java.io.FileWriter(<%= logFile %>, true);
	java.sql.DriverManager.setLogWriter(new java.io.PrintWriter(output_<%=cid %>,true));
}	
com.paraccel.Driver.setLogLevel(<%= logLevel %>);

java.sql.Connection conn_<%=cid%> = null;
	<%
	if(useExistingConnection) {
    		String conn = "conn_" + ElementParameterParser.getValue(node,"__CONNECTION__");
	%>
	 	conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
	 <%
	 	log4jCodeGenerateUtil.useExistConnection(node);
	 } else {
	 %>
	 	String driverClass_<%=cid%> = "com.paraccel.Driver";
		java.lang.Class.forName(driverClass_<%=cid%>).newInstance();
		String url_<%=cid%> = "jdbc:paraccel://" + <%=host%> + ":" + <%=port%> + "/" + <%=dbName%>+"?prepareThreshold=100&loglevel="+<%= logLevel %>+"&protocolVersion=3";
		String dbUser_<%=cid%> = <%=userName%>;
		<%
		String passwordFieldName = "__PASS__";
		%>
		
		<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
	   	
		String dbPwd_<%=cid%> = decryptedPassword_<%=cid%>;
	<%
		log4jCodeGenerateUtil.debugConnectionParams(node);
		log4jCodeGenerateUtil.connect(node);
	}
	%>

<%
String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
List<Column> stmtStructure = null;
Manager manager = null;
if(columnList != null && columnList.size() > 0) {
	stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, false, null, null);
}
if((columnList != null && columnList.size() > 0) || "CLEAR".equals(tableAction)){
%>
	<%@ include file="../templates/_tableActionForBulk.javajet"%>	
<%
}else{//TDI-29007
	manager = getManager(dbmsId, cid);
	manager.setNode(node);
}
    %>
    java.sql.Statement stmtBulk_<%=cid %> = conn_<%=cid %>.createStatement();
    //stmt.execute("SET client_encoding to 'UNICODE'");
<%
	if(("PARALLEL").equals(parallel)){
%>
	<%if(isLog4jEnabled){%>
		log.debug("<%=cid%> - Paralle bulk SQL:"+xpxSQL_<%=cid%>+".");
		log.debug("<%=cid%> - Executing parallel bulk SQL.");
	<%}%>
    java.sql.Statement stmtXPX_<%=cid %> = conn_<%=cid %>.createStatement();
    stmtXPX_<%=cid %>.execute(xpxSQL_<%=cid%>);
    <%if(isLog4jEnabled){%>
		log.debug("<%=cid%> - Execute parallel bulk SQL has finished.");
	<%}%>
    stmtXPX_<%=cid %>.close();    
<%
	}
%>
	<%if(isLog4jEnabled){%>
		log.debug("<%=cid%> - Bulk SQL:"+bulkSQL_<%=cid%>+".");
		log.info("<%=cid%> - Bulk inserting data into <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%>." );
	<%}%>
    stmtBulk_<%=cid %>.execute(bulkSQL_<%=cid%>);
	<%if(isLog4jEnabled){%>
		log.info("<%=cid%> - Bulk insert data into <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> has finished.");
	<%}%>
    stmtBulk_<%=cid %>.close();    
<%
	if(!useExistingConnection) {
		log4jCodeGenerateUtil.close(node);
	}
%>
