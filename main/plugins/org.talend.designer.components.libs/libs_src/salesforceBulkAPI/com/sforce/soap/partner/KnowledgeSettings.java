package com.sforce.soap.partner;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class KnowledgeSettings implements com.sforce.ws.bind.XMLizable , IKnowledgeSettings{

    /**
     * Constructor
     */
    public KnowledgeSettings() {}

    /**
     * element : defaultLanguage of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo defaultLanguage__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","defaultLanguage","http://www.w3.org/2001/XMLSchema","string",0,1,true);

    private boolean defaultLanguage__is_set = false;

    private java.lang.String defaultLanguage;

    @Override
    public java.lang.String getDefaultLanguage() {
      return defaultLanguage;
    }

    @Override
    public void setDefaultLanguage(java.lang.String defaultLanguage) {
      this.defaultLanguage = defaultLanguage;
      defaultLanguage__is_set = true;
    }

    protected void setDefaultLanguage(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, defaultLanguage__typeInfo)) {
        setDefaultLanguage(__typeMapper.readString(__in, defaultLanguage__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : knowledgeEnabled of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo knowledgeEnabled__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","knowledgeEnabled","http://www.w3.org/2001/XMLSchema","boolean",1,1,true);

    private boolean knowledgeEnabled__is_set = false;

    private boolean knowledgeEnabled;

    @Override
    public boolean getKnowledgeEnabled() {
      return knowledgeEnabled;
    }

    @Override
    public boolean isKnowledgeEnabled() {
      return knowledgeEnabled;
    }

    @Override
    public void setKnowledgeEnabled(boolean knowledgeEnabled) {
      this.knowledgeEnabled = knowledgeEnabled;
      knowledgeEnabled__is_set = true;
    }

    protected void setKnowledgeEnabled(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, knowledgeEnabled__typeInfo)) {
        setKnowledgeEnabled(__typeMapper.readBoolean(__in, knowledgeEnabled__typeInfo, boolean.class));
      }
    }

    /**
     * element : languages of type {urn:partner.soap.sforce.com}KnowledgeLanguageItem
     * java type: com.sforce.soap.partner.KnowledgeLanguageItem[]
     */
    private static final com.sforce.ws.bind.TypeInfo languages__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","languages","urn:partner.soap.sforce.com","KnowledgeLanguageItem",0,-1,true);

    private boolean languages__is_set = false;

    private com.sforce.soap.partner.KnowledgeLanguageItem[] languages = new com.sforce.soap.partner.KnowledgeLanguageItem[0];

    @Override
    public com.sforce.soap.partner.KnowledgeLanguageItem[] getLanguages() {
      return languages;
    }

    @Override
    public void setLanguages(com.sforce.soap.partner.IKnowledgeLanguageItem[] languages) {
      this.languages = castArray(com.sforce.soap.partner.KnowledgeLanguageItem.class, languages);
      languages__is_set = true;
    }

    protected void setLanguages(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, languages__typeInfo)) {
        setLanguages((com.sforce.soap.partner.KnowledgeLanguageItem[])__typeMapper.readObject(__in, languages__typeInfo, com.sforce.soap.partner.KnowledgeLanguageItem[].class));
      }
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       __typeMapper.writeString(__out, defaultLanguage__typeInfo, defaultLanguage, defaultLanguage__is_set);
       __typeMapper.writeBoolean(__out, knowledgeEnabled__typeInfo, knowledgeEnabled, knowledgeEnabled__is_set);
       __typeMapper.writeObject(__out, languages__typeInfo, languages, languages__is_set);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        setDefaultLanguage(__in, __typeMapper);
        setKnowledgeEnabled(__in, __typeMapper);
        setLanguages(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[KnowledgeSettings ");
      sb.append(" defaultLanguage='").append(com.sforce.ws.util.Verbose.toString(defaultLanguage)).append("'\n");
      sb.append(" knowledgeEnabled='").append(com.sforce.ws.util.Verbose.toString(knowledgeEnabled)).append("'\n");
      sb.append(" languages='").append(com.sforce.ws.util.Verbose.toString(languages)).append("'\n");
      sb.append("]\n");
      return sb.toString();
    }

    @SuppressWarnings("unchecked")
    private <T,U> T[] castArray(Class<T> clazz, U[] array) {
        if (array == null) {
            return null;
        }
        T[] retVal = (T[]) java.lang.reflect.Array.newInstance(clazz, array.length);
        for (int i=0; i < array.length; i++) {
            retVal[i] = (T)array[i];
        }

        return retVal;
	}
}
