package com.sforce.soap.partner;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class DescribeCompactLayoutsResult implements com.sforce.ws.bind.XMLizable , IDescribeCompactLayoutsResult{

    /**
     * Constructor
     */
    public DescribeCompactLayoutsResult() {}

    /**
     * element : compactLayouts of type {urn:partner.soap.sforce.com}DescribeCompactLayout
     * java type: com.sforce.soap.partner.DescribeCompactLayout[]
     */
    private static final com.sforce.ws.bind.TypeInfo compactLayouts__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","compactLayouts","urn:partner.soap.sforce.com","DescribeCompactLayout",1,-1,true);

    private boolean compactLayouts__is_set = false;

    private com.sforce.soap.partner.DescribeCompactLayout[] compactLayouts = new com.sforce.soap.partner.DescribeCompactLayout[0];

    @Override
    public com.sforce.soap.partner.DescribeCompactLayout[] getCompactLayouts() {
      return compactLayouts;
    }

    @Override
    public void setCompactLayouts(com.sforce.soap.partner.IDescribeCompactLayout[] compactLayouts) {
      this.compactLayouts = castArray(com.sforce.soap.partner.DescribeCompactLayout.class, compactLayouts);
      compactLayouts__is_set = true;
    }

    protected void setCompactLayouts(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, compactLayouts__typeInfo)) {
        setCompactLayouts((com.sforce.soap.partner.DescribeCompactLayout[])__typeMapper.readObject(__in, compactLayouts__typeInfo, com.sforce.soap.partner.DescribeCompactLayout[].class));
      }
    }

    /**
     * element : defaultCompactLayoutId of type {urn:partner.soap.sforce.com}ID
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo defaultCompactLayoutId__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","defaultCompactLayoutId","urn:partner.soap.sforce.com","ID",1,1,true);

    private boolean defaultCompactLayoutId__is_set = false;

    private java.lang.String defaultCompactLayoutId;

    @Override
    public java.lang.String getDefaultCompactLayoutId() {
      return defaultCompactLayoutId;
    }

    @Override
    public void setDefaultCompactLayoutId(java.lang.String defaultCompactLayoutId) {
      this.defaultCompactLayoutId = defaultCompactLayoutId;
      defaultCompactLayoutId__is_set = true;
    }

    protected void setDefaultCompactLayoutId(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, defaultCompactLayoutId__typeInfo)) {
        setDefaultCompactLayoutId(__typeMapper.readString(__in, defaultCompactLayoutId__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : recordTypeCompactLayoutMappings of type {urn:partner.soap.sforce.com}RecordTypeCompactLayoutMapping
     * java type: com.sforce.soap.partner.RecordTypeCompactLayoutMapping[]
     */
    private static final com.sforce.ws.bind.TypeInfo recordTypeCompactLayoutMappings__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","recordTypeCompactLayoutMappings","urn:partner.soap.sforce.com","RecordTypeCompactLayoutMapping",1,-1,true);

    private boolean recordTypeCompactLayoutMappings__is_set = false;

    private com.sforce.soap.partner.RecordTypeCompactLayoutMapping[] recordTypeCompactLayoutMappings = new com.sforce.soap.partner.RecordTypeCompactLayoutMapping[0];

    @Override
    public com.sforce.soap.partner.RecordTypeCompactLayoutMapping[] getRecordTypeCompactLayoutMappings() {
      return recordTypeCompactLayoutMappings;
    }

    @Override
    public void setRecordTypeCompactLayoutMappings(com.sforce.soap.partner.IRecordTypeCompactLayoutMapping[] recordTypeCompactLayoutMappings) {
      this.recordTypeCompactLayoutMappings = castArray(com.sforce.soap.partner.RecordTypeCompactLayoutMapping.class, recordTypeCompactLayoutMappings);
      recordTypeCompactLayoutMappings__is_set = true;
    }

    protected void setRecordTypeCompactLayoutMappings(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, recordTypeCompactLayoutMappings__typeInfo)) {
        setRecordTypeCompactLayoutMappings((com.sforce.soap.partner.RecordTypeCompactLayoutMapping[])__typeMapper.readObject(__in, recordTypeCompactLayoutMappings__typeInfo, com.sforce.soap.partner.RecordTypeCompactLayoutMapping[].class));
      }
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       __typeMapper.writeObject(__out, compactLayouts__typeInfo, compactLayouts, compactLayouts__is_set);
       __typeMapper.writeString(__out, defaultCompactLayoutId__typeInfo, defaultCompactLayoutId, defaultCompactLayoutId__is_set);
       __typeMapper.writeObject(__out, recordTypeCompactLayoutMappings__typeInfo, recordTypeCompactLayoutMappings, recordTypeCompactLayoutMappings__is_set);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        setCompactLayouts(__in, __typeMapper);
        setDefaultCompactLayoutId(__in, __typeMapper);
        setRecordTypeCompactLayoutMappings(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[DescribeCompactLayoutsResult ");
      sb.append(" compactLayouts='").append(com.sforce.ws.util.Verbose.toString(compactLayouts)).append("'\n");
      sb.append(" defaultCompactLayoutId='").append(com.sforce.ws.util.Verbose.toString(defaultCompactLayoutId)).append("'\n");
      sb.append(" recordTypeCompactLayoutMappings='").append(com.sforce.ws.util.Verbose.toString(recordTypeCompactLayoutMappings)).append("'\n");
      sb.append("]\n");
      return sb.toString();
    }

    @SuppressWarnings("unchecked")
    private <T,U> T[] castArray(Class<T> clazz, U[] array) {
        if (array == null) {
            return null;
        }
        T[] retVal = (T[]) java.lang.reflect.Array.newInstance(clazz, array.length);
        for (int i=0; i < array.length; i++) {
            retVal[i] = (T)array[i];
        }

        return retVal;
	}
}
