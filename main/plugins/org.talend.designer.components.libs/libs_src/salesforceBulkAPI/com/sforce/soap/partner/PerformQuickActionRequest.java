package com.sforce.soap.partner;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class PerformQuickActionRequest implements com.sforce.ws.bind.XMLizable , IPerformQuickActionRequest{

    /**
     * Constructor
     */
    public PerformQuickActionRequest() {}

    /**
     * element : contextId of type {urn:partner.soap.sforce.com}ID
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo contextId__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","contextId","urn:partner.soap.sforce.com","ID",1,1,true);

    private boolean contextId__is_set = false;

    private java.lang.String contextId;

    @Override
    public java.lang.String getContextId() {
      return contextId;
    }

    @Override
    public void setContextId(java.lang.String contextId) {
      this.contextId = contextId;
      contextId__is_set = true;
    }

    protected void setContextId(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, contextId__typeInfo)) {
        setContextId(__typeMapper.readString(__in, contextId__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : quickActionName of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo quickActionName__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","quickActionName","http://www.w3.org/2001/XMLSchema","string",1,1,true);

    private boolean quickActionName__is_set = false;

    private java.lang.String quickActionName;

    @Override
    public java.lang.String getQuickActionName() {
      return quickActionName;
    }

    @Override
    public void setQuickActionName(java.lang.String quickActionName) {
      this.quickActionName = quickActionName;
      quickActionName__is_set = true;
    }

    protected void setQuickActionName(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, quickActionName__typeInfo)) {
        setQuickActionName(__typeMapper.readString(__in, quickActionName__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : records of type {urn:sobject.partner.soap.sforce.com}sObject
     * java type: com.sforce.soap.partner.sobject.SObject[]
     */
    private static final com.sforce.ws.bind.TypeInfo records__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","records","urn:sobject.partner.soap.sforce.com","sObject",0,-1,true);

    private boolean records__is_set = false;

    private com.sforce.soap.partner.sobject.SObject[] records = new com.sforce.soap.partner.sobject.SObject[0];

    @Override
    public com.sforce.soap.partner.sobject.SObject[] getRecords() {
      return records;
    }

    @Override
    public void setRecords(com.sforce.soap.partner.sobject.ISObject[] records) {
      this.records = castArray(com.sforce.soap.partner.sobject.SObject.class, records);
      records__is_set = true;
    }

    protected void setRecords(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, records__typeInfo)) {
        setRecords((com.sforce.soap.partner.sobject.SObject[])__typeMapper.readObject(__in, records__typeInfo, com.sforce.soap.partner.sobject.SObject[].class));
      }
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       __typeMapper.writeString(__out, contextId__typeInfo, contextId, contextId__is_set);
       __typeMapper.writeString(__out, quickActionName__typeInfo, quickActionName, quickActionName__is_set);
       __typeMapper.writeObject(__out, records__typeInfo, records, records__is_set);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        setContextId(__in, __typeMapper);
        setQuickActionName(__in, __typeMapper);
        setRecords(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[PerformQuickActionRequest ");
      sb.append(" contextId='").append(com.sforce.ws.util.Verbose.toString(contextId)).append("'\n");
      sb.append(" quickActionName='").append(com.sforce.ws.util.Verbose.toString(quickActionName)).append("'\n");
      sb.append(" records='").append(com.sforce.ws.util.Verbose.toString(records)).append("'\n");
      sb.append("]\n");
      return sb.toString();
    }

    @SuppressWarnings("unchecked")
    private <T,U> T[] castArray(Class<T> clazz, U[] array) {
        if (array == null) {
            return null;
        }
        T[] retVal = (T[]) java.lang.reflect.Array.newInstance(clazz, array.length);
        for (int i=0; i < array.length; i++) {
            retVal[i] = (T)array[i];
        }

        return retVal;
	}
}
