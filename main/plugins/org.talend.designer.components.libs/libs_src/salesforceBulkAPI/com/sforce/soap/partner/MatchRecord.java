package com.sforce.soap.partner;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class MatchRecord implements com.sforce.ws.bind.XMLizable , IMatchRecord{

    /**
     * Constructor
     */
    public MatchRecord() {}

    /**
     * element : additionalInformation of type {urn:partner.soap.sforce.com}AdditionalInformationMap
     * java type: com.sforce.soap.partner.AdditionalInformationMap[]
     */
    private static final com.sforce.ws.bind.TypeInfo additionalInformation__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","additionalInformation","urn:partner.soap.sforce.com","AdditionalInformationMap",0,-1,true);

    private boolean additionalInformation__is_set = false;

    private com.sforce.soap.partner.AdditionalInformationMap[] additionalInformation = new com.sforce.soap.partner.AdditionalInformationMap[0];

    @Override
    public com.sforce.soap.partner.AdditionalInformationMap[] getAdditionalInformation() {
      return additionalInformation;
    }

    @Override
    public void setAdditionalInformation(com.sforce.soap.partner.IAdditionalInformationMap[] additionalInformation) {
      this.additionalInformation = castArray(com.sforce.soap.partner.AdditionalInformationMap.class, additionalInformation);
      additionalInformation__is_set = true;
    }

    protected void setAdditionalInformation(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, additionalInformation__typeInfo)) {
        setAdditionalInformation((com.sforce.soap.partner.AdditionalInformationMap[])__typeMapper.readObject(__in, additionalInformation__typeInfo, com.sforce.soap.partner.AdditionalInformationMap[].class));
      }
    }

    /**
     * element : fieldDiffs of type {urn:partner.soap.sforce.com}FieldDiff
     * java type: com.sforce.soap.partner.FieldDiff[]
     */
    private static final com.sforce.ws.bind.TypeInfo fieldDiffs__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","fieldDiffs","urn:partner.soap.sforce.com","FieldDiff",0,-1,true);

    private boolean fieldDiffs__is_set = false;

    private com.sforce.soap.partner.FieldDiff[] fieldDiffs = new com.sforce.soap.partner.FieldDiff[0];

    @Override
    public com.sforce.soap.partner.FieldDiff[] getFieldDiffs() {
      return fieldDiffs;
    }

    @Override
    public void setFieldDiffs(com.sforce.soap.partner.IFieldDiff[] fieldDiffs) {
      this.fieldDiffs = castArray(com.sforce.soap.partner.FieldDiff.class, fieldDiffs);
      fieldDiffs__is_set = true;
    }

    protected void setFieldDiffs(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, fieldDiffs__typeInfo)) {
        setFieldDiffs((com.sforce.soap.partner.FieldDiff[])__typeMapper.readObject(__in, fieldDiffs__typeInfo, com.sforce.soap.partner.FieldDiff[].class));
      }
    }

    /**
     * element : matchConfidence of type {http://www.w3.org/2001/XMLSchema}double
     * java type: double
     */
    private static final com.sforce.ws.bind.TypeInfo matchConfidence__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","matchConfidence","http://www.w3.org/2001/XMLSchema","double",1,1,true);

    private boolean matchConfidence__is_set = false;

    private double matchConfidence;

    @Override
    public double getMatchConfidence() {
      return matchConfidence;
    }

    @Override
    public void setMatchConfidence(double matchConfidence) {
      this.matchConfidence = matchConfidence;
      matchConfidence__is_set = true;
    }

    protected void setMatchConfidence(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, matchConfidence__typeInfo)) {
        setMatchConfidence((double)__typeMapper.readDouble(__in, matchConfidence__typeInfo, double.class));
      }
    }

    /**
     * element : record of type {urn:sobject.partner.soap.sforce.com}sObject
     * java type: com.sforce.soap.partner.sobject.SObject
     */
    private static final com.sforce.ws.bind.TypeInfo record__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","record","urn:sobject.partner.soap.sforce.com","sObject",1,1,true);

    private boolean record__is_set = false;

    private com.sforce.soap.partner.sobject.SObject record;

    @Override
    public com.sforce.soap.partner.sobject.SObject getRecord() {
      return record;
    }

    @Override
    public void setRecord(com.sforce.soap.partner.sobject.ISObject record) {
      this.record = (com.sforce.soap.partner.sobject.SObject)record;
      record__is_set = true;
    }

    protected void setRecord(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, record__typeInfo)) {
        setRecord((com.sforce.soap.partner.sobject.SObject)__typeMapper.readObject(__in, record__typeInfo, com.sforce.soap.partner.sobject.SObject.class));
      }
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       __typeMapper.writeObject(__out, additionalInformation__typeInfo, additionalInformation, additionalInformation__is_set);
       __typeMapper.writeObject(__out, fieldDiffs__typeInfo, fieldDiffs, fieldDiffs__is_set);
       __typeMapper.writeDouble(__out, matchConfidence__typeInfo, matchConfidence, matchConfidence__is_set);
       __typeMapper.writeObject(__out, record__typeInfo, record, record__is_set);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        setAdditionalInformation(__in, __typeMapper);
        setFieldDiffs(__in, __typeMapper);
        setMatchConfidence(__in, __typeMapper);
        setRecord(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[MatchRecord ");
      sb.append(" additionalInformation='").append(com.sforce.ws.util.Verbose.toString(additionalInformation)).append("'\n");
      sb.append(" fieldDiffs='").append(com.sforce.ws.util.Verbose.toString(fieldDiffs)).append("'\n");
      sb.append(" matchConfidence='").append(com.sforce.ws.util.Verbose.toString(matchConfidence)).append("'\n");
      sb.append(" record='").append(com.sforce.ws.util.Verbose.toString(record)).append("'\n");
      sb.append("]\n");
      return sb.toString();
    }

    @SuppressWarnings("unchecked")
    private <T,U> T[] castArray(Class<T> clazz, U[] array) {
        if (array == null) {
            return null;
        }
        T[] retVal = (T[]) java.lang.reflect.Array.newInstance(clazz, array.length);
        for (int i=0; i < array.length; i++) {
            retVal[i] = (T)array[i];
        }

        return retVal;
	}
}
