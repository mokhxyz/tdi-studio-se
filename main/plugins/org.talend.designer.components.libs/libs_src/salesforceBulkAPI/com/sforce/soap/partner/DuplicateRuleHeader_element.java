package com.sforce.soap.partner;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class DuplicateRuleHeader_element extends com.sforce.ws.bind.SoapHeaderObject implements com.sforce.ws.bind.XMLizable , IDuplicateRuleHeader_element{

    /**
     * Constructor
     */
    public DuplicateRuleHeader_element() {}

    /**
     * element : allowSave of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo allowSave__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","allowSave","http://www.w3.org/2001/XMLSchema","boolean",1,1,true);

    private boolean allowSave__is_set = false;

    private boolean allowSave;

    @Override
    public boolean getAllowSave() {
      return allowSave;
    }

    @Override
    public boolean isAllowSave() {
      return allowSave;
    }

    @Override
    public void setAllowSave(boolean allowSave) {
      this.allowSave = allowSave;
      allowSave__is_set = true;
    }

    protected void setAllowSave(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, allowSave__typeInfo)) {
        setAllowSave(__typeMapper.readBoolean(__in, allowSave__typeInfo, boolean.class));
      }
    }

    /**
     * element : includeRecordDetails of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo includeRecordDetails__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","includeRecordDetails","http://www.w3.org/2001/XMLSchema","boolean",1,1,true);

    private boolean includeRecordDetails__is_set = false;

    private boolean includeRecordDetails;

    @Override
    public boolean getIncludeRecordDetails() {
      return includeRecordDetails;
    }

    @Override
    public boolean isIncludeRecordDetails() {
      return includeRecordDetails;
    }

    @Override
    public void setIncludeRecordDetails(boolean includeRecordDetails) {
      this.includeRecordDetails = includeRecordDetails;
      includeRecordDetails__is_set = true;
    }

    protected void setIncludeRecordDetails(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, includeRecordDetails__typeInfo)) {
        setIncludeRecordDetails(__typeMapper.readBoolean(__in, includeRecordDetails__typeInfo, boolean.class));
      }
    }

    /**
     * element : runAsCurrentUser of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo runAsCurrentUser__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","runAsCurrentUser","http://www.w3.org/2001/XMLSchema","boolean",1,1,true);

    private boolean runAsCurrentUser__is_set = false;

    private boolean runAsCurrentUser;

    @Override
    public boolean getRunAsCurrentUser() {
      return runAsCurrentUser;
    }

    @Override
    public boolean isRunAsCurrentUser() {
      return runAsCurrentUser;
    }

    @Override
    public void setRunAsCurrentUser(boolean runAsCurrentUser) {
      this.runAsCurrentUser = runAsCurrentUser;
      runAsCurrentUser__is_set = true;
    }

    protected void setRunAsCurrentUser(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, runAsCurrentUser__typeInfo)) {
        setRunAsCurrentUser(__typeMapper.readBoolean(__in, runAsCurrentUser__typeInfo, boolean.class));
      }
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       super.writeFields(__out, __typeMapper);
       __typeMapper.writeBoolean(__out, allowSave__typeInfo, allowSave, allowSave__is_set);
       __typeMapper.writeBoolean(__out, includeRecordDetails__typeInfo, includeRecordDetails, includeRecordDetails__is_set);
       __typeMapper.writeBoolean(__out, runAsCurrentUser__typeInfo, runAsCurrentUser, runAsCurrentUser__is_set);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        super.loadFields(__in, __typeMapper);
        setAllowSave(__in, __typeMapper);
        setIncludeRecordDetails(__in, __typeMapper);
        setRunAsCurrentUser(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[DuplicateRuleHeader_element ");
      sb.append(super.toString());sb.append(" allowSave='").append(com.sforce.ws.util.Verbose.toString(allowSave)).append("'\n");
      sb.append(" includeRecordDetails='").append(com.sforce.ws.util.Verbose.toString(includeRecordDetails)).append("'\n");
      sb.append(" runAsCurrentUser='").append(com.sforce.ws.util.Verbose.toString(runAsCurrentUser)).append("'\n");
      sb.append("]\n");
      return sb.toString();
    }

}
