package com.sforce.soap.partner;

/**
 * Generated by ConnectionCodeGenerator.java. Please do not edit.
 */
public class PartnerConnectionWrapper implements IPartnerConnectionWrapper {

  private PartnerConnection connection;

  public PartnerConnectionWrapper(PartnerConnection connection) {
    this.connection = connection;
  }

  @Override
  public com.sforce.soap.partner.IDescribeSoqlListViewResult describeSoqlListViews(com.sforce.soap.partner.IDescribeSoqlListViewsRequest request)
       throws com.sforce.ws.ConnectionException {
       return connection.describeSoqlListViews((com.sforce.soap.partner.DescribeSoqlListViewsRequest) request);
  }

  @Override
  public com.sforce.soap.partner.IDescribeCompactLayoutsResult describeCompactLayouts(java.lang.String sObjectType,java.lang.String[] recordTypeIds)
       throws com.sforce.ws.ConnectionException {
       return connection.describeCompactLayouts( sObjectType, recordTypeIds);
  }

  @Override
  public com.sforce.soap.partner.IDescribeGlobalResult describeGlobal()
       throws com.sforce.ws.ConnectionException {
       return connection.describeGlobal();
  }

  @Override
  public com.sforce.soap.partner.sobject.ISObject[] retrieve(java.lang.String fieldList,java.lang.String sObjectType,java.lang.String[] ids)
       throws com.sforce.ws.ConnectionException {
       return connection.retrieve( fieldList, sObjectType, ids);
  }

  @Override
  public com.sforce.soap.partner.IDescribeTab[] describeAllTabs()
       throws com.sforce.ws.ConnectionException {
       return connection.describeAllTabs();
  }

  @Override
  public com.sforce.soap.partner.IDescribeLayoutResult describeLayout(java.lang.String sObjectType,java.lang.String layoutName,java.lang.String[] recordTypeIds)
       throws com.sforce.ws.ConnectionException {
       return connection.describeLayout( sObjectType, layoutName, recordTypeIds);
  }

  @Override
  public com.sforce.soap.partner.IEmptyRecycleBinResult[] emptyRecycleBin(java.lang.String[] ids)
       throws com.sforce.ws.ConnectionException {
       return connection.emptyRecycleBin( ids);
  }

  @Override
  public com.sforce.soap.partner.IDescribeAppMenuResult describeAppMenu(com.sforce.soap.partner.AppMenuType appMenuType)
       throws com.sforce.ws.ConnectionException {
       return connection.describeAppMenu( appMenuType);
  }

  @Override
  public com.sforce.soap.partner.IProcessResult[] process(com.sforce.soap.partner.IProcessRequest[] actions)
       throws com.sforce.ws.ConnectionException {
       return connection.process(castArray(com.sforce.soap.partner.ProcessRequest.class, actions));
  }

  @Override
  public void logout()
       throws com.sforce.ws.ConnectionException {
connection.logout();
  }

  @Override
  public com.sforce.soap.partner.IInvalidateSessionsResult[] invalidateSessions(java.lang.String[] sessionIds)
       throws com.sforce.ws.ConnectionException {
       return connection.invalidateSessions( sessionIds);
  }

  @Override
  public com.sforce.soap.partner.IKnowledgeSettings describeKnowledgeSettings()
       throws com.sforce.ws.ConnectionException {
       return connection.describeKnowledgeSettings();
  }

  @Override
  public com.sforce.soap.partner.IDescribeCompactLayout[] describePrimaryCompactLayouts(java.lang.String[] sObjectTypes)
       throws com.sforce.ws.ConnectionException {
       return connection.describePrimaryCompactLayouts( sObjectTypes);
  }

  @Override
  public com.sforce.soap.partner.IGetUserInfoResult getUserInfo()
       throws com.sforce.ws.ConnectionException {
       return connection.getUserInfo();
  }

  @Override
  public com.sforce.soap.partner.IGetServerTimestampResult getServerTimestamp()
       throws com.sforce.ws.ConnectionException {
       return connection.getServerTimestamp();
  }

  @Override
  public com.sforce.soap.partner.IDescribeSearchLayoutResult[] describeSearchLayouts(java.lang.String[] sObjectType)
       throws com.sforce.ws.ConnectionException {
       return connection.describeSearchLayouts( sObjectType);
  }

  @Override
  public com.sforce.soap.partner.IDescribeFlexiPageResult[] describeFlexiPages(java.lang.String[] flexiPages)
       throws com.sforce.ws.ConnectionException {
       return connection.describeFlexiPages( flexiPages);
  }

  @Override
  public com.sforce.soap.partner.ISetPasswordResult setPassword(java.lang.String userId,java.lang.String password)
       throws com.sforce.ws.ConnectionException {
       return connection.setPassword( userId, password);
  }

  @Override
  public com.sforce.soap.partner.ISendEmailResult[] sendEmailMessage(java.lang.String[] ids)
       throws com.sforce.ws.ConnectionException {
       return connection.sendEmailMessage( ids);
  }

  @Override
  public com.sforce.soap.partner.IDeleteResult[] delete(java.lang.String[] ids)
       throws com.sforce.ws.ConnectionException {
       return connection.delete( ids);
  }

  @Override
  public com.sforce.soap.partner.IDescribeTabSetResult[] describeTabs()
       throws com.sforce.ws.ConnectionException {
       return connection.describeTabs();
  }

  @Override
  public com.sforce.soap.partner.IExecuteListViewResult executeListView(com.sforce.soap.partner.IExecuteListViewRequest request)
       throws com.sforce.ws.ConnectionException {
       return connection.executeListView((com.sforce.soap.partner.ExecuteListViewRequest) request);
  }

  @Override
  public com.sforce.soap.partner.IDescribeSoftphoneLayoutResult describeSoftphoneLayout()
       throws com.sforce.ws.ConnectionException {
       return connection.describeSoftphoneLayout();
  }

  @Override
  public com.sforce.soap.partner.IDescribeSObjectResult describeSObject(java.lang.String sObjectType)
       throws com.sforce.ws.ConnectionException {
       return connection.describeSObject( sObjectType);
  }

  @Override
  public com.sforce.soap.partner.IDescribeSObjectResult[] describeSObjects(java.lang.String[] sObjectType)
       throws com.sforce.ws.ConnectionException {
       return connection.describeSObjects( sObjectType);
  }

  @Override
  public com.sforce.soap.partner.IGetUpdatedResult getUpdated(java.lang.String sObjectType,java.util.Calendar startDate,java.util.Calendar endDate)
       throws com.sforce.ws.ConnectionException {
       return connection.getUpdated( sObjectType, startDate, endDate);
  }

  @Override
  public com.sforce.soap.partner.IQueryResult queryAll(java.lang.String queryString)
       throws com.sforce.ws.ConnectionException {
       return connection.queryAll( queryString);
  }

  @Override
  public com.sforce.soap.partner.IDescribeApprovalLayoutResult describeApprovalLayout(java.lang.String sObjectType,java.lang.String[] approvalProcessNames)
       throws com.sforce.ws.ConnectionException {
       return connection.describeApprovalLayout( sObjectType, approvalProcessNames);
  }

  @Override
  public com.sforce.soap.partner.IResetPasswordResult resetPassword(java.lang.String userId)
       throws com.sforce.ws.ConnectionException {
       return connection.resetPassword( userId);
  }

  @Override
  public com.sforce.soap.partner.IMergeResult[] merge(com.sforce.soap.partner.IMergeRequest[] request)
       throws com.sforce.ws.ConnectionException {
       return connection.merge(castArray(com.sforce.soap.partner.MergeRequest.class, request));
  }

  @Override
  public com.sforce.soap.partner.IQueryResult query(java.lang.String queryString)
       throws com.sforce.ws.ConnectionException {
       return connection.query( queryString);
  }

  @Override
  public com.sforce.soap.partner.ISaveResult[] update(com.sforce.soap.partner.sobject.ISObject[] sObjects)
       throws com.sforce.ws.ConnectionException {
       return connection.update(castArray(com.sforce.soap.partner.sobject.SObject.class, sObjects));
  }

  @Override
  public com.sforce.soap.partner.IUndeleteResult[] undelete(java.lang.String[] ids)
       throws com.sforce.ws.ConnectionException {
       return connection.undelete( ids);
  }

  @Override
  public com.sforce.soap.partner.ILeadConvertResult[] convertLead(com.sforce.soap.partner.ILeadConvert[] leadConverts)
       throws com.sforce.ws.ConnectionException {
       return connection.convertLead(castArray(com.sforce.soap.partner.LeadConvert.class, leadConverts));
  }

  @Override
  public com.sforce.soap.partner.IDescribeGlobalTheme describeGlobalTheme()
       throws com.sforce.ws.ConnectionException {
       return connection.describeGlobalTheme();
  }

  @Override
  public com.sforce.soap.partner.IDescribeDataCategoryGroupStructureResult[] describeDataCategoryGroupStructures(com.sforce.soap.partner.IDataCategoryGroupSobjectTypePair[] pairs,boolean topCategoriesOnly)
       throws com.sforce.ws.ConnectionException {
       return connection.describeDataCategoryGroupStructures(castArray(com.sforce.soap.partner.DataCategoryGroupSobjectTypePair.class, pairs), topCategoriesOnly);
  }

  @Override
  public com.sforce.soap.partner.ISendEmailResult[] sendEmail(com.sforce.soap.partner.IEmail[] messages)
       throws com.sforce.ws.ConnectionException {
       return connection.sendEmail(castArray(com.sforce.soap.partner.Email.class, messages));
  }

  @Override
  public com.sforce.soap.partner.IDescribeAvailableQuickActionResult[] describeAvailableQuickActions(java.lang.String contextType)
       throws com.sforce.ws.ConnectionException {
       return connection.describeAvailableQuickActions( contextType);
  }

  @Override
  public com.sforce.soap.partner.ISaveResult[] create(com.sforce.soap.partner.sobject.ISObject[] sObjects)
       throws com.sforce.ws.ConnectionException {
       return connection.create(castArray(com.sforce.soap.partner.sobject.SObject.class, sObjects));
  }

  @Override
  public com.sforce.soap.partner.IDescribeNounResult[] describeNouns(java.lang.String[] nouns,boolean onlyRenamed,boolean includeFields)
       throws com.sforce.ws.ConnectionException {
       return connection.describeNouns( nouns, onlyRenamed, includeFields);
  }

  @Override
  public com.sforce.soap.partner.IGetDeletedResult getDeleted(java.lang.String sObjectType,java.util.Calendar startDate,java.util.Calendar endDate)
       throws com.sforce.ws.ConnectionException {
       return connection.getDeleted( sObjectType, startDate, endDate);
  }

  @Override
  public com.sforce.soap.partner.IDescribeQuickActionResult[] describeQuickActions(java.lang.String[] quickActions)
       throws com.sforce.ws.ConnectionException {
       return connection.describeQuickActions( quickActions);
  }

  @Override
  public com.sforce.soap.partner.IQuickActionTemplateResult[] retrieveQuickActionTemplates(java.lang.String[] quickActionNames,java.lang.String contextId)
       throws com.sforce.ws.ConnectionException {
       return connection.retrieveQuickActionTemplates( quickActionNames, contextId);
  }

  @Override
  public com.sforce.soap.partner.ILoginResult login(java.lang.String username,java.lang.String password)
       throws com.sforce.ws.ConnectionException {
       return connection.login( username, password);
  }

  @Override
  public com.sforce.soap.partner.IPerformQuickActionResult[] performQuickActions(com.sforce.soap.partner.IPerformQuickActionRequest[] quickActions)
       throws com.sforce.ws.ConnectionException {
       return connection.performQuickActions(castArray(com.sforce.soap.partner.PerformQuickActionRequest.class, quickActions));
  }

  @Override
  public com.sforce.soap.partner.IDescribeSearchScopeOrderResult[] describeSearchScopeOrder()
       throws com.sforce.ws.ConnectionException {
       return connection.describeSearchScopeOrder();
  }

  @Override
  public com.sforce.soap.partner.IDescribeDataCategoryGroupResult[] describeDataCategoryGroups(java.lang.String[] sObjectType)
       throws com.sforce.ws.ConnectionException {
       return connection.describeDataCategoryGroups( sObjectType);
  }

  @Override
  public com.sforce.soap.partner.IQueryResult queryMore(java.lang.String queryLocator)
       throws com.sforce.ws.ConnectionException {
       return connection.queryMore( queryLocator);
  }

  @Override
  public com.sforce.soap.partner.ISearchResult search(java.lang.String searchString)
       throws com.sforce.ws.ConnectionException {
       return connection.search( searchString);
  }

  @Override
  public com.sforce.soap.partner.IDescribeThemeResult describeTheme(java.lang.String[] sobjectType)
       throws com.sforce.ws.ConnectionException {
       return connection.describeTheme( sobjectType);
  }

  @Override
  public com.sforce.soap.partner.IUpsertResult[] upsert(java.lang.String externalIDFieldName,com.sforce.soap.partner.sobject.ISObject[] sObjects)
       throws com.sforce.ws.ConnectionException {
       return connection.upsert( externalIDFieldName,castArray(com.sforce.soap.partner.sobject.SObject.class, sObjects));
  }

  @Override
  public com.sforce.soap.partner.IDescribeSoqlListViewResult describeSObjectListViews(java.lang.String sObjectType,boolean recentsOnly,com.sforce.soap.partner.ListViewIsSoqlCompatible isSoqlCompatible,int limit,int offset)
       throws com.sforce.ws.ConnectionException {
       return connection.describeSObjectListViews( sObjectType, recentsOnly, isSoqlCompatible, limit, offset);
  }



@SuppressWarnings("unchecked")
  private <T,U> T[] castArray(Class<T> clazz, U[] array) {
      if (array == null) {
          return null;
      }
      T[] retVal = (T[]) java.lang.reflect.Array.newInstance(clazz, array.length);
      for (int i=0; i < array.length; i++) {
          retVal[i] = (T)array[i];
      }

      return retVal;
  }
}
