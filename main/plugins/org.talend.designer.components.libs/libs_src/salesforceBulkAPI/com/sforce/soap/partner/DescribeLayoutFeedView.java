package com.sforce.soap.partner;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class DescribeLayoutFeedView implements com.sforce.ws.bind.XMLizable , IDescribeLayoutFeedView{

    /**
     * Constructor
     */
    public DescribeLayoutFeedView() {}

    /**
     * element : feedFilters of type {urn:partner.soap.sforce.com}DescribeLayoutFeedFilter
     * java type: com.sforce.soap.partner.DescribeLayoutFeedFilter[]
     */
    private static final com.sforce.ws.bind.TypeInfo feedFilters__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","feedFilters","urn:partner.soap.sforce.com","DescribeLayoutFeedFilter",0,-1,true);

    private boolean feedFilters__is_set = false;

    private com.sforce.soap.partner.DescribeLayoutFeedFilter[] feedFilters = new com.sforce.soap.partner.DescribeLayoutFeedFilter[0];

    @Override
    public com.sforce.soap.partner.DescribeLayoutFeedFilter[] getFeedFilters() {
      return feedFilters;
    }

    @Override
    public void setFeedFilters(com.sforce.soap.partner.IDescribeLayoutFeedFilter[] feedFilters) {
      this.feedFilters = castArray(com.sforce.soap.partner.DescribeLayoutFeedFilter.class, feedFilters);
      feedFilters__is_set = true;
    }

    protected void setFeedFilters(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, feedFilters__typeInfo)) {
        setFeedFilters((com.sforce.soap.partner.DescribeLayoutFeedFilter[])__typeMapper.readObject(__in, feedFilters__typeInfo, com.sforce.soap.partner.DescribeLayoutFeedFilter[].class));
      }
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       __typeMapper.writeObject(__out, feedFilters__typeInfo, feedFilters, feedFilters__is_set);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        setFeedFilters(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[DescribeLayoutFeedView ");
      sb.append(" feedFilters='").append(com.sforce.ws.util.Verbose.toString(feedFilters)).append("'\n");
      sb.append("]\n");
      return sb.toString();
    }

    @SuppressWarnings("unchecked")
    private <T,U> T[] castArray(Class<T> clazz, U[] array) {
        if (array == null) {
            return null;
        }
        T[] retVal = (T[]) java.lang.reflect.Array.newInstance(clazz, array.length);
        for (int i=0; i < array.length; i++) {
            retVal[i] = (T)array[i];
        }

        return retVal;
	}
}
