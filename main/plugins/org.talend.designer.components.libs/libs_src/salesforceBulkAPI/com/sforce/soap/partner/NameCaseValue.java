package com.sforce.soap.partner;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class NameCaseValue implements com.sforce.ws.bind.XMLizable , INameCaseValue{

    /**
     * Constructor
     */
    public NameCaseValue() {}

    /**
     * element : article of type {urn:partner.soap.sforce.com}Article
     * java type: com.sforce.soap.partner.Article
     */
    private static final com.sforce.ws.bind.TypeInfo article__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","article","urn:partner.soap.sforce.com","Article",1,1,true);

    private boolean article__is_set = false;

    private com.sforce.soap.partner.Article article;

    @Override
    public com.sforce.soap.partner.Article getArticle() {
      return article;
    }

    @Override
    public void setArticle(com.sforce.soap.partner.Article article) {
      this.article = article;
      article__is_set = true;
    }

    protected void setArticle(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, article__typeInfo)) {
        setArticle((com.sforce.soap.partner.Article)__typeMapper.readObject(__in, article__typeInfo, com.sforce.soap.partner.Article.class));
      }
    }

    /**
     * element : caseType of type {urn:partner.soap.sforce.com}CaseType
     * java type: com.sforce.soap.partner.CaseType
     */
    private static final com.sforce.ws.bind.TypeInfo caseType__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","caseType","urn:partner.soap.sforce.com","CaseType",1,1,true);

    private boolean caseType__is_set = false;

    private com.sforce.soap.partner.CaseType caseType;

    @Override
    public com.sforce.soap.partner.CaseType getCaseType() {
      return caseType;
    }

    @Override
    public void setCaseType(com.sforce.soap.partner.CaseType caseType) {
      this.caseType = caseType;
      caseType__is_set = true;
    }

    protected void setCaseType(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, caseType__typeInfo)) {
        setCaseType((com.sforce.soap.partner.CaseType)__typeMapper.readObject(__in, caseType__typeInfo, com.sforce.soap.partner.CaseType.class));
      }
    }

    /**
     * element : number of type {urn:partner.soap.sforce.com}GrammaticalNumber
     * java type: com.sforce.soap.partner.GrammaticalNumber
     */
    private static final com.sforce.ws.bind.TypeInfo number__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","number","urn:partner.soap.sforce.com","GrammaticalNumber",1,1,true);

    private boolean number__is_set = false;

    private com.sforce.soap.partner.GrammaticalNumber number;

    @Override
    public com.sforce.soap.partner.GrammaticalNumber getNumber() {
      return number;
    }

    @Override
    public void setNumber(com.sforce.soap.partner.GrammaticalNumber number) {
      this.number = number;
      number__is_set = true;
    }

    protected void setNumber(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, number__typeInfo)) {
        setNumber((com.sforce.soap.partner.GrammaticalNumber)__typeMapper.readObject(__in, number__typeInfo, com.sforce.soap.partner.GrammaticalNumber.class));
      }
    }

    /**
     * element : possessive of type {urn:partner.soap.sforce.com}Possessive
     * java type: com.sforce.soap.partner.Possessive
     */
    private static final com.sforce.ws.bind.TypeInfo possessive__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","possessive","urn:partner.soap.sforce.com","Possessive",1,1,true);

    private boolean possessive__is_set = false;

    private com.sforce.soap.partner.Possessive possessive;

    @Override
    public com.sforce.soap.partner.Possessive getPossessive() {
      return possessive;
    }

    @Override
    public void setPossessive(com.sforce.soap.partner.Possessive possessive) {
      this.possessive = possessive;
      possessive__is_set = true;
    }

    protected void setPossessive(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, possessive__typeInfo)) {
        setPossessive((com.sforce.soap.partner.Possessive)__typeMapper.readObject(__in, possessive__typeInfo, com.sforce.soap.partner.Possessive.class));
      }
    }

    /**
     * element : value of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo value__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","value","http://www.w3.org/2001/XMLSchema","string",1,1,true);

    private boolean value__is_set = false;

    private java.lang.String value;

    @Override
    public java.lang.String getValue() {
      return value;
    }

    @Override
    public void setValue(java.lang.String value) {
      this.value = value;
      value__is_set = true;
    }

    protected void setValue(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, value__typeInfo)) {
        setValue(__typeMapper.readString(__in, value__typeInfo, java.lang.String.class));
      }
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       __typeMapper.writeObject(__out, article__typeInfo, article, article__is_set);
       __typeMapper.writeObject(__out, caseType__typeInfo, caseType, caseType__is_set);
       __typeMapper.writeObject(__out, number__typeInfo, number, number__is_set);
       __typeMapper.writeObject(__out, possessive__typeInfo, possessive, possessive__is_set);
       __typeMapper.writeString(__out, value__typeInfo, value, value__is_set);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        setArticle(__in, __typeMapper);
        setCaseType(__in, __typeMapper);
        setNumber(__in, __typeMapper);
        setPossessive(__in, __typeMapper);
        setValue(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[NameCaseValue ");
      sb.append(" article='").append(com.sforce.ws.util.Verbose.toString(article)).append("'\n");
      sb.append(" caseType='").append(com.sforce.ws.util.Verbose.toString(caseType)).append("'\n");
      sb.append(" number='").append(com.sforce.ws.util.Verbose.toString(number)).append("'\n");
      sb.append(" possessive='").append(com.sforce.ws.util.Verbose.toString(possessive)).append("'\n");
      sb.append(" value='").append(com.sforce.ws.util.Verbose.toString(value)).append("'\n");
      sb.append("]\n");
      return sb.toString();
    }

}
