package com.sforce.soap.partner;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class DescribeQuickActionListItemResult implements com.sforce.ws.bind.XMLizable , IDescribeQuickActionListItemResult{

    /**
     * Constructor
     */
    public DescribeQuickActionListItemResult() {}

    /**
     * element : accessLevelRequired of type {urn:partner.soap.sforce.com}ShareAccessLevel
     * java type: com.sforce.soap.partner.ShareAccessLevel
     */
    private static final com.sforce.ws.bind.TypeInfo accessLevelRequired__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","accessLevelRequired","urn:partner.soap.sforce.com","ShareAccessLevel",1,1,true);

    private boolean accessLevelRequired__is_set = false;

    private com.sforce.soap.partner.ShareAccessLevel accessLevelRequired;

    @Override
    public com.sforce.soap.partner.ShareAccessLevel getAccessLevelRequired() {
      return accessLevelRequired;
    }

    @Override
    public void setAccessLevelRequired(com.sforce.soap.partner.ShareAccessLevel accessLevelRequired) {
      this.accessLevelRequired = accessLevelRequired;
      accessLevelRequired__is_set = true;
    }

    protected void setAccessLevelRequired(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, accessLevelRequired__typeInfo)) {
        setAccessLevelRequired((com.sforce.soap.partner.ShareAccessLevel)__typeMapper.readObject(__in, accessLevelRequired__typeInfo, com.sforce.soap.partner.ShareAccessLevel.class));
      }
    }

    /**
     * element : colors of type {urn:partner.soap.sforce.com}DescribeColor
     * java type: com.sforce.soap.partner.DescribeColor[]
     */
    private static final com.sforce.ws.bind.TypeInfo colors__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","colors","urn:partner.soap.sforce.com","DescribeColor",0,-1,true);

    private boolean colors__is_set = false;

    private com.sforce.soap.partner.DescribeColor[] colors = new com.sforce.soap.partner.DescribeColor[0];

    @Override
    public com.sforce.soap.partner.DescribeColor[] getColors() {
      return colors;
    }

    @Override
    public void setColors(com.sforce.soap.partner.IDescribeColor[] colors) {
      this.colors = castArray(com.sforce.soap.partner.DescribeColor.class, colors);
      colors__is_set = true;
    }

    protected void setColors(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, colors__typeInfo)) {
        setColors((com.sforce.soap.partner.DescribeColor[])__typeMapper.readObject(__in, colors__typeInfo, com.sforce.soap.partner.DescribeColor[].class));
      }
    }

    /**
     * element : iconUrl of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo iconUrl__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","iconUrl","http://www.w3.org/2001/XMLSchema","string",1,1,true);

    private boolean iconUrl__is_set = false;

    private java.lang.String iconUrl;

    @Override
    public java.lang.String getIconUrl() {
      return iconUrl;
    }

    @Override
    public void setIconUrl(java.lang.String iconUrl) {
      this.iconUrl = iconUrl;
      iconUrl__is_set = true;
    }

    protected void setIconUrl(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, iconUrl__typeInfo)) {
        setIconUrl(__typeMapper.readString(__in, iconUrl__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : icons of type {urn:partner.soap.sforce.com}DescribeIcon
     * java type: com.sforce.soap.partner.DescribeIcon[]
     */
    private static final com.sforce.ws.bind.TypeInfo icons__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","icons","urn:partner.soap.sforce.com","DescribeIcon",0,-1,true);

    private boolean icons__is_set = false;

    private com.sforce.soap.partner.DescribeIcon[] icons = new com.sforce.soap.partner.DescribeIcon[0];

    @Override
    public com.sforce.soap.partner.DescribeIcon[] getIcons() {
      return icons;
    }

    @Override
    public void setIcons(com.sforce.soap.partner.IDescribeIcon[] icons) {
      this.icons = castArray(com.sforce.soap.partner.DescribeIcon.class, icons);
      icons__is_set = true;
    }

    protected void setIcons(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, icons__typeInfo)) {
        setIcons((com.sforce.soap.partner.DescribeIcon[])__typeMapper.readObject(__in, icons__typeInfo, com.sforce.soap.partner.DescribeIcon[].class));
      }
    }

    /**
     * element : label of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo label__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","label","http://www.w3.org/2001/XMLSchema","string",1,1,true);

    private boolean label__is_set = false;

    private java.lang.String label;

    @Override
    public java.lang.String getLabel() {
      return label;
    }

    @Override
    public void setLabel(java.lang.String label) {
      this.label = label;
      label__is_set = true;
    }

    protected void setLabel(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, label__typeInfo)) {
        setLabel(__typeMapper.readString(__in, label__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : miniIconUrl of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo miniIconUrl__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","miniIconUrl","http://www.w3.org/2001/XMLSchema","string",1,1,true);

    private boolean miniIconUrl__is_set = false;

    private java.lang.String miniIconUrl;

    @Override
    public java.lang.String getMiniIconUrl() {
      return miniIconUrl;
    }

    @Override
    public void setMiniIconUrl(java.lang.String miniIconUrl) {
      this.miniIconUrl = miniIconUrl;
      miniIconUrl__is_set = true;
    }

    protected void setMiniIconUrl(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, miniIconUrl__typeInfo)) {
        setMiniIconUrl(__typeMapper.readString(__in, miniIconUrl__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : quickActionName of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo quickActionName__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","quickActionName","http://www.w3.org/2001/XMLSchema","string",1,1,true);

    private boolean quickActionName__is_set = false;

    private java.lang.String quickActionName;

    @Override
    public java.lang.String getQuickActionName() {
      return quickActionName;
    }

    @Override
    public void setQuickActionName(java.lang.String quickActionName) {
      this.quickActionName = quickActionName;
      quickActionName__is_set = true;
    }

    protected void setQuickActionName(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, quickActionName__typeInfo)) {
        setQuickActionName(__typeMapper.readString(__in, quickActionName__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : targetSobjectType of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo targetSobjectType__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","targetSobjectType","http://www.w3.org/2001/XMLSchema","string",1,1,true);

    private boolean targetSobjectType__is_set = false;

    private java.lang.String targetSobjectType;

    @Override
    public java.lang.String getTargetSobjectType() {
      return targetSobjectType;
    }

    @Override
    public void setTargetSobjectType(java.lang.String targetSobjectType) {
      this.targetSobjectType = targetSobjectType;
      targetSobjectType__is_set = true;
    }

    protected void setTargetSobjectType(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, targetSobjectType__typeInfo)) {
        setTargetSobjectType(__typeMapper.readString(__in, targetSobjectType__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : type of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo type__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","type","http://www.w3.org/2001/XMLSchema","string",1,1,true);

    private boolean type__is_set = false;

    private java.lang.String type;

    @Override
    public java.lang.String getType() {
      return type;
    }

    @Override
    public void setType(java.lang.String type) {
      this.type = type;
      type__is_set = true;
    }

    protected void setType(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, type__typeInfo)) {
        setType(__typeMapper.readString(__in, type__typeInfo, java.lang.String.class));
      }
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       __typeMapper.writeObject(__out, accessLevelRequired__typeInfo, accessLevelRequired, accessLevelRequired__is_set);
       __typeMapper.writeObject(__out, colors__typeInfo, colors, colors__is_set);
       __typeMapper.writeString(__out, iconUrl__typeInfo, iconUrl, iconUrl__is_set);
       __typeMapper.writeObject(__out, icons__typeInfo, icons, icons__is_set);
       __typeMapper.writeString(__out, label__typeInfo, label, label__is_set);
       __typeMapper.writeString(__out, miniIconUrl__typeInfo, miniIconUrl, miniIconUrl__is_set);
       __typeMapper.writeString(__out, quickActionName__typeInfo, quickActionName, quickActionName__is_set);
       __typeMapper.writeString(__out, targetSobjectType__typeInfo, targetSobjectType, targetSobjectType__is_set);
       __typeMapper.writeString(__out, type__typeInfo, type, type__is_set);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        setAccessLevelRequired(__in, __typeMapper);
        setColors(__in, __typeMapper);
        setIconUrl(__in, __typeMapper);
        setIcons(__in, __typeMapper);
        setLabel(__in, __typeMapper);
        setMiniIconUrl(__in, __typeMapper);
        setQuickActionName(__in, __typeMapper);
        setTargetSobjectType(__in, __typeMapper);
        setType(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[DescribeQuickActionListItemResult ");
      sb.append(" accessLevelRequired='").append(com.sforce.ws.util.Verbose.toString(accessLevelRequired)).append("'\n");
      sb.append(" colors='").append(com.sforce.ws.util.Verbose.toString(colors)).append("'\n");
      sb.append(" iconUrl='").append(com.sforce.ws.util.Verbose.toString(iconUrl)).append("'\n");
      sb.append(" icons='").append(com.sforce.ws.util.Verbose.toString(icons)).append("'\n");
      sb.append(" label='").append(com.sforce.ws.util.Verbose.toString(label)).append("'\n");
      sb.append(" miniIconUrl='").append(com.sforce.ws.util.Verbose.toString(miniIconUrl)).append("'\n");
      sb.append(" quickActionName='").append(com.sforce.ws.util.Verbose.toString(quickActionName)).append("'\n");
      sb.append(" targetSobjectType='").append(com.sforce.ws.util.Verbose.toString(targetSobjectType)).append("'\n");
      sb.append(" type='").append(com.sforce.ws.util.Verbose.toString(type)).append("'\n");
      sb.append("]\n");
      return sb.toString();
    }

    @SuppressWarnings("unchecked")
    private <T,U> T[] castArray(Class<T> clazz, U[] array) {
        if (array == null) {
            return null;
        }
        T[] retVal = (T[]) java.lang.reflect.Array.newInstance(clazz, array.length);
        for (int i=0; i < array.length; i++) {
            retVal[i] = (T)array[i];
        }

        return retVal;
	}
}
