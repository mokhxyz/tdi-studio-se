package com.sforce.soap.partner;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class FilteredLookupInfo implements com.sforce.ws.bind.XMLizable , IFilteredLookupInfo{

    /**
     * Constructor
     */
    public FilteredLookupInfo() {}

    /**
     * element : controllingFields of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String[]
     */
    private static final com.sforce.ws.bind.TypeInfo controllingFields__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","controllingFields","http://www.w3.org/2001/XMLSchema","string",0,-1,true);

    private boolean controllingFields__is_set = false;

    private java.lang.String[] controllingFields = new java.lang.String[0];

    @Override
    public java.lang.String[] getControllingFields() {
      return controllingFields;
    }

    @Override
    public void setControllingFields(java.lang.String[] controllingFields) {
      this.controllingFields = castArray(java.lang.String.class, controllingFields);
      controllingFields__is_set = true;
    }

    protected void setControllingFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, controllingFields__typeInfo)) {
        setControllingFields((java.lang.String[])__typeMapper.readObject(__in, controllingFields__typeInfo, java.lang.String[].class));
      }
    }

    /**
     * element : dependent of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo dependent__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","dependent","http://www.w3.org/2001/XMLSchema","boolean",1,1,true);

    private boolean dependent__is_set = false;

    private boolean dependent;

    @Override
    public boolean getDependent() {
      return dependent;
    }

    @Override
    public boolean isDependent() {
      return dependent;
    }

    @Override
    public void setDependent(boolean dependent) {
      this.dependent = dependent;
      dependent__is_set = true;
    }

    protected void setDependent(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, dependent__typeInfo)) {
        setDependent(__typeMapper.readBoolean(__in, dependent__typeInfo, boolean.class));
      }
    }

    /**
     * element : optionalFilter of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo optionalFilter__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","optionalFilter","http://www.w3.org/2001/XMLSchema","boolean",1,1,true);

    private boolean optionalFilter__is_set = false;

    private boolean optionalFilter;

    @Override
    public boolean getOptionalFilter() {
      return optionalFilter;
    }

    @Override
    public boolean isOptionalFilter() {
      return optionalFilter;
    }

    @Override
    public void setOptionalFilter(boolean optionalFilter) {
      this.optionalFilter = optionalFilter;
      optionalFilter__is_set = true;
    }

    protected void setOptionalFilter(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, optionalFilter__typeInfo)) {
        setOptionalFilter(__typeMapper.readBoolean(__in, optionalFilter__typeInfo, boolean.class));
      }
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       __typeMapper.writeObject(__out, controllingFields__typeInfo, controllingFields, controllingFields__is_set);
       __typeMapper.writeBoolean(__out, dependent__typeInfo, dependent, dependent__is_set);
       __typeMapper.writeBoolean(__out, optionalFilter__typeInfo, optionalFilter, optionalFilter__is_set);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        setControllingFields(__in, __typeMapper);
        setDependent(__in, __typeMapper);
        setOptionalFilter(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[FilteredLookupInfo ");
      sb.append(" controllingFields='").append(com.sforce.ws.util.Verbose.toString(controllingFields)).append("'\n");
      sb.append(" dependent='").append(com.sforce.ws.util.Verbose.toString(dependent)).append("'\n");
      sb.append(" optionalFilter='").append(com.sforce.ws.util.Verbose.toString(optionalFilter)).append("'\n");
      sb.append("]\n");
      return sb.toString();
    }

    @SuppressWarnings("unchecked")
    private <T,U> T[] castArray(Class<T> clazz, U[] array) {
        if (array == null) {
            return null;
        }
        T[] retVal = (T[]) java.lang.reflect.Array.newInstance(clazz, array.length);
        for (int i=0; i < array.length; i++) {
            retVal[i] = (T)array[i];
        }

        return retVal;
	}
}
