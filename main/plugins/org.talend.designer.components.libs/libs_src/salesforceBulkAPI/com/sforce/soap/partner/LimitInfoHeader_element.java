package com.sforce.soap.partner;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class LimitInfoHeader_element extends com.sforce.ws.bind.SoapHeaderObject implements com.sforce.ws.bind.XMLizable , ILimitInfoHeader_element{

    /**
     * Constructor
     */
    public LimitInfoHeader_element() {}

    /**
     * element : limitInfo of type {urn:partner.soap.sforce.com}LimitInfo
     * java type: com.sforce.soap.partner.LimitInfo[]
     */
    private static final com.sforce.ws.bind.TypeInfo limitInfo__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","limitInfo","urn:partner.soap.sforce.com","LimitInfo",0,-1,true);

    private boolean limitInfo__is_set = false;

    private com.sforce.soap.partner.LimitInfo[] limitInfo = new com.sforce.soap.partner.LimitInfo[0];

    @Override
    public com.sforce.soap.partner.LimitInfo[] getLimitInfo() {
      return limitInfo;
    }

    @Override
    public void setLimitInfo(com.sforce.soap.partner.ILimitInfo[] limitInfo) {
      this.limitInfo = castArray(com.sforce.soap.partner.LimitInfo.class, limitInfo);
      limitInfo__is_set = true;
    }

    protected void setLimitInfo(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, limitInfo__typeInfo)) {
        setLimitInfo((com.sforce.soap.partner.LimitInfo[])__typeMapper.readObject(__in, limitInfo__typeInfo, com.sforce.soap.partner.LimitInfo[].class));
      }
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       super.writeFields(__out, __typeMapper);
       __typeMapper.writeObject(__out, limitInfo__typeInfo, limitInfo, limitInfo__is_set);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        super.loadFields(__in, __typeMapper);
        setLimitInfo(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[LimitInfoHeader_element ");
      sb.append(super.toString());sb.append(" limitInfo='").append(com.sforce.ws.util.Verbose.toString(limitInfo)).append("'\n");
      sb.append("]\n");
      return sb.toString();
    }

    @SuppressWarnings("unchecked")
    private <T,U> T[] castArray(Class<T> clazz, U[] array) {
        if (array == null) {
            return null;
        }
        T[] retVal = (T[]) java.lang.reflect.Array.newInstance(clazz, array.length);
        for (int i=0; i < array.length; i++) {
            retVal[i] = (T)array[i];
        }

        return retVal;
	}
}
