/**
 * SforceServiceStub.java
 *
 * This file was auto-generated from WSDL by the Apache Axis2 version: 1.6.2 Built on : Apr 17, 2012 (05:33:49 IST)
 */
package com.salesforce.soap.partner;

/*
 * SforceServiceStub java implementation
 */

public class SforceServiceStub extends org.apache.axis2.client.Stub implements SforceService {
    protected org.apache.axis2.description.AxisOperation[] _operations;

    // hashmaps to keep the fault mapping
    private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
    private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
    private java.util.HashMap faultMessageMap = new java.util.HashMap();

    private static int counter = 0;

    private static synchronized java.lang.String getUniqueSuffix() {
        // reset the counter if it is greater than 99999
        if (counter > 99999) {
            counter = 0;
        }
        counter = counter + 1;
        return java.lang.Long.toString(java.lang.System.currentTimeMillis()) + "_" + counter;
    }

    private void populateAxisService() throws org.apache.axis2.AxisFault {

        // creating the Service with a unique name
        _service = new org.apache.axis2.description.AxisService("SforceService" + getUniqueSuffix());
        addAnonymousOperations();

        // creating the operations
        org.apache.axis2.description.AxisOperation __operation;

        _operations = new org.apache.axis2.description.AxisOperation[52];

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge"));
        _service.addOperation(__operation);

        _operations[0] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getUserInfo"));
        _service.addOperation(__operation);

        _operations[1] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAllTabs"));
        _service.addOperation(__operation);

        _operations[2] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeQuickActions"));
        _service.addOperation(__operation);

        _operations[3] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSoftphoneLayout"));
        _service.addOperation(__operation);

        _operations[4] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describePrimaryCompactLayouts"));
        _service.addOperation(__operation);

        _operations[5] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "executeListView"));
        _service.addOperation(__operation);

        _operations[6] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update"));
        _service.addOperation(__operation);

        _operations[7] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions"));
        _service.addOperation(__operation);

        _operations[8] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "setPassword"));
        _service.addOperation(__operation);

        _operations[9] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "logout"));
        _service.addOperation(__operation);

        _operations[10] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "retrieve"));
        _service.addOperation(__operation);

        _operations[11] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "queryAll"));
        _service.addOperation(__operation);

        _operations[12] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "undelete"));
        _service.addOperation(__operation);

        _operations[13] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getUpdated"));
        _service.addOperation(__operation);

        _operations[14] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create"));
        _service.addOperation(__operation);

        _operations[15] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAvailableQuickActions"));
        _service.addOperation(__operation);

        _operations[16] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "sendEmail"));
        _service.addOperation(__operation);

        _operations[17] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "search"));
        _service.addOperation(__operation);

        _operations[18] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeNouns"));
        _service.addOperation(__operation);

        _operations[19] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "query"));
        _service.addOperation(__operation);

        _operations[20] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeTheme"));
        _service.addOperation(__operation);

        _operations[21] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObjectListViews"));
        _service.addOperation(__operation);

        _operations[22] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getDeleted"));
        _service.addOperation(__operation);

        _operations[23] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeFlexiPages"));
        _service.addOperation(__operation);

        _operations[24] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSearchScopeOrder"));
        _service.addOperation(__operation);

        _operations[25] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSoqlListViews"));
        _service.addOperation(__operation);

        _operations[26] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSearchLayouts"));
        _service.addOperation(__operation);

        _operations[27] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "process"));
        _service.addOperation(__operation);

        _operations[28] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeDataCategoryGroupStructures"));
        _service.addOperation(__operation);

        _operations[29] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "resetPassword"));
        _service.addOperation(__operation);

        _operations[30] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeGlobal"));
        _service.addOperation(__operation);

        _operations[31] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAppMenu"));
        _service.addOperation(__operation);

        _operations[32] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeCompactLayouts"));
        _service.addOperation(__operation);

        _operations[33] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeApprovalLayout"));
        _service.addOperation(__operation);

        _operations[34] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "sendEmailMessage"));
        _service.addOperation(__operation);

        _operations[35] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeLayout"));
        _service.addOperation(__operation);

        _operations[36] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeTabs"));
        _service.addOperation(__operation);

        _operations[37] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeKnowledgeSettings"));
        _service.addOperation(__operation);

        _operations[38] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeDataCategoryGroups"));
        _service.addOperation(__operation);

        _operations[39] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getServerTimestamp"));
        _service.addOperation(__operation);

        _operations[40] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "invalidateSessions"));
        _service.addOperation(__operation);

        _operations[41] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObject"));
        _service.addOperation(__operation);

        _operations[42] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "login"));
        _service.addOperation(__operation);

        _operations[43] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "retrieveQuickActionTemplates"));
        _service.addOperation(__operation);

        _operations[44] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "queryMore"));
        _service.addOperation(__operation);

        _operations[45] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObjects"));
        _service.addOperation(__operation);

        _operations[46] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "emptyRecycleBin"));
        _service.addOperation(__operation);

        _operations[47] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert"));
        _service.addOperation(__operation);

        _operations[48] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "convertLead"));
        _service.addOperation(__operation);

        _operations[49] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete"));
        _service.addOperation(__operation);

        _operations[50] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeGlobalTheme"));
        _service.addOperation(__operation);

        _operations[51] = __operation;

    }

    // populates the faults
    private void populateFaults() {

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "merge"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "merge"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "merge"),
                "com.salesforce.soap.partner.fault.InvalidSObjectFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "merge"), "com.salesforce.soap.partner.InvalidIdFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "merge"), "com.salesforce.soap.partner.InvalidIdFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "merge"),
                "com.salesforce.soap.partner.fault.InvalidIdFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "merge"),
                "com.salesforce.soap.partner.InvalidFieldFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "merge"),
                "com.salesforce.soap.partner.InvalidFieldFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "merge"),
                "com.salesforce.soap.partner.fault.InvalidFieldFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "merge"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "merge"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "merge"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "getUserInfo"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "getUserInfo"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "getUserInfo"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeAllTabs"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeAllTabs"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeAllTabs"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeSoftphoneLayout"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeSoftphoneLayout"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeSoftphoneLayout"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "update"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "update"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "update"),
                "com.salesforce.soap.partner.fault.InvalidSObjectFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "update"), "com.salesforce.soap.partner.InvalidIdFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "update"), "com.salesforce.soap.partner.InvalidIdFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "update"),
                "com.salesforce.soap.partner.fault.InvalidIdFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "update"),
                "com.salesforce.soap.partner.InvalidFieldFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "update"),
                "com.salesforce.soap.partner.InvalidFieldFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "update"),
                "com.salesforce.soap.partner.fault.InvalidFieldFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "update"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "update"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "update"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "setPassword"),
                "com.salesforce.soap.partner.InvalidIdFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "setPassword"),
                "com.salesforce.soap.partner.InvalidIdFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "setPassword"),
                "com.salesforce.soap.partner.fault.InvalidIdFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "setPassword"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "setPassword"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "setPassword"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidNewPasswordFault"), "setPassword"),
                "com.salesforce.soap.partner.InvalidNewPasswordFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidNewPasswordFault"), "setPassword"),
                "com.salesforce.soap.partner.InvalidNewPasswordFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidNewPasswordFault"), "setPassword"),
                "com.salesforce.soap.partner.fault.InvalidNewPasswordFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "logout"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "logout"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "logout"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "retrieve"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "retrieve"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "retrieve"),
                "com.salesforce.soap.partner.fault.InvalidSObjectFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "MalformedQueryFault"), "retrieve"),
                "com.salesforce.soap.partner.MalformedQueryFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "MalformedQueryFault"), "retrieve"),
                "com.salesforce.soap.partner.MalformedQueryFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "MalformedQueryFault"), "retrieve"),
                "com.salesforce.soap.partner.fault.MalformedQueryFaultE");

        faultExceptionNameMap
                .put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:fault.partner.soap.sforce.com",
                        "InvalidIdFault"), "retrieve"), "com.salesforce.soap.partner.InvalidIdFault");
        faultExceptionClassNameMap
                .put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:fault.partner.soap.sforce.com",
                        "InvalidIdFault"), "retrieve"), "com.salesforce.soap.partner.InvalidIdFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "retrieve"),
                "com.salesforce.soap.partner.fault.InvalidIdFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "retrieve"),
                "com.salesforce.soap.partner.InvalidFieldFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "retrieve"),
                "com.salesforce.soap.partner.InvalidFieldFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "retrieve"),
                "com.salesforce.soap.partner.fault.InvalidFieldFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "retrieve"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "retrieve"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "retrieve"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "queryAll"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "queryAll"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "queryAll"),
                "com.salesforce.soap.partner.fault.InvalidSObjectFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "MalformedQueryFault"), "queryAll"),
                "com.salesforce.soap.partner.MalformedQueryFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "MalformedQueryFault"), "queryAll"),
                "com.salesforce.soap.partner.MalformedQueryFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "MalformedQueryFault"), "queryAll"),
                "com.salesforce.soap.partner.fault.MalformedQueryFaultE");

        faultExceptionNameMap
                .put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:fault.partner.soap.sforce.com",
                        "InvalidIdFault"), "queryAll"), "com.salesforce.soap.partner.InvalidIdFault");
        faultExceptionClassNameMap
                .put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:fault.partner.soap.sforce.com",
                        "InvalidIdFault"), "queryAll"), "com.salesforce.soap.partner.InvalidIdFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "queryAll"),
                "com.salesforce.soap.partner.fault.InvalidIdFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "queryAll"),
                "com.salesforce.soap.partner.InvalidFieldFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "queryAll"),
                "com.salesforce.soap.partner.InvalidFieldFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "queryAll"),
                "com.salesforce.soap.partner.fault.InvalidFieldFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "queryAll"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "queryAll"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "queryAll"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidQueryLocatorFault"), "queryAll"),
                "com.salesforce.soap.partner.InvalidQueryLocatorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidQueryLocatorFault"), "queryAll"),
                "com.salesforce.soap.partner.InvalidQueryLocatorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidQueryLocatorFault"), "queryAll"),
                "com.salesforce.soap.partner.fault.InvalidQueryLocatorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "undelete"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "undelete"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "undelete"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "getUpdated"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "getUpdated"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "getUpdated"),
                "com.salesforce.soap.partner.fault.InvalidSObjectFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "getUpdated"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "getUpdated"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "getUpdated"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "create"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "create"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "create"),
                "com.salesforce.soap.partner.fault.InvalidSObjectFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "create"), "com.salesforce.soap.partner.InvalidIdFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "create"), "com.salesforce.soap.partner.InvalidIdFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "create"),
                "com.salesforce.soap.partner.fault.InvalidIdFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "create"),
                "com.salesforce.soap.partner.InvalidFieldFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "create"),
                "com.salesforce.soap.partner.InvalidFieldFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "create"),
                "com.salesforce.soap.partner.fault.InvalidFieldFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "create"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "create"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "create"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "sendEmail"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "sendEmail"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "sendEmail"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "search"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "search"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "search"),
                "com.salesforce.soap.partner.fault.InvalidSObjectFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "MalformedSearchFault"), "search"),
                "com.salesforce.soap.partner.MalformedSearchFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "MalformedSearchFault"), "search"),
                "com.salesforce.soap.partner.MalformedSearchFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "MalformedSearchFault"), "search"),
                "com.salesforce.soap.partner.fault.MalformedSearchFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "search"),
                "com.salesforce.soap.partner.InvalidFieldFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "search"),
                "com.salesforce.soap.partner.InvalidFieldFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "search"),
                "com.salesforce.soap.partner.fault.InvalidFieldFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "search"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "search"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "search"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "query"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "query"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "query"),
                "com.salesforce.soap.partner.fault.InvalidSObjectFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "MalformedQueryFault"), "query"),
                "com.salesforce.soap.partner.MalformedQueryFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "MalformedQueryFault"), "query"),
                "com.salesforce.soap.partner.MalformedQueryFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "MalformedQueryFault"), "query"),
                "com.salesforce.soap.partner.fault.MalformedQueryFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "query"), "com.salesforce.soap.partner.InvalidIdFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "query"), "com.salesforce.soap.partner.InvalidIdFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "query"),
                "com.salesforce.soap.partner.fault.InvalidIdFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "query"),
                "com.salesforce.soap.partner.InvalidFieldFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "query"),
                "com.salesforce.soap.partner.InvalidFieldFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "query"),
                "com.salesforce.soap.partner.fault.InvalidFieldFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "query"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "query"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "query"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidQueryLocatorFault"), "query"),
                "com.salesforce.soap.partner.InvalidQueryLocatorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidQueryLocatorFault"), "query"),
                "com.salesforce.soap.partner.InvalidQueryLocatorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidQueryLocatorFault"), "query"),
                "com.salesforce.soap.partner.fault.InvalidQueryLocatorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeTheme"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeTheme"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeTheme"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "describeSObjectListViews"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "describeSObjectListViews"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "describeSObjectListViews"),
                "com.salesforce.soap.partner.fault.InvalidSObjectFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeSObjectListViews"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeSObjectListViews"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeSObjectListViews"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "getDeleted"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "getDeleted"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "getDeleted"),
                "com.salesforce.soap.partner.fault.InvalidSObjectFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "getDeleted"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "getDeleted"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "getDeleted"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "describeFlexiPages"),
                "com.salesforce.soap.partner.InvalidIdFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "describeFlexiPages"),
                "com.salesforce.soap.partner.InvalidIdFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "describeFlexiPages"),
                "com.salesforce.soap.partner.fault.InvalidIdFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeFlexiPages"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeFlexiPages"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeFlexiPages"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "describeSoqlListViews"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "describeSoqlListViews"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "describeSoqlListViews"),
                "com.salesforce.soap.partner.fault.InvalidSObjectFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeSoqlListViews"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeSoqlListViews"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeSoqlListViews"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "describeSearchLayouts"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "describeSearchLayouts"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "describeSearchLayouts"),
                "com.salesforce.soap.partner.fault.InvalidSObjectFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeSearchLayouts"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeSearchLayouts"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeSearchLayouts"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "process"), "com.salesforce.soap.partner.InvalidIdFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "process"), "com.salesforce.soap.partner.InvalidIdFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "process"),
                "com.salesforce.soap.partner.fault.InvalidIdFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "process"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "process"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "process"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "describeDataCategoryGroupStructures"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "describeDataCategoryGroupStructures"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "describeDataCategoryGroupStructures"),
                "com.salesforce.soap.partner.fault.InvalidSObjectFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeDataCategoryGroupStructures"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeDataCategoryGroupStructures"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeDataCategoryGroupStructures"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "resetPassword"),
                "com.salesforce.soap.partner.InvalidIdFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "resetPassword"),
                "com.salesforce.soap.partner.InvalidIdFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "resetPassword"),
                "com.salesforce.soap.partner.fault.InvalidIdFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "resetPassword"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "resetPassword"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "resetPassword"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeGlobal"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeGlobal"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeGlobal"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeAppMenu"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeAppMenu"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeAppMenu"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "sendEmailMessage"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "sendEmailMessage"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "sendEmailMessage"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "describeLayout"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "describeLayout"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "describeLayout"),
                "com.salesforce.soap.partner.fault.InvalidSObjectFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "describeLayout"),
                "com.salesforce.soap.partner.InvalidIdFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "describeLayout"),
                "com.salesforce.soap.partner.InvalidIdFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "describeLayout"),
                "com.salesforce.soap.partner.fault.InvalidIdFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeLayout"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeLayout"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeLayout"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeTabs"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeTabs"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeTabs"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeKnowledgeSettings"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeKnowledgeSettings"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeKnowledgeSettings"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "describeDataCategoryGroups"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "describeDataCategoryGroups"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "describeDataCategoryGroups"),
                "com.salesforce.soap.partner.fault.InvalidSObjectFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeDataCategoryGroups"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeDataCategoryGroups"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeDataCategoryGroups"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "getServerTimestamp"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "getServerTimestamp"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "getServerTimestamp"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "invalidateSessions"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "invalidateSessions"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "invalidateSessions"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "describeSObject"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "describeSObject"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "describeSObject"),
                "com.salesforce.soap.partner.fault.InvalidSObjectFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeSObject"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeSObject"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeSObject"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "login"), "com.salesforce.soap.partner.InvalidIdFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "login"), "com.salesforce.soap.partner.InvalidIdFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "login"),
                "com.salesforce.soap.partner.fault.InvalidIdFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "login"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "login"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "login"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "LoginFault"), "login"), "com.salesforce.soap.partner.LoginFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "LoginFault"), "login"), "com.salesforce.soap.partner.LoginFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "LoginFault"), "login"), "com.salesforce.soap.partner.fault.LoginFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "MalformedQueryFault"), "queryMore"),
                "com.salesforce.soap.partner.MalformedQueryFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "MalformedQueryFault"), "queryMore"),
                "com.salesforce.soap.partner.MalformedQueryFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "MalformedQueryFault"), "queryMore"),
                "com.salesforce.soap.partner.fault.MalformedQueryFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "queryMore"),
                "com.salesforce.soap.partner.InvalidFieldFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "queryMore"),
                "com.salesforce.soap.partner.InvalidFieldFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "queryMore"),
                "com.salesforce.soap.partner.fault.InvalidFieldFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "queryMore"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "queryMore"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "queryMore"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidQueryLocatorFault"), "queryMore"),
                "com.salesforce.soap.partner.InvalidQueryLocatorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidQueryLocatorFault"), "queryMore"),
                "com.salesforce.soap.partner.InvalidQueryLocatorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidQueryLocatorFault"), "queryMore"),
                "com.salesforce.soap.partner.fault.InvalidQueryLocatorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "describeSObjects"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "describeSObjects"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "describeSObjects"),
                "com.salesforce.soap.partner.fault.InvalidSObjectFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeSObjects"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeSObjects"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeSObjects"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "emptyRecycleBin"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "emptyRecycleBin"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "emptyRecycleBin"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "upsert"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "upsert"),
                "com.salesforce.soap.partner.InvalidSObjectFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidSObjectFault"), "upsert"),
                "com.salesforce.soap.partner.fault.InvalidSObjectFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "upsert"), "com.salesforce.soap.partner.InvalidIdFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "upsert"), "com.salesforce.soap.partner.InvalidIdFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidIdFault"), "upsert"),
                "com.salesforce.soap.partner.fault.InvalidIdFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "upsert"),
                "com.salesforce.soap.partner.InvalidFieldFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "upsert"),
                "com.salesforce.soap.partner.InvalidFieldFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "InvalidFieldFault"), "upsert"),
                "com.salesforce.soap.partner.fault.InvalidFieldFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "upsert"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "upsert"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "upsert"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "convertLead"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "convertLead"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "convertLead"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "delete"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "delete"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "delete"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeGlobalTheme"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeGlobalTheme"),
                "com.salesforce.soap.partner.UnexpectedErrorFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
                "urn:fault.partner.soap.sforce.com", "UnexpectedErrorFault"), "describeGlobalTheme"),
                "com.salesforce.soap.partner.fault.UnexpectedErrorFaultE");

    }

    /**
     * Constructor that takes in a configContext
     */

    public SforceServiceStub(org.apache.axis2.context.ConfigurationContext configurationContext, java.lang.String targetEndpoint)
            throws org.apache.axis2.AxisFault {
        this(configurationContext, targetEndpoint, false);
    }

    /**
     * Constructor that takes in a configContext and useseperate listner
     */
    public SforceServiceStub(org.apache.axis2.context.ConfigurationContext configurationContext, java.lang.String targetEndpoint,
            boolean useSeparateListener) throws org.apache.axis2.AxisFault {
        // To populate AxisService
        populateAxisService();
        populateFaults();

        _serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext, _service);

        _serviceClient.getOptions().setTo(new org.apache.axis2.addressing.EndpointReference(targetEndpoint));
        _serviceClient.getOptions().setUseSeparateListener(useSeparateListener);

    }

    /**
     * Default Constructor
     */
    public SforceServiceStub(org.apache.axis2.context.ConfigurationContext configurationContext)
            throws org.apache.axis2.AxisFault {

        this(configurationContext, "https://login.salesforce.com/services/Soap/u/34.0");

    }

    /**
     * Default Constructor
     */
    public SforceServiceStub() throws org.apache.axis2.AxisFault {

        this("https://login.salesforce.com/services/Soap/u/34.0");

    }

    /**
     * Constructor taking the target endpoint
     */
    public SforceServiceStub(java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
        this(null, targetEndpoint);
    }

    /**
     * Auto generated method signature Merge and update a set of sObjects based on object id
     * 
     * @see com.salesforce.soap.partner.SforceService#merge
     * @param merge563
     * 
     * @param sessionHeader564
     * 
     * @param callOptions565
     * 
     * @param assignmentRuleHeader566
     * 
     * @param mruHeader567
     * 
     * @param allowFieldTruncationHeader568
     * 
     * @param disableFeedTrackingHeader569
     * 
     * @param streamingEnabledHeader570
     * 
     * @param duplicateRuleHeader571
     * 
     * @param localeOptions572
     * 
     * @param debuggingHeader573
     * 
     * @param packageVersionHeader574
     * 
     * @param emailHeader575
     * 
     * @throws com.salesforce.soap.partner.InvalidSObjectFault :
     * @throws com.salesforce.soap.partner.InvalidIdFault :
     * @throws com.salesforce.soap.partner.InvalidFieldFault :
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.MergeResponse merge(

    com.salesforce.soap.partner.Merge merge563, com.salesforce.soap.partner.SessionHeader sessionHeader564,
            com.salesforce.soap.partner.CallOptions callOptions565,
            com.salesforce.soap.partner.AssignmentRuleHeader assignmentRuleHeader566,
            com.salesforce.soap.partner.MruHeader mruHeader567,
            com.salesforce.soap.partner.AllowFieldTruncationHeader allowFieldTruncationHeader568,
            com.salesforce.soap.partner.DisableFeedTrackingHeader disableFeedTrackingHeader569,
            com.salesforce.soap.partner.StreamingEnabledHeader streamingEnabledHeader570,
            com.salesforce.soap.partner.DuplicateRuleHeader duplicateRuleHeader571,
            com.salesforce.soap.partner.LocaleOptions localeOptions572,
            com.salesforce.soap.partner.DebuggingHeader debuggingHeader573,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader574,
            com.salesforce.soap.partner.EmailHeader emailHeader575)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.InvalidSObjectFault, com.salesforce.soap.partner.InvalidIdFault,
            com.salesforce.soap.partner.InvalidFieldFault, com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:mergeRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), merge563,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader564 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader564 = toOM(sessionHeader564,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")));
                addHeader(omElementsessionHeader564, env);

            }

            // add the children only if the parameter is not null
            if (callOptions565 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions565 = toOM(callOptions565,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")));
                addHeader(omElementcallOptions565, env);

            }

            // add the children only if the parameter is not null
            if (assignmentRuleHeader566 != null) {

                org.apache.axiom.om.OMElement omElementassignmentRuleHeader566 = toOM(assignmentRuleHeader566,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")));
                addHeader(omElementassignmentRuleHeader566, env);

            }

            // add the children only if the parameter is not null
            if (mruHeader567 != null) {

                org.apache.axiom.om.OMElement omElementmruHeader567 = toOM(mruHeader567,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")));
                addHeader(omElementmruHeader567, env);

            }

            // add the children only if the parameter is not null
            if (allowFieldTruncationHeader568 != null) {

                org.apache.axiom.om.OMElement omElementallowFieldTruncationHeader568 = toOM(allowFieldTruncationHeader568,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")));
                addHeader(omElementallowFieldTruncationHeader568, env);

            }

            // add the children only if the parameter is not null
            if (disableFeedTrackingHeader569 != null) {

                org.apache.axiom.om.OMElement omElementdisableFeedTrackingHeader569 = toOM(disableFeedTrackingHeader569,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")));
                addHeader(omElementdisableFeedTrackingHeader569, env);

            }

            // add the children only if the parameter is not null
            if (streamingEnabledHeader570 != null) {

                org.apache.axiom.om.OMElement omElementstreamingEnabledHeader570 = toOM(streamingEnabledHeader570,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")));
                addHeader(omElementstreamingEnabledHeader570, env);

            }

            // add the children only if the parameter is not null
            if (duplicateRuleHeader571 != null) {

                org.apache.axiom.om.OMElement omElementduplicateRuleHeader571 = toOM(duplicateRuleHeader571,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")));
                addHeader(omElementduplicateRuleHeader571, env);

            }

            // add the children only if the parameter is not null
            if (localeOptions572 != null) {

                org.apache.axiom.om.OMElement omElementlocaleOptions572 = toOM(localeOptions572,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")));
                addHeader(omElementlocaleOptions572, env);

            }

            // add the children only if the parameter is not null
            if (debuggingHeader573 != null) {

                org.apache.axiom.om.OMElement omElementdebuggingHeader573 = toOM(debuggingHeader573,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")));
                addHeader(omElementdebuggingHeader573, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader574 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader574 = toOM(packageVersionHeader574,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")));
                addHeader(omElementpackageVersionHeader574, env);

            }

            // add the children only if the parameter is not null
            if (emailHeader575 != null) {

                org.apache.axiom.om.OMElement omElementemailHeader575 = toOM(emailHeader575,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")));
                addHeader(omElementemailHeader575, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.MergeResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.MergeResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "merge"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "merge"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "merge"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                            throw (com.salesforce.soap.partner.InvalidSObjectFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                            throw (com.salesforce.soap.partner.InvalidIdFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.InvalidFieldFault) {
                            throw (com.salesforce.soap.partner.InvalidFieldFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Merge and update a set of sObjects based on object id
     * 
     * @see com.salesforce.soap.partner.SforceService#startmerge
     * @param merge563
     * 
     * @param sessionHeader564
     * 
     * @param callOptions565
     * 
     * @param assignmentRuleHeader566
     * 
     * @param mruHeader567
     * 
     * @param allowFieldTruncationHeader568
     * 
     * @param disableFeedTrackingHeader569
     * 
     * @param streamingEnabledHeader570
     * 
     * @param duplicateRuleHeader571
     * 
     * @param localeOptions572
     * 
     * @param debuggingHeader573
     * 
     * @param packageVersionHeader574
     * 
     * @param emailHeader575
     */
    public void startmerge(

    com.salesforce.soap.partner.Merge merge563, com.salesforce.soap.partner.SessionHeader sessionHeader564,
            com.salesforce.soap.partner.CallOptions callOptions565,
            com.salesforce.soap.partner.AssignmentRuleHeader assignmentRuleHeader566,
            com.salesforce.soap.partner.MruHeader mruHeader567,
            com.salesforce.soap.partner.AllowFieldTruncationHeader allowFieldTruncationHeader568,
            com.salesforce.soap.partner.DisableFeedTrackingHeader disableFeedTrackingHeader569,
            com.salesforce.soap.partner.StreamingEnabledHeader streamingEnabledHeader570,
            com.salesforce.soap.partner.DuplicateRuleHeader duplicateRuleHeader571,
            com.salesforce.soap.partner.LocaleOptions localeOptions572,
            com.salesforce.soap.partner.DebuggingHeader debuggingHeader573,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader574,
            com.salesforce.soap.partner.EmailHeader emailHeader575,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:mergeRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), merge563,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge"));

        // add the soap_headers only if they are not null
        if (sessionHeader564 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader564 = toOM(sessionHeader564,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")));
            addHeader(omElementsessionHeader564, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions565 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions565 = toOM(callOptions565,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")));
            addHeader(omElementcallOptions565, env);

        }

        // add the soap_headers only if they are not null
        if (assignmentRuleHeader566 != null) {

            org.apache.axiom.om.OMElement omElementassignmentRuleHeader566 = toOM(assignmentRuleHeader566,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")));
            addHeader(omElementassignmentRuleHeader566, env);

        }

        // add the soap_headers only if they are not null
        if (mruHeader567 != null) {

            org.apache.axiom.om.OMElement omElementmruHeader567 = toOM(mruHeader567,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")));
            addHeader(omElementmruHeader567, env);

        }

        // add the soap_headers only if they are not null
        if (allowFieldTruncationHeader568 != null) {

            org.apache.axiom.om.OMElement omElementallowFieldTruncationHeader568 = toOM(allowFieldTruncationHeader568,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")));
            addHeader(omElementallowFieldTruncationHeader568, env);

        }

        // add the soap_headers only if they are not null
        if (disableFeedTrackingHeader569 != null) {

            org.apache.axiom.om.OMElement omElementdisableFeedTrackingHeader569 = toOM(disableFeedTrackingHeader569,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")));
            addHeader(omElementdisableFeedTrackingHeader569, env);

        }

        // add the soap_headers only if they are not null
        if (streamingEnabledHeader570 != null) {

            org.apache.axiom.om.OMElement omElementstreamingEnabledHeader570 = toOM(streamingEnabledHeader570,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")));
            addHeader(omElementstreamingEnabledHeader570, env);

        }

        // add the soap_headers only if they are not null
        if (duplicateRuleHeader571 != null) {

            org.apache.axiom.om.OMElement omElementduplicateRuleHeader571 = toOM(duplicateRuleHeader571,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")));
            addHeader(omElementduplicateRuleHeader571, env);

        }

        // add the soap_headers only if they are not null
        if (localeOptions572 != null) {

            org.apache.axiom.om.OMElement omElementlocaleOptions572 = toOM(localeOptions572,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")));
            addHeader(omElementlocaleOptions572, env);

        }

        // add the soap_headers only if they are not null
        if (debuggingHeader573 != null) {

            org.apache.axiom.om.OMElement omElementdebuggingHeader573 = toOM(debuggingHeader573,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")));
            addHeader(omElementdebuggingHeader573, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader574 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader574 = toOM(packageVersionHeader574,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")));
            addHeader(omElementpackageVersionHeader574, env);

        }

        // add the soap_headers only if they are not null
        if (emailHeader575 != null) {

            org.apache.axiom.om.OMElement omElementemailHeader575 = toOM(emailHeader575,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "merge")));
            addHeader(omElementemailHeader575, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.MergeResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultmerge((com.salesforce.soap.partner.MergeResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrormerge(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "merge"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "merge"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "merge"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                                    callback.receiveErrormerge((com.salesforce.soap.partner.InvalidSObjectFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                                    callback.receiveErrormerge((com.salesforce.soap.partner.InvalidIdFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.InvalidFieldFault) {
                                    callback.receiveErrormerge((com.salesforce.soap.partner.InvalidFieldFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrormerge((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrormerge(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrormerge(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrormerge(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrormerge(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrormerge(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrormerge(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrormerge(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrormerge(f);
                            }
                        } else {
                            callback.receiveErrormerge(f);
                        }
                    } else {
                        callback.receiveErrormerge(f);
                    }
                } else {
                    callback.receiveErrormerge(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrormerge(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[0].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[0].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Returns standard information relevant to the current user
     * 
     * @see com.salesforce.soap.partner.SforceService#getUserInfo
     * @param getUserInfo577
     * 
     * @param sessionHeader578
     * 
     * @param callOptions579
     * 
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.GetUserInfoResponse getUserInfo(

    com.salesforce.soap.partner.GetUserInfo getUserInfo577, com.salesforce.soap.partner.SessionHeader sessionHeader578,
            com.salesforce.soap.partner.CallOptions callOptions579)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:getUserInfoRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), getUserInfo577,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getUserInfo")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getUserInfo"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader578 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader578 = toOM(sessionHeader578,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getUserInfo")));
                addHeader(omElementsessionHeader578, env);

            }

            // add the children only if the parameter is not null
            if (callOptions579 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions579 = toOM(callOptions579,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getUserInfo")));
                addHeader(omElementcallOptions579, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.GetUserInfoResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.GetUserInfoResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap
                        .containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "getUserInfo"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "getUserInfo"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "getUserInfo"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Returns standard information relevant to the current user
     * 
     * @see com.salesforce.soap.partner.SforceService#startgetUserInfo
     * @param getUserInfo577
     * 
     * @param sessionHeader578
     * 
     * @param callOptions579
     */
    public void startgetUserInfo(

    com.salesforce.soap.partner.GetUserInfo getUserInfo577, com.salesforce.soap.partner.SessionHeader sessionHeader578,
            com.salesforce.soap.partner.CallOptions callOptions579,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:getUserInfoRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), getUserInfo577,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getUserInfo")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getUserInfo"));

        // add the soap_headers only if they are not null
        if (sessionHeader578 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader578 = toOM(sessionHeader578,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getUserInfo")));
            addHeader(omElementsessionHeader578, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions579 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions579 = toOM(callOptions579,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getUserInfo")));
            addHeader(omElementcallOptions579, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.GetUserInfoResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultgetUserInfo((com.salesforce.soap.partner.GetUserInfoResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorgetUserInfo(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "getUserInfo"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "getUserInfo"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "getUserInfo"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrorgetUserInfo((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrorgetUserInfo(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetUserInfo(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetUserInfo(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetUserInfo(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetUserInfo(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetUserInfo(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetUserInfo(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetUserInfo(f);
                            }
                        } else {
                            callback.receiveErrorgetUserInfo(f);
                        }
                    } else {
                        callback.receiveErrorgetUserInfo(f);
                    }
                } else {
                    callback.receiveErrorgetUserInfo(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorgetUserInfo(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[1].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[1].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Describe all tabs available to a user
     * 
     * @see com.salesforce.soap.partner.SforceService#describeAllTabs
     * @param describeAllTabs581
     * 
     * @param sessionHeader582
     * 
     * @param callOptions583
     * 
     * @param packageVersionHeader584
     * 
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.DescribeAllTabsResponse describeAllTabs(

    com.salesforce.soap.partner.DescribeAllTabs describeAllTabs581, com.salesforce.soap.partner.SessionHeader sessionHeader582,
            com.salesforce.soap.partner.CallOptions callOptions583,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader584)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeAllTabsRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeAllTabs581,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAllTabs")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAllTabs"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader582 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader582 = toOM(sessionHeader582,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAllTabs")));
                addHeader(omElementsessionHeader582, env);

            }

            // add the children only if the parameter is not null
            if (callOptions583 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions583 = toOM(callOptions583,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAllTabs")));
                addHeader(omElementcallOptions583, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader584 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader584 = toOM(packageVersionHeader584,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAllTabs")));
                addHeader(omElementpackageVersionHeader584, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.DescribeAllTabsResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.DescribeAllTabsResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "describeAllTabs"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeAllTabs"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeAllTabs"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Describe all tabs available to a user
     * 
     * @see com.salesforce.soap.partner.SforceService#startdescribeAllTabs
     * @param describeAllTabs581
     * 
     * @param sessionHeader582
     * 
     * @param callOptions583
     * 
     * @param packageVersionHeader584
     */
    public void startdescribeAllTabs(

    com.salesforce.soap.partner.DescribeAllTabs describeAllTabs581, com.salesforce.soap.partner.SessionHeader sessionHeader582,
            com.salesforce.soap.partner.CallOptions callOptions583,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader584,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeAllTabsRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeAllTabs581,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAllTabs")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAllTabs"));

        // add the soap_headers only if they are not null
        if (sessionHeader582 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader582 = toOM(sessionHeader582,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAllTabs")));
            addHeader(omElementsessionHeader582, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions583 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions583 = toOM(callOptions583,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAllTabs")));
            addHeader(omElementcallOptions583, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader584 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader584 = toOM(packageVersionHeader584,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAllTabs")));
            addHeader(omElementpackageVersionHeader584, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.DescribeAllTabsResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultdescribeAllTabs((com.salesforce.soap.partner.DescribeAllTabsResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrordescribeAllTabs(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "describeAllTabs"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeAllTabs"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeAllTabs"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrordescribeAllTabs((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrordescribeAllTabs(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeAllTabs(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeAllTabs(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeAllTabs(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeAllTabs(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeAllTabs(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeAllTabs(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeAllTabs(f);
                            }
                        } else {
                            callback.receiveErrordescribeAllTabs(f);
                        }
                    } else {
                        callback.receiveErrordescribeAllTabs(f);
                    }
                } else {
                    callback.receiveErrordescribeAllTabs(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrordescribeAllTabs(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[2].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[2].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Describe the details of a series of quick actions
     * 
     * @see com.salesforce.soap.partner.SforceService#describeQuickActions
     * @param describeQuickActions586
     * 
     * @param sessionHeader587
     * 
     * @param callOptions588
     * 
     * @param packageVersionHeader589
     * 
     * @param localeOptions590
     */

    public com.salesforce.soap.partner.DescribeQuickActionsResponse describeQuickActions(

    com.salesforce.soap.partner.DescribeQuickActions describeQuickActions586,
            com.salesforce.soap.partner.SessionHeader sessionHeader587, com.salesforce.soap.partner.CallOptions callOptions588,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader589,
            com.salesforce.soap.partner.LocaleOptions localeOptions590)

    throws java.rmi.RemoteException

    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeQuickActionsRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeQuickActions586,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeQuickActions")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeQuickActions"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader587 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader587 = toOM(sessionHeader587,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeQuickActions")));
                addHeader(omElementsessionHeader587, env);

            }

            // add the children only if the parameter is not null
            if (callOptions588 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions588 = toOM(callOptions588,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeQuickActions")));
                addHeader(omElementcallOptions588, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader589 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader589 = toOM(packageVersionHeader589,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeQuickActions")));
                addHeader(omElementpackageVersionHeader589, env);

            }

            // add the children only if the parameter is not null
            if (localeOptions590 != null) {

                org.apache.axiom.om.OMElement omElementlocaleOptions590 = toOM(localeOptions590,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeQuickActions")));
                addHeader(omElementlocaleOptions590, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.DescribeQuickActionsResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.DescribeQuickActionsResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "describeQuickActions"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeQuickActions"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeQuickActions"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Describe the details of a series of quick actions
     * 
     * @see com.salesforce.soap.partner.SforceService#startdescribeQuickActions
     * @param describeQuickActions586
     * 
     * @param sessionHeader587
     * 
     * @param callOptions588
     * 
     * @param packageVersionHeader589
     * 
     * @param localeOptions590
     */
    public void startdescribeQuickActions(

    com.salesforce.soap.partner.DescribeQuickActions describeQuickActions586,
            com.salesforce.soap.partner.SessionHeader sessionHeader587, com.salesforce.soap.partner.CallOptions callOptions588,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader589,
            com.salesforce.soap.partner.LocaleOptions localeOptions590,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeQuickActionsRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeQuickActions586,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeQuickActions")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeQuickActions"));

        // add the soap_headers only if they are not null
        if (sessionHeader587 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader587 = toOM(sessionHeader587,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeQuickActions")));
            addHeader(omElementsessionHeader587, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions588 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions588 = toOM(callOptions588,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeQuickActions")));
            addHeader(omElementcallOptions588, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader589 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader589 = toOM(packageVersionHeader589,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeQuickActions")));
            addHeader(omElementpackageVersionHeader589, env);

        }

        // add the soap_headers only if they are not null
        if (localeOptions590 != null) {

            org.apache.axiom.om.OMElement omElementlocaleOptions590 = toOM(localeOptions590,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeQuickActions")));
            addHeader(omElementlocaleOptions590, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.DescribeQuickActionsResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultdescribeQuickActions((com.salesforce.soap.partner.DescribeQuickActionsResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrordescribeQuickActions(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "describeQuickActions"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeQuickActions"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeQuickActions"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                callback.receiveErrordescribeQuickActions(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeQuickActions(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeQuickActions(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeQuickActions(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeQuickActions(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeQuickActions(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeQuickActions(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeQuickActions(f);
                            }
                        } else {
                            callback.receiveErrordescribeQuickActions(f);
                        }
                    } else {
                        callback.receiveErrordescribeQuickActions(f);
                    }
                } else {
                    callback.receiveErrordescribeQuickActions(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrordescribeQuickActions(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[3].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[3].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Describe the layout of the SoftPhone
     * 
     * @see com.salesforce.soap.partner.SforceService#describeSoftphoneLayout
     * @param describeSoftphoneLayout592
     * 
     * @param sessionHeader593
     * 
     * @param callOptions594
     * 
     * @param packageVersionHeader595
     * 
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.DescribeSoftphoneLayoutResponse describeSoftphoneLayout(

    com.salesforce.soap.partner.DescribeSoftphoneLayout describeSoftphoneLayout592,
            com.salesforce.soap.partner.SessionHeader sessionHeader593, com.salesforce.soap.partner.CallOptions callOptions594,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader595)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[4].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeSoftphoneLayoutRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeSoftphoneLayout592,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSoftphoneLayout")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSoftphoneLayout"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader593 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader593 = toOM(sessionHeader593,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSoftphoneLayout")));
                addHeader(omElementsessionHeader593, env);

            }

            // add the children only if the parameter is not null
            if (callOptions594 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions594 = toOM(callOptions594,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSoftphoneLayout")));
                addHeader(omElementcallOptions594, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader595 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader595 = toOM(packageVersionHeader595,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSoftphoneLayout")));
                addHeader(omElementpackageVersionHeader595, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.DescribeSoftphoneLayoutResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.DescribeSoftphoneLayoutResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "describeSoftphoneLayout"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeSoftphoneLayout"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeSoftphoneLayout"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Describe the layout of the SoftPhone
     * 
     * @see com.salesforce.soap.partner.SforceService#startdescribeSoftphoneLayout
     * @param describeSoftphoneLayout592
     * 
     * @param sessionHeader593
     * 
     * @param callOptions594
     * 
     * @param packageVersionHeader595
     */
    public void startdescribeSoftphoneLayout(

    com.salesforce.soap.partner.DescribeSoftphoneLayout describeSoftphoneLayout592,
            com.salesforce.soap.partner.SessionHeader sessionHeader593, com.salesforce.soap.partner.CallOptions callOptions594,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader595,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[4].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeSoftphoneLayoutRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeSoftphoneLayout592,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSoftphoneLayout")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSoftphoneLayout"));

        // add the soap_headers only if they are not null
        if (sessionHeader593 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader593 = toOM(sessionHeader593,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSoftphoneLayout")));
            addHeader(omElementsessionHeader593, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions594 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions594 = toOM(callOptions594,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSoftphoneLayout")));
            addHeader(omElementcallOptions594, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader595 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader595 = toOM(packageVersionHeader595,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSoftphoneLayout")));
            addHeader(omElementpackageVersionHeader595, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.DescribeSoftphoneLayoutResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultdescribeSoftphoneLayout((com.salesforce.soap.partner.DescribeSoftphoneLayoutResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrordescribeSoftphoneLayout(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "describeSoftphoneLayout"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                                "describeSoftphoneLayout"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                                "describeSoftphoneLayout"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrordescribeSoftphoneLayout((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrordescribeSoftphoneLayout(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSoftphoneLayout(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSoftphoneLayout(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSoftphoneLayout(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSoftphoneLayout(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSoftphoneLayout(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSoftphoneLayout(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSoftphoneLayout(f);
                            }
                        } else {
                            callback.receiveErrordescribeSoftphoneLayout(f);
                        }
                    } else {
                        callback.receiveErrordescribeSoftphoneLayout(f);
                    }
                } else {
                    callback.receiveErrordescribeSoftphoneLayout(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrordescribeSoftphoneLayout(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[4].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[4].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Describe the primary compact layouts for the sObjects requested
     * 
     * @see com.salesforce.soap.partner.SforceService#describePrimaryCompactLayouts
     * @param describePrimaryCompactLayouts597
     * 
     * @param sessionHeader598
     * 
     * @param callOptions599
     * 
     * @param packageVersionHeader600
     */

    public com.salesforce.soap.partner.DescribePrimaryCompactLayoutsResponse describePrimaryCompactLayouts(

    com.salesforce.soap.partner.DescribePrimaryCompactLayouts describePrimaryCompactLayouts597,
            com.salesforce.soap.partner.SessionHeader sessionHeader598, com.salesforce.soap.partner.CallOptions callOptions599,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader600)

    throws java.rmi.RemoteException

    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[5].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describePrimaryCompactLayoutsRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(
                    getFactory(_operationClient.getOptions().getSoapVersionURI()),
                    describePrimaryCompactLayouts597,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describePrimaryCompactLayouts")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describePrimaryCompactLayouts"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader598 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader598 = toOM(sessionHeader598,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com",
                                "describePrimaryCompactLayouts")));
                addHeader(omElementsessionHeader598, env);

            }

            // add the children only if the parameter is not null
            if (callOptions599 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions599 = toOM(callOptions599,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com",
                                "describePrimaryCompactLayouts")));
                addHeader(omElementcallOptions599, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader600 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader600 = toOM(packageVersionHeader600,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com",
                                "describePrimaryCompactLayouts")));
                addHeader(omElementpackageVersionHeader600, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.DescribePrimaryCompactLayoutsResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.DescribePrimaryCompactLayoutsResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "describePrimaryCompactLayouts"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describePrimaryCompactLayouts"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describePrimaryCompactLayouts"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Describe the primary compact layouts for the sObjects requested
     * 
     * @see com.salesforce.soap.partner.SforceService#startdescribePrimaryCompactLayouts
     * @param describePrimaryCompactLayouts597
     * 
     * @param sessionHeader598
     * 
     * @param callOptions599
     * 
     * @param packageVersionHeader600
     */
    public void startdescribePrimaryCompactLayouts(

    com.salesforce.soap.partner.DescribePrimaryCompactLayouts describePrimaryCompactLayouts597,
            com.salesforce.soap.partner.SessionHeader sessionHeader598, com.salesforce.soap.partner.CallOptions callOptions599,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader600,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[5].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describePrimaryCompactLayoutsRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describePrimaryCompactLayouts597,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describePrimaryCompactLayouts")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describePrimaryCompactLayouts"));

        // add the soap_headers only if they are not null
        if (sessionHeader598 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader598 = toOM(
                    sessionHeader598,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describePrimaryCompactLayouts")));
            addHeader(omElementsessionHeader598, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions599 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions599 = toOM(
                    callOptions599,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describePrimaryCompactLayouts")));
            addHeader(omElementcallOptions599, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader600 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader600 = toOM(
                    packageVersionHeader600,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describePrimaryCompactLayouts")));
            addHeader(omElementpackageVersionHeader600, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.DescribePrimaryCompactLayoutsResponse.class,
                            getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultdescribePrimaryCompactLayouts((com.salesforce.soap.partner.DescribePrimaryCompactLayoutsResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrordescribePrimaryCompactLayouts(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "describePrimaryCompactLayouts"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                                "describePrimaryCompactLayouts"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                                "describePrimaryCompactLayouts"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                callback.receiveErrordescribePrimaryCompactLayouts(new java.rmi.RemoteException(ex.getMessage(),
                                        ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribePrimaryCompactLayouts(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribePrimaryCompactLayouts(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribePrimaryCompactLayouts(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribePrimaryCompactLayouts(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribePrimaryCompactLayouts(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribePrimaryCompactLayouts(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribePrimaryCompactLayouts(f);
                            }
                        } else {
                            callback.receiveErrordescribePrimaryCompactLayouts(f);
                        }
                    } else {
                        callback.receiveErrordescribePrimaryCompactLayouts(f);
                    }
                } else {
                    callback.receiveErrordescribePrimaryCompactLayouts(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrordescribePrimaryCompactLayouts(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[5].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[5].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Execute the specified list view and return the presentation-ready results.
     * 
     * @see com.salesforce.soap.partner.SforceService#executeListView
     * @param executeListView602
     * 
     * @param sessionHeader603
     * 
     * @param callOptions604
     * 
     * @param mruHeader605
     */

    public com.salesforce.soap.partner.ExecuteListViewResponse executeListView(

    com.salesforce.soap.partner.ExecuteListView executeListView602, com.salesforce.soap.partner.SessionHeader sessionHeader603,
            com.salesforce.soap.partner.CallOptions callOptions604, com.salesforce.soap.partner.MruHeader mruHeader605)

    throws java.rmi.RemoteException

    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[6].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:executeListViewRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), executeListView602,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "executeListView")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "executeListView"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader603 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader603 = toOM(sessionHeader603,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "executeListView")));
                addHeader(omElementsessionHeader603, env);

            }

            // add the children only if the parameter is not null
            if (callOptions604 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions604 = toOM(callOptions604,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "executeListView")));
                addHeader(omElementcallOptions604, env);

            }

            // add the children only if the parameter is not null
            if (mruHeader605 != null) {

                org.apache.axiom.om.OMElement omElementmruHeader605 = toOM(mruHeader605,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "executeListView")));
                addHeader(omElementmruHeader605, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.ExecuteListViewResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.ExecuteListViewResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "executeListView"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "executeListView"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "executeListView"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Execute the specified list view and return the presentation-ready
     * results.
     * 
     * @see com.salesforce.soap.partner.SforceService#startexecuteListView
     * @param executeListView602
     * 
     * @param sessionHeader603
     * 
     * @param callOptions604
     * 
     * @param mruHeader605
     */
    public void startexecuteListView(

    com.salesforce.soap.partner.ExecuteListView executeListView602, com.salesforce.soap.partner.SessionHeader sessionHeader603,
            com.salesforce.soap.partner.CallOptions callOptions604, com.salesforce.soap.partner.MruHeader mruHeader605,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[6].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:executeListViewRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), executeListView602,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "executeListView")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "executeListView"));

        // add the soap_headers only if they are not null
        if (sessionHeader603 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader603 = toOM(sessionHeader603,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "executeListView")));
            addHeader(omElementsessionHeader603, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions604 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions604 = toOM(callOptions604,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "executeListView")));
            addHeader(omElementcallOptions604, env);

        }

        // add the soap_headers only if they are not null
        if (mruHeader605 != null) {

            org.apache.axiom.om.OMElement omElementmruHeader605 = toOM(mruHeader605,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "executeListView")));
            addHeader(omElementmruHeader605, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.ExecuteListViewResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultexecuteListView((com.salesforce.soap.partner.ExecuteListViewResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorexecuteListView(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "executeListView"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "executeListView"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "executeListView"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                callback.receiveErrorexecuteListView(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorexecuteListView(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorexecuteListView(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorexecuteListView(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorexecuteListView(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorexecuteListView(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorexecuteListView(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorexecuteListView(f);
                            }
                        } else {
                            callback.receiveErrorexecuteListView(f);
                        }
                    } else {
                        callback.receiveErrorexecuteListView(f);
                    }
                } else {
                    callback.receiveErrorexecuteListView(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorexecuteListView(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[6].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[6].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Update a set of sObjects
     * 
     * @see com.salesforce.soap.partner.SforceService#update
     * @param update607
     * 
     * @param sessionHeader608
     * 
     * @param callOptions609
     * 
     * @param assignmentRuleHeader610
     * 
     * @param mruHeader611
     * 
     * @param allowFieldTruncationHeader612
     * 
     * @param disableFeedTrackingHeader613
     * 
     * @param streamingEnabledHeader614
     * 
     * @param allOrNoneHeader615
     * 
     * @param duplicateRuleHeader616
     * 
     * @param localeOptions617
     * 
     * @param debuggingHeader618
     * 
     * @param packageVersionHeader619
     * 
     * @param emailHeader620
     * 
     * @param ownerChangeOptions621
     * 
     * @throws com.salesforce.soap.partner.InvalidSObjectFault :
     * @throws com.salesforce.soap.partner.InvalidIdFault :
     * @throws com.salesforce.soap.partner.InvalidFieldFault :
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.UpdateResponse update(

    com.salesforce.soap.partner.Update update607, com.salesforce.soap.partner.SessionHeader sessionHeader608,
            com.salesforce.soap.partner.CallOptions callOptions609,
            com.salesforce.soap.partner.AssignmentRuleHeader assignmentRuleHeader610,
            com.salesforce.soap.partner.MruHeader mruHeader611,
            com.salesforce.soap.partner.AllowFieldTruncationHeader allowFieldTruncationHeader612,
            com.salesforce.soap.partner.DisableFeedTrackingHeader disableFeedTrackingHeader613,
            com.salesforce.soap.partner.StreamingEnabledHeader streamingEnabledHeader614,
            com.salesforce.soap.partner.AllOrNoneHeader allOrNoneHeader615,
            com.salesforce.soap.partner.DuplicateRuleHeader duplicateRuleHeader616,
            com.salesforce.soap.partner.LocaleOptions localeOptions617,
            com.salesforce.soap.partner.DebuggingHeader debuggingHeader618,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader619,
            com.salesforce.soap.partner.EmailHeader emailHeader620,
            com.salesforce.soap.partner.OwnerChangeOptions ownerChangeOptions621)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.InvalidSObjectFault, com.salesforce.soap.partner.InvalidIdFault,
            com.salesforce.soap.partner.InvalidFieldFault, com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[7].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:updateRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), update607,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader608 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader608 = toOM(sessionHeader608,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
                addHeader(omElementsessionHeader608, env);

            }

            // add the children only if the parameter is not null
            if (callOptions609 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions609 = toOM(callOptions609,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
                addHeader(omElementcallOptions609, env);

            }

            // add the children only if the parameter is not null
            if (assignmentRuleHeader610 != null) {

                org.apache.axiom.om.OMElement omElementassignmentRuleHeader610 = toOM(assignmentRuleHeader610,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
                addHeader(omElementassignmentRuleHeader610, env);

            }

            // add the children only if the parameter is not null
            if (mruHeader611 != null) {

                org.apache.axiom.om.OMElement omElementmruHeader611 = toOM(mruHeader611,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
                addHeader(omElementmruHeader611, env);

            }

            // add the children only if the parameter is not null
            if (allowFieldTruncationHeader612 != null) {

                org.apache.axiom.om.OMElement omElementallowFieldTruncationHeader612 = toOM(allowFieldTruncationHeader612,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
                addHeader(omElementallowFieldTruncationHeader612, env);

            }

            // add the children only if the parameter is not null
            if (disableFeedTrackingHeader613 != null) {

                org.apache.axiom.om.OMElement omElementdisableFeedTrackingHeader613 = toOM(disableFeedTrackingHeader613,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
                addHeader(omElementdisableFeedTrackingHeader613, env);

            }

            // add the children only if the parameter is not null
            if (streamingEnabledHeader614 != null) {

                org.apache.axiom.om.OMElement omElementstreamingEnabledHeader614 = toOM(streamingEnabledHeader614,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
                addHeader(omElementstreamingEnabledHeader614, env);

            }

            // add the children only if the parameter is not null
            if (allOrNoneHeader615 != null) {

                org.apache.axiom.om.OMElement omElementallOrNoneHeader615 = toOM(allOrNoneHeader615,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
                addHeader(omElementallOrNoneHeader615, env);

            }

            // add the children only if the parameter is not null
            if (duplicateRuleHeader616 != null) {

                org.apache.axiom.om.OMElement omElementduplicateRuleHeader616 = toOM(duplicateRuleHeader616,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
                addHeader(omElementduplicateRuleHeader616, env);

            }

            // add the children only if the parameter is not null
            if (localeOptions617 != null) {

                org.apache.axiom.om.OMElement omElementlocaleOptions617 = toOM(localeOptions617,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
                addHeader(omElementlocaleOptions617, env);

            }

            // add the children only if the parameter is not null
            if (debuggingHeader618 != null) {

                org.apache.axiom.om.OMElement omElementdebuggingHeader618 = toOM(debuggingHeader618,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
                addHeader(omElementdebuggingHeader618, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader619 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader619 = toOM(packageVersionHeader619,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
                addHeader(omElementpackageVersionHeader619, env);

            }

            // add the children only if the parameter is not null
            if (emailHeader620 != null) {

                org.apache.axiom.om.OMElement omElementemailHeader620 = toOM(emailHeader620,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
                addHeader(omElementemailHeader620, env);

            }

            // add the children only if the parameter is not null
            if (ownerChangeOptions621 != null) {

                org.apache.axiom.om.OMElement omElementownerChangeOptions621 = toOM(ownerChangeOptions621,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
                addHeader(omElementownerChangeOptions621, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.UpdateResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.UpdateResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "update"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "update"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "update"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                            throw (com.salesforce.soap.partner.InvalidSObjectFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                            throw (com.salesforce.soap.partner.InvalidIdFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.InvalidFieldFault) {
                            throw (com.salesforce.soap.partner.InvalidFieldFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Update a set of sObjects
     * 
     * @see com.salesforce.soap.partner.SforceService#startupdate
     * @param update607
     * 
     * @param sessionHeader608
     * 
     * @param callOptions609
     * 
     * @param assignmentRuleHeader610
     * 
     * @param mruHeader611
     * 
     * @param allowFieldTruncationHeader612
     * 
     * @param disableFeedTrackingHeader613
     * 
     * @param streamingEnabledHeader614
     * 
     * @param allOrNoneHeader615
     * 
     * @param duplicateRuleHeader616
     * 
     * @param localeOptions617
     * 
     * @param debuggingHeader618
     * 
     * @param packageVersionHeader619
     * 
     * @param emailHeader620
     * 
     * @param ownerChangeOptions621
     */
    public void startupdate(

    com.salesforce.soap.partner.Update update607, com.salesforce.soap.partner.SessionHeader sessionHeader608,
            com.salesforce.soap.partner.CallOptions callOptions609,
            com.salesforce.soap.partner.AssignmentRuleHeader assignmentRuleHeader610,
            com.salesforce.soap.partner.MruHeader mruHeader611,
            com.salesforce.soap.partner.AllowFieldTruncationHeader allowFieldTruncationHeader612,
            com.salesforce.soap.partner.DisableFeedTrackingHeader disableFeedTrackingHeader613,
            com.salesforce.soap.partner.StreamingEnabledHeader streamingEnabledHeader614,
            com.salesforce.soap.partner.AllOrNoneHeader allOrNoneHeader615,
            com.salesforce.soap.partner.DuplicateRuleHeader duplicateRuleHeader616,
            com.salesforce.soap.partner.LocaleOptions localeOptions617,
            com.salesforce.soap.partner.DebuggingHeader debuggingHeader618,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader619,
            com.salesforce.soap.partner.EmailHeader emailHeader620,
            com.salesforce.soap.partner.OwnerChangeOptions ownerChangeOptions621,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[7].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:updateRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), update607,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update"));

        // add the soap_headers only if they are not null
        if (sessionHeader608 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader608 = toOM(sessionHeader608,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
            addHeader(omElementsessionHeader608, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions609 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions609 = toOM(callOptions609,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
            addHeader(omElementcallOptions609, env);

        }

        // add the soap_headers only if they are not null
        if (assignmentRuleHeader610 != null) {

            org.apache.axiom.om.OMElement omElementassignmentRuleHeader610 = toOM(assignmentRuleHeader610,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
            addHeader(omElementassignmentRuleHeader610, env);

        }

        // add the soap_headers only if they are not null
        if (mruHeader611 != null) {

            org.apache.axiom.om.OMElement omElementmruHeader611 = toOM(mruHeader611,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
            addHeader(omElementmruHeader611, env);

        }

        // add the soap_headers only if they are not null
        if (allowFieldTruncationHeader612 != null) {

            org.apache.axiom.om.OMElement omElementallowFieldTruncationHeader612 = toOM(allowFieldTruncationHeader612,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
            addHeader(omElementallowFieldTruncationHeader612, env);

        }

        // add the soap_headers only if they are not null
        if (disableFeedTrackingHeader613 != null) {

            org.apache.axiom.om.OMElement omElementdisableFeedTrackingHeader613 = toOM(disableFeedTrackingHeader613,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
            addHeader(omElementdisableFeedTrackingHeader613, env);

        }

        // add the soap_headers only if they are not null
        if (streamingEnabledHeader614 != null) {

            org.apache.axiom.om.OMElement omElementstreamingEnabledHeader614 = toOM(streamingEnabledHeader614,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
            addHeader(omElementstreamingEnabledHeader614, env);

        }

        // add the soap_headers only if they are not null
        if (allOrNoneHeader615 != null) {

            org.apache.axiom.om.OMElement omElementallOrNoneHeader615 = toOM(allOrNoneHeader615,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
            addHeader(omElementallOrNoneHeader615, env);

        }

        // add the soap_headers only if they are not null
        if (duplicateRuleHeader616 != null) {

            org.apache.axiom.om.OMElement omElementduplicateRuleHeader616 = toOM(duplicateRuleHeader616,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
            addHeader(omElementduplicateRuleHeader616, env);

        }

        // add the soap_headers only if they are not null
        if (localeOptions617 != null) {

            org.apache.axiom.om.OMElement omElementlocaleOptions617 = toOM(localeOptions617,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
            addHeader(omElementlocaleOptions617, env);

        }

        // add the soap_headers only if they are not null
        if (debuggingHeader618 != null) {

            org.apache.axiom.om.OMElement omElementdebuggingHeader618 = toOM(debuggingHeader618,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
            addHeader(omElementdebuggingHeader618, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader619 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader619 = toOM(packageVersionHeader619,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
            addHeader(omElementpackageVersionHeader619, env);

        }

        // add the soap_headers only if they are not null
        if (emailHeader620 != null) {

            org.apache.axiom.om.OMElement omElementemailHeader620 = toOM(emailHeader620,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
            addHeader(omElementemailHeader620, env);

        }

        // add the soap_headers only if they are not null
        if (ownerChangeOptions621 != null) {

            org.apache.axiom.om.OMElement omElementownerChangeOptions621 = toOM(ownerChangeOptions621,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "update")));
            addHeader(omElementownerChangeOptions621, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.UpdateResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultupdate((com.salesforce.soap.partner.UpdateResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorupdate(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "update"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "update"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "update"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                                    callback.receiveErrorupdate((com.salesforce.soap.partner.InvalidSObjectFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                                    callback.receiveErrorupdate((com.salesforce.soap.partner.InvalidIdFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.InvalidFieldFault) {
                                    callback.receiveErrorupdate((com.salesforce.soap.partner.InvalidFieldFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrorupdate((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrorupdate(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorupdate(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorupdate(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorupdate(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorupdate(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorupdate(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorupdate(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorupdate(f);
                            }
                        } else {
                            callback.receiveErrorupdate(f);
                        }
                    } else {
                        callback.receiveErrorupdate(f);
                    }
                } else {
                    callback.receiveErrorupdate(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorupdate(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[7].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[7].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Perform a series of predefined actions such as quick create or log a task
     * 
     * @see com.salesforce.soap.partner.SforceService#performQuickActions
     * @param performQuickActions623
     * 
     * @param sessionHeader624
     * 
     * @param callOptions625
     * 
     * @param assignmentRuleHeader626
     * 
     * @param mruHeader627
     * 
     * @param allowFieldTruncationHeader628
     * 
     * @param disableFeedTrackingHeader629
     * 
     * @param streamingEnabledHeader630
     * 
     * @param allOrNoneHeader631
     * 
     * @param duplicateRuleHeader632
     * 
     * @param localeOptions633
     * 
     * @param debuggingHeader634
     * 
     * @param packageVersionHeader635
     * 
     * @param emailHeader636
     * 
     * @param ownerChangeOptions637
     */

    public com.salesforce.soap.partner.PerformQuickActionsResponse performQuickActions(

    com.salesforce.soap.partner.PerformQuickActions performQuickActions623,
            com.salesforce.soap.partner.SessionHeader sessionHeader624, com.salesforce.soap.partner.CallOptions callOptions625,
            com.salesforce.soap.partner.AssignmentRuleHeader assignmentRuleHeader626,
            com.salesforce.soap.partner.MruHeader mruHeader627,
            com.salesforce.soap.partner.AllowFieldTruncationHeader allowFieldTruncationHeader628,
            com.salesforce.soap.partner.DisableFeedTrackingHeader disableFeedTrackingHeader629,
            com.salesforce.soap.partner.StreamingEnabledHeader streamingEnabledHeader630,
            com.salesforce.soap.partner.AllOrNoneHeader allOrNoneHeader631,
            com.salesforce.soap.partner.DuplicateRuleHeader duplicateRuleHeader632,
            com.salesforce.soap.partner.LocaleOptions localeOptions633,
            com.salesforce.soap.partner.DebuggingHeader debuggingHeader634,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader635,
            com.salesforce.soap.partner.EmailHeader emailHeader636,
            com.salesforce.soap.partner.OwnerChangeOptions ownerChangeOptions637)

    throws java.rmi.RemoteException

    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[8].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:performQuickActionsRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), performQuickActions623,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader624 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader624 = toOM(sessionHeader624,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
                addHeader(omElementsessionHeader624, env);

            }

            // add the children only if the parameter is not null
            if (callOptions625 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions625 = toOM(callOptions625,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
                addHeader(omElementcallOptions625, env);

            }

            // add the children only if the parameter is not null
            if (assignmentRuleHeader626 != null) {

                org.apache.axiom.om.OMElement omElementassignmentRuleHeader626 = toOM(assignmentRuleHeader626,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
                addHeader(omElementassignmentRuleHeader626, env);

            }

            // add the children only if the parameter is not null
            if (mruHeader627 != null) {

                org.apache.axiom.om.OMElement omElementmruHeader627 = toOM(mruHeader627,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
                addHeader(omElementmruHeader627, env);

            }

            // add the children only if the parameter is not null
            if (allowFieldTruncationHeader628 != null) {

                org.apache.axiom.om.OMElement omElementallowFieldTruncationHeader628 = toOM(allowFieldTruncationHeader628,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
                addHeader(omElementallowFieldTruncationHeader628, env);

            }

            // add the children only if the parameter is not null
            if (disableFeedTrackingHeader629 != null) {

                org.apache.axiom.om.OMElement omElementdisableFeedTrackingHeader629 = toOM(disableFeedTrackingHeader629,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
                addHeader(omElementdisableFeedTrackingHeader629, env);

            }

            // add the children only if the parameter is not null
            if (streamingEnabledHeader630 != null) {

                org.apache.axiom.om.OMElement omElementstreamingEnabledHeader630 = toOM(streamingEnabledHeader630,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
                addHeader(omElementstreamingEnabledHeader630, env);

            }

            // add the children only if the parameter is not null
            if (allOrNoneHeader631 != null) {

                org.apache.axiom.om.OMElement omElementallOrNoneHeader631 = toOM(allOrNoneHeader631,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
                addHeader(omElementallOrNoneHeader631, env);

            }

            // add the children only if the parameter is not null
            if (duplicateRuleHeader632 != null) {

                org.apache.axiom.om.OMElement omElementduplicateRuleHeader632 = toOM(duplicateRuleHeader632,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
                addHeader(omElementduplicateRuleHeader632, env);

            }

            // add the children only if the parameter is not null
            if (localeOptions633 != null) {

                org.apache.axiom.om.OMElement omElementlocaleOptions633 = toOM(localeOptions633,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
                addHeader(omElementlocaleOptions633, env);

            }

            // add the children only if the parameter is not null
            if (debuggingHeader634 != null) {

                org.apache.axiom.om.OMElement omElementdebuggingHeader634 = toOM(debuggingHeader634,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
                addHeader(omElementdebuggingHeader634, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader635 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader635 = toOM(packageVersionHeader635,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
                addHeader(omElementpackageVersionHeader635, env);

            }

            // add the children only if the parameter is not null
            if (emailHeader636 != null) {

                org.apache.axiom.om.OMElement omElementemailHeader636 = toOM(emailHeader636,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
                addHeader(omElementemailHeader636, env);

            }

            // add the children only if the parameter is not null
            if (ownerChangeOptions637 != null) {

                org.apache.axiom.om.OMElement omElementownerChangeOptions637 = toOM(ownerChangeOptions637,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
                addHeader(omElementownerChangeOptions637, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.PerformQuickActionsResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.PerformQuickActionsResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "performQuickActions"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "performQuickActions"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "performQuickActions"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Perform a series of predefined actions such as quick create or log a
     * task
     * 
     * @see com.salesforce.soap.partner.SforceService#startperformQuickActions
     * @param performQuickActions623
     * 
     * @param sessionHeader624
     * 
     * @param callOptions625
     * 
     * @param assignmentRuleHeader626
     * 
     * @param mruHeader627
     * 
     * @param allowFieldTruncationHeader628
     * 
     * @param disableFeedTrackingHeader629
     * 
     * @param streamingEnabledHeader630
     * 
     * @param allOrNoneHeader631
     * 
     * @param duplicateRuleHeader632
     * 
     * @param localeOptions633
     * 
     * @param debuggingHeader634
     * 
     * @param packageVersionHeader635
     * 
     * @param emailHeader636
     * 
     * @param ownerChangeOptions637
     */
    public void startperformQuickActions(

    com.salesforce.soap.partner.PerformQuickActions performQuickActions623,
            com.salesforce.soap.partner.SessionHeader sessionHeader624, com.salesforce.soap.partner.CallOptions callOptions625,
            com.salesforce.soap.partner.AssignmentRuleHeader assignmentRuleHeader626,
            com.salesforce.soap.partner.MruHeader mruHeader627,
            com.salesforce.soap.partner.AllowFieldTruncationHeader allowFieldTruncationHeader628,
            com.salesforce.soap.partner.DisableFeedTrackingHeader disableFeedTrackingHeader629,
            com.salesforce.soap.partner.StreamingEnabledHeader streamingEnabledHeader630,
            com.salesforce.soap.partner.AllOrNoneHeader allOrNoneHeader631,
            com.salesforce.soap.partner.DuplicateRuleHeader duplicateRuleHeader632,
            com.salesforce.soap.partner.LocaleOptions localeOptions633,
            com.salesforce.soap.partner.DebuggingHeader debuggingHeader634,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader635,
            com.salesforce.soap.partner.EmailHeader emailHeader636,
            com.salesforce.soap.partner.OwnerChangeOptions ownerChangeOptions637,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[8].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:performQuickActionsRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), performQuickActions623,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions"));

        // add the soap_headers only if they are not null
        if (sessionHeader624 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader624 = toOM(sessionHeader624,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
            addHeader(omElementsessionHeader624, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions625 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions625 = toOM(callOptions625,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
            addHeader(omElementcallOptions625, env);

        }

        // add the soap_headers only if they are not null
        if (assignmentRuleHeader626 != null) {

            org.apache.axiom.om.OMElement omElementassignmentRuleHeader626 = toOM(assignmentRuleHeader626,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
            addHeader(omElementassignmentRuleHeader626, env);

        }

        // add the soap_headers only if they are not null
        if (mruHeader627 != null) {

            org.apache.axiom.om.OMElement omElementmruHeader627 = toOM(mruHeader627,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
            addHeader(omElementmruHeader627, env);

        }

        // add the soap_headers only if they are not null
        if (allowFieldTruncationHeader628 != null) {

            org.apache.axiom.om.OMElement omElementallowFieldTruncationHeader628 = toOM(allowFieldTruncationHeader628,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
            addHeader(omElementallowFieldTruncationHeader628, env);

        }

        // add the soap_headers only if they are not null
        if (disableFeedTrackingHeader629 != null) {

            org.apache.axiom.om.OMElement omElementdisableFeedTrackingHeader629 = toOM(disableFeedTrackingHeader629,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
            addHeader(omElementdisableFeedTrackingHeader629, env);

        }

        // add the soap_headers only if they are not null
        if (streamingEnabledHeader630 != null) {

            org.apache.axiom.om.OMElement omElementstreamingEnabledHeader630 = toOM(streamingEnabledHeader630,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
            addHeader(omElementstreamingEnabledHeader630, env);

        }

        // add the soap_headers only if they are not null
        if (allOrNoneHeader631 != null) {

            org.apache.axiom.om.OMElement omElementallOrNoneHeader631 = toOM(allOrNoneHeader631,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
            addHeader(omElementallOrNoneHeader631, env);

        }

        // add the soap_headers only if they are not null
        if (duplicateRuleHeader632 != null) {

            org.apache.axiom.om.OMElement omElementduplicateRuleHeader632 = toOM(duplicateRuleHeader632,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
            addHeader(omElementduplicateRuleHeader632, env);

        }

        // add the soap_headers only if they are not null
        if (localeOptions633 != null) {

            org.apache.axiom.om.OMElement omElementlocaleOptions633 = toOM(localeOptions633,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
            addHeader(omElementlocaleOptions633, env);

        }

        // add the soap_headers only if they are not null
        if (debuggingHeader634 != null) {

            org.apache.axiom.om.OMElement omElementdebuggingHeader634 = toOM(debuggingHeader634,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
            addHeader(omElementdebuggingHeader634, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader635 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader635 = toOM(packageVersionHeader635,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
            addHeader(omElementpackageVersionHeader635, env);

        }

        // add the soap_headers only if they are not null
        if (emailHeader636 != null) {

            org.apache.axiom.om.OMElement omElementemailHeader636 = toOM(emailHeader636,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
            addHeader(omElementemailHeader636, env);

        }

        // add the soap_headers only if they are not null
        if (ownerChangeOptions637 != null) {

            org.apache.axiom.om.OMElement omElementownerChangeOptions637 = toOM(ownerChangeOptions637,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "performQuickActions")));
            addHeader(omElementownerChangeOptions637, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.PerformQuickActionsResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultperformQuickActions((com.salesforce.soap.partner.PerformQuickActionsResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorperformQuickActions(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "performQuickActions"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "performQuickActions"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "performQuickActions"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                callback.receiveErrorperformQuickActions(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorperformQuickActions(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorperformQuickActions(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorperformQuickActions(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorperformQuickActions(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorperformQuickActions(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorperformQuickActions(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorperformQuickActions(f);
                            }
                        } else {
                            callback.receiveErrorperformQuickActions(f);
                        }
                    } else {
                        callback.receiveErrorperformQuickActions(f);
                    }
                } else {
                    callback.receiveErrorperformQuickActions(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorperformQuickActions(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[8].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[8].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Set a user's password
     * 
     * @see com.salesforce.soap.partner.SforceService#setPassword
     * @param setPassword639
     * 
     * @param sessionHeader640
     * 
     * @param callOptions641
     * 
     * @throws com.salesforce.soap.partner.InvalidIdFault :
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     * @throws com.salesforce.soap.partner.InvalidNewPasswordFault :
     */

    public com.salesforce.soap.partner.SetPasswordResponse setPassword(

    com.salesforce.soap.partner.SetPassword setPassword639, com.salesforce.soap.partner.SessionHeader sessionHeader640,
            com.salesforce.soap.partner.CallOptions callOptions641)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.InvalidIdFault, com.salesforce.soap.partner.UnexpectedErrorFault,
            com.salesforce.soap.partner.InvalidNewPasswordFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[9].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:setPasswordRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), setPassword639,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "setPassword")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "setPassword"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader640 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader640 = toOM(sessionHeader640,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "setPassword")));
                addHeader(omElementsessionHeader640, env);

            }

            // add the children only if the parameter is not null
            if (callOptions641 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions641 = toOM(callOptions641,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "setPassword")));
                addHeader(omElementcallOptions641, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.SetPasswordResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.SetPasswordResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap
                        .containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "setPassword"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "setPassword"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "setPassword"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                            throw (com.salesforce.soap.partner.InvalidIdFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.InvalidNewPasswordFault) {
                            throw (com.salesforce.soap.partner.InvalidNewPasswordFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Set a user's password
     * 
     * @see com.salesforce.soap.partner.SforceService#startsetPassword
     * @param setPassword639
     * 
     * @param sessionHeader640
     * 
     * @param callOptions641
     */
    public void startsetPassword(

    com.salesforce.soap.partner.SetPassword setPassword639, com.salesforce.soap.partner.SessionHeader sessionHeader640,
            com.salesforce.soap.partner.CallOptions callOptions641,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[9].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:setPasswordRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), setPassword639,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "setPassword")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "setPassword"));

        // add the soap_headers only if they are not null
        if (sessionHeader640 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader640 = toOM(sessionHeader640,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "setPassword")));
            addHeader(omElementsessionHeader640, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions641 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions641 = toOM(callOptions641,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "setPassword")));
            addHeader(omElementcallOptions641, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.SetPasswordResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultsetPassword((com.salesforce.soap.partner.SetPasswordResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorsetPassword(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "setPassword"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "setPassword"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "setPassword"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                                    callback.receiveErrorsetPassword((com.salesforce.soap.partner.InvalidIdFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrorsetPassword((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.InvalidNewPasswordFault) {
                                    callback.receiveErrorsetPassword((com.salesforce.soap.partner.InvalidNewPasswordFault) ex);
                                    return;
                                }

                                callback.receiveErrorsetPassword(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsetPassword(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsetPassword(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsetPassword(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsetPassword(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsetPassword(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsetPassword(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsetPassword(f);
                            }
                        } else {
                            callback.receiveErrorsetPassword(f);
                        }
                    } else {
                        callback.receiveErrorsetPassword(f);
                    }
                } else {
                    callback.receiveErrorsetPassword(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorsetPassword(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[9].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[9].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Logout the current user, invalidating the current session.
     * 
     * @see com.salesforce.soap.partner.SforceService#logout
     * @param logout643
     * 
     * @param sessionHeader644
     * 
     * @param callOptions645
     * 
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.LogoutResponse logout(

    com.salesforce.soap.partner.Logout logout643, com.salesforce.soap.partner.SessionHeader sessionHeader644,
            com.salesforce.soap.partner.CallOptions callOptions645)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[10].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:logoutRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), logout643,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "logout")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "logout"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader644 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader644 = toOM(sessionHeader644,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "logout")));
                addHeader(omElementsessionHeader644, env);

            }

            // add the children only if the parameter is not null
            if (callOptions645 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions645 = toOM(callOptions645,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "logout")));
                addHeader(omElementcallOptions645, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.LogoutResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.LogoutResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "logout"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "logout"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "logout"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Logout the current user, invalidating the current session.
     * 
     * @see com.salesforce.soap.partner.SforceService#startlogout
     * @param logout643
     * 
     * @param sessionHeader644
     * 
     * @param callOptions645
     */
    public void startlogout(

    com.salesforce.soap.partner.Logout logout643, com.salesforce.soap.partner.SessionHeader sessionHeader644,
            com.salesforce.soap.partner.CallOptions callOptions645,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[10].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:logoutRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), logout643,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "logout")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "logout"));

        // add the soap_headers only if they are not null
        if (sessionHeader644 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader644 = toOM(sessionHeader644,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "logout")));
            addHeader(omElementsessionHeader644, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions645 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions645 = toOM(callOptions645,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "logout")));
            addHeader(omElementcallOptions645, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.LogoutResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultlogout((com.salesforce.soap.partner.LogoutResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorlogout(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "logout"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "logout"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "logout"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrorlogout((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrorlogout(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorlogout(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorlogout(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorlogout(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorlogout(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorlogout(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorlogout(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorlogout(f);
                            }
                        } else {
                            callback.receiveErrorlogout(f);
                        }
                    } else {
                        callback.receiveErrorlogout(f);
                    }
                } else {
                    callback.receiveErrorlogout(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorlogout(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[10].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[10].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Get a set of sObjects
     * 
     * @see com.salesforce.soap.partner.SforceService#retrieve
     * @param retrieve647
     * 
     * @param sessionHeader648
     * 
     * @param callOptions649
     * 
     * @param queryOptions650
     * 
     * @param mruHeader651
     * 
     * @param packageVersionHeader652
     * 
     * @throws com.salesforce.soap.partner.InvalidSObjectFault :
     * @throws com.salesforce.soap.partner.MalformedQueryFault :
     * @throws com.salesforce.soap.partner.InvalidIdFault :
     * @throws com.salesforce.soap.partner.InvalidFieldFault :
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.RetrieveResponse retrieve(

    com.salesforce.soap.partner.Retrieve retrieve647, com.salesforce.soap.partner.SessionHeader sessionHeader648,
            com.salesforce.soap.partner.CallOptions callOptions649, com.salesforce.soap.partner.QueryOptions queryOptions650,
            com.salesforce.soap.partner.MruHeader mruHeader651,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader652)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.InvalidSObjectFault, com.salesforce.soap.partner.MalformedQueryFault,
            com.salesforce.soap.partner.InvalidIdFault, com.salesforce.soap.partner.InvalidFieldFault,
            com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[11].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:retrieveRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), retrieve647,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "retrieve")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "retrieve"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader648 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader648 = toOM(sessionHeader648,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "retrieve")));
                addHeader(omElementsessionHeader648, env);

            }

            // add the children only if the parameter is not null
            if (callOptions649 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions649 = toOM(callOptions649,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "retrieve")));
                addHeader(omElementcallOptions649, env);

            }

            // add the children only if the parameter is not null
            if (queryOptions650 != null) {

                org.apache.axiom.om.OMElement omElementqueryOptions650 = toOM(queryOptions650,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "retrieve")));
                addHeader(omElementqueryOptions650, env);

            }

            // add the children only if the parameter is not null
            if (mruHeader651 != null) {

                org.apache.axiom.om.OMElement omElementmruHeader651 = toOM(mruHeader651,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "retrieve")));
                addHeader(omElementmruHeader651, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader652 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader652 = toOM(packageVersionHeader652,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "retrieve")));
                addHeader(omElementpackageVersionHeader652, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.RetrieveResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.RetrieveResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "retrieve"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "retrieve"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "retrieve"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                            throw (com.salesforce.soap.partner.InvalidSObjectFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.MalformedQueryFault) {
                            throw (com.salesforce.soap.partner.MalformedQueryFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                            throw (com.salesforce.soap.partner.InvalidIdFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.InvalidFieldFault) {
                            throw (com.salesforce.soap.partner.InvalidFieldFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Get a set of sObjects
     * 
     * @see com.salesforce.soap.partner.SforceService#startretrieve
     * @param retrieve647
     * 
     * @param sessionHeader648
     * 
     * @param callOptions649
     * 
     * @param queryOptions650
     * 
     * @param mruHeader651
     * 
     * @param packageVersionHeader652
     */
    public void startretrieve(

    com.salesforce.soap.partner.Retrieve retrieve647, com.salesforce.soap.partner.SessionHeader sessionHeader648,
            com.salesforce.soap.partner.CallOptions callOptions649, com.salesforce.soap.partner.QueryOptions queryOptions650,
            com.salesforce.soap.partner.MruHeader mruHeader651,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader652,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[11].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:retrieveRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), retrieve647,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "retrieve")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "retrieve"));

        // add the soap_headers only if they are not null
        if (sessionHeader648 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader648 = toOM(sessionHeader648,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "retrieve")));
            addHeader(omElementsessionHeader648, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions649 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions649 = toOM(callOptions649,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "retrieve")));
            addHeader(omElementcallOptions649, env);

        }

        // add the soap_headers only if they are not null
        if (queryOptions650 != null) {

            org.apache.axiom.om.OMElement omElementqueryOptions650 = toOM(queryOptions650,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "retrieve")));
            addHeader(omElementqueryOptions650, env);

        }

        // add the soap_headers only if they are not null
        if (mruHeader651 != null) {

            org.apache.axiom.om.OMElement omElementmruHeader651 = toOM(mruHeader651,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "retrieve")));
            addHeader(omElementmruHeader651, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader652 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader652 = toOM(packageVersionHeader652,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "retrieve")));
            addHeader(omElementpackageVersionHeader652, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.RetrieveResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultretrieve((com.salesforce.soap.partner.RetrieveResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorretrieve(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "retrieve"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "retrieve"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "retrieve"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                                    callback.receiveErrorretrieve((com.salesforce.soap.partner.InvalidSObjectFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.MalformedQueryFault) {
                                    callback.receiveErrorretrieve((com.salesforce.soap.partner.MalformedQueryFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                                    callback.receiveErrorretrieve((com.salesforce.soap.partner.InvalidIdFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.InvalidFieldFault) {
                                    callback.receiveErrorretrieve((com.salesforce.soap.partner.InvalidFieldFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrorretrieve((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrorretrieve(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorretrieve(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorretrieve(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorretrieve(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorretrieve(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorretrieve(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorretrieve(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorretrieve(f);
                            }
                        } else {
                            callback.receiveErrorretrieve(f);
                        }
                    } else {
                        callback.receiveErrorretrieve(f);
                    }
                } else {
                    callback.receiveErrorretrieve(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorretrieve(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[11].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[11].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Create a Query Cursor, including deleted sObjects
     * 
     * @see com.salesforce.soap.partner.SforceService#queryAll
     * @param queryAll654
     * 
     * @param sessionHeader655
     * 
     * @param callOptions656
     * 
     * @param queryOptions657
     * 
     * @throws com.salesforce.soap.partner.InvalidSObjectFault :
     * @throws com.salesforce.soap.partner.MalformedQueryFault :
     * @throws com.salesforce.soap.partner.InvalidIdFault :
     * @throws com.salesforce.soap.partner.InvalidFieldFault :
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     * @throws com.salesforce.soap.partner.InvalidQueryLocatorFault :
     */

    public com.salesforce.soap.partner.QueryAllResponse queryAll(

    com.salesforce.soap.partner.QueryAll queryAll654, com.salesforce.soap.partner.SessionHeader sessionHeader655,
            com.salesforce.soap.partner.CallOptions callOptions656, com.salesforce.soap.partner.QueryOptions queryOptions657)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.InvalidSObjectFault, com.salesforce.soap.partner.MalformedQueryFault,
            com.salesforce.soap.partner.InvalidIdFault, com.salesforce.soap.partner.InvalidFieldFault,
            com.salesforce.soap.partner.UnexpectedErrorFault, com.salesforce.soap.partner.InvalidQueryLocatorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[12].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:queryAllRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), queryAll654,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "queryAll")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "queryAll"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader655 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader655 = toOM(sessionHeader655,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "queryAll")));
                addHeader(omElementsessionHeader655, env);

            }

            // add the children only if the parameter is not null
            if (callOptions656 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions656 = toOM(callOptions656,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "queryAll")));
                addHeader(omElementcallOptions656, env);

            }

            // add the children only if the parameter is not null
            if (queryOptions657 != null) {

                org.apache.axiom.om.OMElement omElementqueryOptions657 = toOM(queryOptions657,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "queryAll")));
                addHeader(omElementqueryOptions657, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.QueryAllResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.QueryAllResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "queryAll"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "queryAll"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "queryAll"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                            throw (com.salesforce.soap.partner.InvalidSObjectFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.MalformedQueryFault) {
                            throw (com.salesforce.soap.partner.MalformedQueryFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                            throw (com.salesforce.soap.partner.InvalidIdFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.InvalidFieldFault) {
                            throw (com.salesforce.soap.partner.InvalidFieldFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.InvalidQueryLocatorFault) {
                            throw (com.salesforce.soap.partner.InvalidQueryLocatorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Create a Query Cursor, including deleted sObjects
     * 
     * @see com.salesforce.soap.partner.SforceService#startqueryAll
     * @param queryAll654
     * 
     * @param sessionHeader655
     * 
     * @param callOptions656
     * 
     * @param queryOptions657
     */
    public void startqueryAll(

    com.salesforce.soap.partner.QueryAll queryAll654, com.salesforce.soap.partner.SessionHeader sessionHeader655,
            com.salesforce.soap.partner.CallOptions callOptions656, com.salesforce.soap.partner.QueryOptions queryOptions657,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[12].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:queryAllRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), queryAll654,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "queryAll")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "queryAll"));

        // add the soap_headers only if they are not null
        if (sessionHeader655 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader655 = toOM(sessionHeader655,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "queryAll")));
            addHeader(omElementsessionHeader655, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions656 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions656 = toOM(callOptions656,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "queryAll")));
            addHeader(omElementcallOptions656, env);

        }

        // add the soap_headers only if they are not null
        if (queryOptions657 != null) {

            org.apache.axiom.om.OMElement omElementqueryOptions657 = toOM(queryOptions657,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "queryAll")));
            addHeader(omElementqueryOptions657, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.QueryAllResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultqueryAll((com.salesforce.soap.partner.QueryAllResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorqueryAll(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "queryAll"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "queryAll"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "queryAll"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                                    callback.receiveErrorqueryAll((com.salesforce.soap.partner.InvalidSObjectFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.MalformedQueryFault) {
                                    callback.receiveErrorqueryAll((com.salesforce.soap.partner.MalformedQueryFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                                    callback.receiveErrorqueryAll((com.salesforce.soap.partner.InvalidIdFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.InvalidFieldFault) {
                                    callback.receiveErrorqueryAll((com.salesforce.soap.partner.InvalidFieldFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrorqueryAll((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.InvalidQueryLocatorFault) {
                                    callback.receiveErrorqueryAll((com.salesforce.soap.partner.InvalidQueryLocatorFault) ex);
                                    return;
                                }

                                callback.receiveErrorqueryAll(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorqueryAll(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorqueryAll(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorqueryAll(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorqueryAll(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorqueryAll(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorqueryAll(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorqueryAll(f);
                            }
                        } else {
                            callback.receiveErrorqueryAll(f);
                        }
                    } else {
                        callback.receiveErrorqueryAll(f);
                    }
                } else {
                    callback.receiveErrorqueryAll(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorqueryAll(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[12].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[12].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Undelete a set of sObjects
     * 
     * @see com.salesforce.soap.partner.SforceService#undelete
     * @param undelete659
     * 
     * @param sessionHeader660
     * 
     * @param callOptions661
     * 
     * @param allowFieldTruncationHeader662
     * 
     * @param disableFeedTrackingHeader663
     * 
     * @param streamingEnabledHeader664
     * 
     * @param allOrNoneHeader665
     * 
     * @param duplicateRuleHeader666
     * 
     * @param localeOptions667
     * 
     * @param debuggingHeader668
     * 
     * @param packageVersionHeader669
     * 
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.UndeleteResponse undelete(

    com.salesforce.soap.partner.Undelete undelete659, com.salesforce.soap.partner.SessionHeader sessionHeader660,
            com.salesforce.soap.partner.CallOptions callOptions661,
            com.salesforce.soap.partner.AllowFieldTruncationHeader allowFieldTruncationHeader662,
            com.salesforce.soap.partner.DisableFeedTrackingHeader disableFeedTrackingHeader663,
            com.salesforce.soap.partner.StreamingEnabledHeader streamingEnabledHeader664,
            com.salesforce.soap.partner.AllOrNoneHeader allOrNoneHeader665,
            com.salesforce.soap.partner.DuplicateRuleHeader duplicateRuleHeader666,
            com.salesforce.soap.partner.LocaleOptions localeOptions667,
            com.salesforce.soap.partner.DebuggingHeader debuggingHeader668,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader669)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[13].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:undeleteRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), undelete659,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "undelete")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "undelete"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader660 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader660 = toOM(sessionHeader660,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "undelete")));
                addHeader(omElementsessionHeader660, env);

            }

            // add the children only if the parameter is not null
            if (callOptions661 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions661 = toOM(callOptions661,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "undelete")));
                addHeader(omElementcallOptions661, env);

            }

            // add the children only if the parameter is not null
            if (allowFieldTruncationHeader662 != null) {

                org.apache.axiom.om.OMElement omElementallowFieldTruncationHeader662 = toOM(allowFieldTruncationHeader662,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "undelete")));
                addHeader(omElementallowFieldTruncationHeader662, env);

            }

            // add the children only if the parameter is not null
            if (disableFeedTrackingHeader663 != null) {

                org.apache.axiom.om.OMElement omElementdisableFeedTrackingHeader663 = toOM(disableFeedTrackingHeader663,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "undelete")));
                addHeader(omElementdisableFeedTrackingHeader663, env);

            }

            // add the children only if the parameter is not null
            if (streamingEnabledHeader664 != null) {

                org.apache.axiom.om.OMElement omElementstreamingEnabledHeader664 = toOM(streamingEnabledHeader664,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "undelete")));
                addHeader(omElementstreamingEnabledHeader664, env);

            }

            // add the children only if the parameter is not null
            if (allOrNoneHeader665 != null) {

                org.apache.axiom.om.OMElement omElementallOrNoneHeader665 = toOM(allOrNoneHeader665,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "undelete")));
                addHeader(omElementallOrNoneHeader665, env);

            }

            // add the children only if the parameter is not null
            if (duplicateRuleHeader666 != null) {

                org.apache.axiom.om.OMElement omElementduplicateRuleHeader666 = toOM(duplicateRuleHeader666,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "undelete")));
                addHeader(omElementduplicateRuleHeader666, env);

            }

            // add the children only if the parameter is not null
            if (localeOptions667 != null) {

                org.apache.axiom.om.OMElement omElementlocaleOptions667 = toOM(localeOptions667,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "undelete")));
                addHeader(omElementlocaleOptions667, env);

            }

            // add the children only if the parameter is not null
            if (debuggingHeader668 != null) {

                org.apache.axiom.om.OMElement omElementdebuggingHeader668 = toOM(debuggingHeader668,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "undelete")));
                addHeader(omElementdebuggingHeader668, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader669 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader669 = toOM(packageVersionHeader669,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "undelete")));
                addHeader(omElementpackageVersionHeader669, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.UndeleteResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.UndeleteResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "undelete"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "undelete"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "undelete"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Undelete a set of sObjects
     * 
     * @see com.salesforce.soap.partner.SforceService#startundelete
     * @param undelete659
     * 
     * @param sessionHeader660
     * 
     * @param callOptions661
     * 
     * @param allowFieldTruncationHeader662
     * 
     * @param disableFeedTrackingHeader663
     * 
     * @param streamingEnabledHeader664
     * 
     * @param allOrNoneHeader665
     * 
     * @param duplicateRuleHeader666
     * 
     * @param localeOptions667
     * 
     * @param debuggingHeader668
     * 
     * @param packageVersionHeader669
     */
    public void startundelete(

    com.salesforce.soap.partner.Undelete undelete659, com.salesforce.soap.partner.SessionHeader sessionHeader660,
            com.salesforce.soap.partner.CallOptions callOptions661,
            com.salesforce.soap.partner.AllowFieldTruncationHeader allowFieldTruncationHeader662,
            com.salesforce.soap.partner.DisableFeedTrackingHeader disableFeedTrackingHeader663,
            com.salesforce.soap.partner.StreamingEnabledHeader streamingEnabledHeader664,
            com.salesforce.soap.partner.AllOrNoneHeader allOrNoneHeader665,
            com.salesforce.soap.partner.DuplicateRuleHeader duplicateRuleHeader666,
            com.salesforce.soap.partner.LocaleOptions localeOptions667,
            com.salesforce.soap.partner.DebuggingHeader debuggingHeader668,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader669,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[13].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:undeleteRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), undelete659,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "undelete")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "undelete"));

        // add the soap_headers only if they are not null
        if (sessionHeader660 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader660 = toOM(sessionHeader660,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "undelete")));
            addHeader(omElementsessionHeader660, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions661 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions661 = toOM(callOptions661,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "undelete")));
            addHeader(omElementcallOptions661, env);

        }

        // add the soap_headers only if they are not null
        if (allowFieldTruncationHeader662 != null) {

            org.apache.axiom.om.OMElement omElementallowFieldTruncationHeader662 = toOM(allowFieldTruncationHeader662,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "undelete")));
            addHeader(omElementallowFieldTruncationHeader662, env);

        }

        // add the soap_headers only if they are not null
        if (disableFeedTrackingHeader663 != null) {

            org.apache.axiom.om.OMElement omElementdisableFeedTrackingHeader663 = toOM(disableFeedTrackingHeader663,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "undelete")));
            addHeader(omElementdisableFeedTrackingHeader663, env);

        }

        // add the soap_headers only if they are not null
        if (streamingEnabledHeader664 != null) {

            org.apache.axiom.om.OMElement omElementstreamingEnabledHeader664 = toOM(streamingEnabledHeader664,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "undelete")));
            addHeader(omElementstreamingEnabledHeader664, env);

        }

        // add the soap_headers only if they are not null
        if (allOrNoneHeader665 != null) {

            org.apache.axiom.om.OMElement omElementallOrNoneHeader665 = toOM(allOrNoneHeader665,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "undelete")));
            addHeader(omElementallOrNoneHeader665, env);

        }

        // add the soap_headers only if they are not null
        if (duplicateRuleHeader666 != null) {

            org.apache.axiom.om.OMElement omElementduplicateRuleHeader666 = toOM(duplicateRuleHeader666,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "undelete")));
            addHeader(omElementduplicateRuleHeader666, env);

        }

        // add the soap_headers only if they are not null
        if (localeOptions667 != null) {

            org.apache.axiom.om.OMElement omElementlocaleOptions667 = toOM(localeOptions667,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "undelete")));
            addHeader(omElementlocaleOptions667, env);

        }

        // add the soap_headers only if they are not null
        if (debuggingHeader668 != null) {

            org.apache.axiom.om.OMElement omElementdebuggingHeader668 = toOM(debuggingHeader668,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "undelete")));
            addHeader(omElementdebuggingHeader668, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader669 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader669 = toOM(packageVersionHeader669,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "undelete")));
            addHeader(omElementpackageVersionHeader669, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.UndeleteResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultundelete((com.salesforce.soap.partner.UndeleteResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorundelete(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "undelete"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "undelete"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "undelete"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrorundelete((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrorundelete(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorundelete(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorundelete(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorundelete(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorundelete(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorundelete(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorundelete(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorundelete(f);
                            }
                        } else {
                            callback.receiveErrorundelete(f);
                        }
                    } else {
                        callback.receiveErrorundelete(f);
                    }
                } else {
                    callback.receiveErrorundelete(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorundelete(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[13].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[13].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Get the IDs for updated sObjects
     * 
     * @see com.salesforce.soap.partner.SforceService#getUpdated
     * @param getUpdated671
     * 
     * @param sessionHeader672
     * 
     * @param callOptions673
     * 
     * @throws com.salesforce.soap.partner.InvalidSObjectFault :
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.GetUpdatedResponse getUpdated(

    com.salesforce.soap.partner.GetUpdated getUpdated671, com.salesforce.soap.partner.SessionHeader sessionHeader672,
            com.salesforce.soap.partner.CallOptions callOptions673)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.InvalidSObjectFault, com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[14].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:getUpdatedRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), getUpdated671,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getUpdated")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getUpdated"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader672 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader672 = toOM(sessionHeader672,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getUpdated")));
                addHeader(omElementsessionHeader672, env);

            }

            // add the children only if the parameter is not null
            if (callOptions673 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions673 = toOM(callOptions673,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getUpdated")));
                addHeader(omElementcallOptions673, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.GetUpdatedResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.GetUpdatedResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "getUpdated"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "getUpdated"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "getUpdated"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                            throw (com.salesforce.soap.partner.InvalidSObjectFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Get the IDs for updated sObjects
     * 
     * @see com.salesforce.soap.partner.SforceService#startgetUpdated
     * @param getUpdated671
     * 
     * @param sessionHeader672
     * 
     * @param callOptions673
     */
    public void startgetUpdated(

    com.salesforce.soap.partner.GetUpdated getUpdated671, com.salesforce.soap.partner.SessionHeader sessionHeader672,
            com.salesforce.soap.partner.CallOptions callOptions673,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[14].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:getUpdatedRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), getUpdated671,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getUpdated")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getUpdated"));

        // add the soap_headers only if they are not null
        if (sessionHeader672 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader672 = toOM(sessionHeader672,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getUpdated")));
            addHeader(omElementsessionHeader672, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions673 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions673 = toOM(callOptions673,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getUpdated")));
            addHeader(omElementcallOptions673, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.GetUpdatedResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultgetUpdated((com.salesforce.soap.partner.GetUpdatedResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorgetUpdated(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "getUpdated"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "getUpdated"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "getUpdated"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                                    callback.receiveErrorgetUpdated((com.salesforce.soap.partner.InvalidSObjectFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrorgetUpdated((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrorgetUpdated(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetUpdated(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetUpdated(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetUpdated(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetUpdated(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetUpdated(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetUpdated(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetUpdated(f);
                            }
                        } else {
                            callback.receiveErrorgetUpdated(f);
                        }
                    } else {
                        callback.receiveErrorgetUpdated(f);
                    }
                } else {
                    callback.receiveErrorgetUpdated(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorgetUpdated(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[14].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[14].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Create a set of new sObjects
     * 
     * @see com.salesforce.soap.partner.SforceService#create
     * @param create675
     * 
     * @param sessionHeader676
     * 
     * @param callOptions677
     * 
     * @param assignmentRuleHeader678
     * 
     * @param mruHeader679
     * 
     * @param allowFieldTruncationHeader680
     * 
     * @param disableFeedTrackingHeader681
     * 
     * @param streamingEnabledHeader682
     * 
     * @param allOrNoneHeader683
     * 
     * @param duplicateRuleHeader684
     * 
     * @param localeOptions685
     * 
     * @param debuggingHeader686
     * 
     * @param packageVersionHeader687
     * 
     * @param emailHeader688
     * 
     * @throws com.salesforce.soap.partner.InvalidSObjectFault :
     * @throws com.salesforce.soap.partner.InvalidIdFault :
     * @throws com.salesforce.soap.partner.InvalidFieldFault :
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.CreateResponse create(

    com.salesforce.soap.partner.Create create675, com.salesforce.soap.partner.SessionHeader sessionHeader676,
            com.salesforce.soap.partner.CallOptions callOptions677,
            com.salesforce.soap.partner.AssignmentRuleHeader assignmentRuleHeader678,
            com.salesforce.soap.partner.MruHeader mruHeader679,
            com.salesforce.soap.partner.AllowFieldTruncationHeader allowFieldTruncationHeader680,
            com.salesforce.soap.partner.DisableFeedTrackingHeader disableFeedTrackingHeader681,
            com.salesforce.soap.partner.StreamingEnabledHeader streamingEnabledHeader682,
            com.salesforce.soap.partner.AllOrNoneHeader allOrNoneHeader683,
            com.salesforce.soap.partner.DuplicateRuleHeader duplicateRuleHeader684,
            com.salesforce.soap.partner.LocaleOptions localeOptions685,
            com.salesforce.soap.partner.DebuggingHeader debuggingHeader686,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader687,
            com.salesforce.soap.partner.EmailHeader emailHeader688)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.InvalidSObjectFault, com.salesforce.soap.partner.InvalidIdFault,
            com.salesforce.soap.partner.InvalidFieldFault, com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[15].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:createRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), create675,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader676 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader676 = toOM(sessionHeader676,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
                addHeader(omElementsessionHeader676, env);

            }

            // add the children only if the parameter is not null
            if (callOptions677 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions677 = toOM(callOptions677,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
                addHeader(omElementcallOptions677, env);

            }

            // add the children only if the parameter is not null
            if (assignmentRuleHeader678 != null) {

                org.apache.axiom.om.OMElement omElementassignmentRuleHeader678 = toOM(assignmentRuleHeader678,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
                addHeader(omElementassignmentRuleHeader678, env);

            }

            // add the children only if the parameter is not null
            if (mruHeader679 != null) {

                org.apache.axiom.om.OMElement omElementmruHeader679 = toOM(mruHeader679,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
                addHeader(omElementmruHeader679, env);

            }

            // add the children only if the parameter is not null
            if (allowFieldTruncationHeader680 != null) {

                org.apache.axiom.om.OMElement omElementallowFieldTruncationHeader680 = toOM(allowFieldTruncationHeader680,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
                addHeader(omElementallowFieldTruncationHeader680, env);

            }

            // add the children only if the parameter is not null
            if (disableFeedTrackingHeader681 != null) {

                org.apache.axiom.om.OMElement omElementdisableFeedTrackingHeader681 = toOM(disableFeedTrackingHeader681,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
                addHeader(omElementdisableFeedTrackingHeader681, env);

            }

            // add the children only if the parameter is not null
            if (streamingEnabledHeader682 != null) {

                org.apache.axiom.om.OMElement omElementstreamingEnabledHeader682 = toOM(streamingEnabledHeader682,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
                addHeader(omElementstreamingEnabledHeader682, env);

            }

            // add the children only if the parameter is not null
            if (allOrNoneHeader683 != null) {

                org.apache.axiom.om.OMElement omElementallOrNoneHeader683 = toOM(allOrNoneHeader683,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
                addHeader(omElementallOrNoneHeader683, env);

            }

            // add the children only if the parameter is not null
            if (duplicateRuleHeader684 != null) {

                org.apache.axiom.om.OMElement omElementduplicateRuleHeader684 = toOM(duplicateRuleHeader684,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
                addHeader(omElementduplicateRuleHeader684, env);

            }

            // add the children only if the parameter is not null
            if (localeOptions685 != null) {

                org.apache.axiom.om.OMElement omElementlocaleOptions685 = toOM(localeOptions685,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
                addHeader(omElementlocaleOptions685, env);

            }

            // add the children only if the parameter is not null
            if (debuggingHeader686 != null) {

                org.apache.axiom.om.OMElement omElementdebuggingHeader686 = toOM(debuggingHeader686,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
                addHeader(omElementdebuggingHeader686, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader687 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader687 = toOM(packageVersionHeader687,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
                addHeader(omElementpackageVersionHeader687, env);

            }

            // add the children only if the parameter is not null
            if (emailHeader688 != null) {

                org.apache.axiom.om.OMElement omElementemailHeader688 = toOM(emailHeader688,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
                addHeader(omElementemailHeader688, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.CreateResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.CreateResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "create"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "create"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "create"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                            throw (com.salesforce.soap.partner.InvalidSObjectFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                            throw (com.salesforce.soap.partner.InvalidIdFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.InvalidFieldFault) {
                            throw (com.salesforce.soap.partner.InvalidFieldFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Create a set of new sObjects
     * 
     * @see com.salesforce.soap.partner.SforceService#startcreate
     * @param create675
     * 
     * @param sessionHeader676
     * 
     * @param callOptions677
     * 
     * @param assignmentRuleHeader678
     * 
     * @param mruHeader679
     * 
     * @param allowFieldTruncationHeader680
     * 
     * @param disableFeedTrackingHeader681
     * 
     * @param streamingEnabledHeader682
     * 
     * @param allOrNoneHeader683
     * 
     * @param duplicateRuleHeader684
     * 
     * @param localeOptions685
     * 
     * @param debuggingHeader686
     * 
     * @param packageVersionHeader687
     * 
     * @param emailHeader688
     */
    public void startcreate(

    com.salesforce.soap.partner.Create create675, com.salesforce.soap.partner.SessionHeader sessionHeader676,
            com.salesforce.soap.partner.CallOptions callOptions677,
            com.salesforce.soap.partner.AssignmentRuleHeader assignmentRuleHeader678,
            com.salesforce.soap.partner.MruHeader mruHeader679,
            com.salesforce.soap.partner.AllowFieldTruncationHeader allowFieldTruncationHeader680,
            com.salesforce.soap.partner.DisableFeedTrackingHeader disableFeedTrackingHeader681,
            com.salesforce.soap.partner.StreamingEnabledHeader streamingEnabledHeader682,
            com.salesforce.soap.partner.AllOrNoneHeader allOrNoneHeader683,
            com.salesforce.soap.partner.DuplicateRuleHeader duplicateRuleHeader684,
            com.salesforce.soap.partner.LocaleOptions localeOptions685,
            com.salesforce.soap.partner.DebuggingHeader debuggingHeader686,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader687,
            com.salesforce.soap.partner.EmailHeader emailHeader688,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[15].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:createRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), create675,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create"));

        // add the soap_headers only if they are not null
        if (sessionHeader676 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader676 = toOM(sessionHeader676,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
            addHeader(omElementsessionHeader676, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions677 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions677 = toOM(callOptions677,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
            addHeader(omElementcallOptions677, env);

        }

        // add the soap_headers only if they are not null
        if (assignmentRuleHeader678 != null) {

            org.apache.axiom.om.OMElement omElementassignmentRuleHeader678 = toOM(assignmentRuleHeader678,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
            addHeader(omElementassignmentRuleHeader678, env);

        }

        // add the soap_headers only if they are not null
        if (mruHeader679 != null) {

            org.apache.axiom.om.OMElement omElementmruHeader679 = toOM(mruHeader679,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
            addHeader(omElementmruHeader679, env);

        }

        // add the soap_headers only if they are not null
        if (allowFieldTruncationHeader680 != null) {

            org.apache.axiom.om.OMElement omElementallowFieldTruncationHeader680 = toOM(allowFieldTruncationHeader680,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
            addHeader(omElementallowFieldTruncationHeader680, env);

        }

        // add the soap_headers only if they are not null
        if (disableFeedTrackingHeader681 != null) {

            org.apache.axiom.om.OMElement omElementdisableFeedTrackingHeader681 = toOM(disableFeedTrackingHeader681,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
            addHeader(omElementdisableFeedTrackingHeader681, env);

        }

        // add the soap_headers only if they are not null
        if (streamingEnabledHeader682 != null) {

            org.apache.axiom.om.OMElement omElementstreamingEnabledHeader682 = toOM(streamingEnabledHeader682,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
            addHeader(omElementstreamingEnabledHeader682, env);

        }

        // add the soap_headers only if they are not null
        if (allOrNoneHeader683 != null) {

            org.apache.axiom.om.OMElement omElementallOrNoneHeader683 = toOM(allOrNoneHeader683,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
            addHeader(omElementallOrNoneHeader683, env);

        }

        // add the soap_headers only if they are not null
        if (duplicateRuleHeader684 != null) {

            org.apache.axiom.om.OMElement omElementduplicateRuleHeader684 = toOM(duplicateRuleHeader684,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
            addHeader(omElementduplicateRuleHeader684, env);

        }

        // add the soap_headers only if they are not null
        if (localeOptions685 != null) {

            org.apache.axiom.om.OMElement omElementlocaleOptions685 = toOM(localeOptions685,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
            addHeader(omElementlocaleOptions685, env);

        }

        // add the soap_headers only if they are not null
        if (debuggingHeader686 != null) {

            org.apache.axiom.om.OMElement omElementdebuggingHeader686 = toOM(debuggingHeader686,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
            addHeader(omElementdebuggingHeader686, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader687 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader687 = toOM(packageVersionHeader687,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
            addHeader(omElementpackageVersionHeader687, env);

        }

        // add the soap_headers only if they are not null
        if (emailHeader688 != null) {

            org.apache.axiom.om.OMElement omElementemailHeader688 = toOM(emailHeader688,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "create")));
            addHeader(omElementemailHeader688, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.CreateResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultcreate((com.salesforce.soap.partner.CreateResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorcreate(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "create"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "create"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "create"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                                    callback.receiveErrorcreate((com.salesforce.soap.partner.InvalidSObjectFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                                    callback.receiveErrorcreate((com.salesforce.soap.partner.InvalidIdFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.InvalidFieldFault) {
                                    callback.receiveErrorcreate((com.salesforce.soap.partner.InvalidFieldFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrorcreate((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrorcreate(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorcreate(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorcreate(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorcreate(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorcreate(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorcreate(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorcreate(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorcreate(f);
                            }
                        } else {
                            callback.receiveErrorcreate(f);
                        }
                    } else {
                        callback.receiveErrorcreate(f);
                    }
                } else {
                    callback.receiveErrorcreate(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorcreate(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[15].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[15].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Describe the details of a series of quick actions available for the given contextType
     * 
     * @see com.salesforce.soap.partner.SforceService#describeAvailableQuickActions
     * @param describeAvailableQuickActions690
     * 
     * @param sessionHeader691
     * 
     * @param callOptions692
     * 
     * @param packageVersionHeader693
     * 
     * @param localeOptions694
     */

    public com.salesforce.soap.partner.DescribeAvailableQuickActionsResponse describeAvailableQuickActions(

    com.salesforce.soap.partner.DescribeAvailableQuickActions describeAvailableQuickActions690,
            com.salesforce.soap.partner.SessionHeader sessionHeader691, com.salesforce.soap.partner.CallOptions callOptions692,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader693,
            com.salesforce.soap.partner.LocaleOptions localeOptions694)

    throws java.rmi.RemoteException

    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[16].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeAvailableQuickActionsRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(
                    getFactory(_operationClient.getOptions().getSoapVersionURI()),
                    describeAvailableQuickActions690,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAvailableQuickActions")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAvailableQuickActions"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader691 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader691 = toOM(sessionHeader691,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com",
                                "describeAvailableQuickActions")));
                addHeader(omElementsessionHeader691, env);

            }

            // add the children only if the parameter is not null
            if (callOptions692 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions692 = toOM(callOptions692,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com",
                                "describeAvailableQuickActions")));
                addHeader(omElementcallOptions692, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader693 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader693 = toOM(packageVersionHeader693,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com",
                                "describeAvailableQuickActions")));
                addHeader(omElementpackageVersionHeader693, env);

            }

            // add the children only if the parameter is not null
            if (localeOptions694 != null) {

                org.apache.axiom.om.OMElement omElementlocaleOptions694 = toOM(localeOptions694,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com",
                                "describeAvailableQuickActions")));
                addHeader(omElementlocaleOptions694, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.DescribeAvailableQuickActionsResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.DescribeAvailableQuickActionsResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "describeAvailableQuickActions"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeAvailableQuickActions"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeAvailableQuickActions"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Describe the details of a series of quick actions available for the
     * given contextType
     * 
     * @see com.salesforce.soap.partner.SforceService#startdescribeAvailableQuickActions
     * @param describeAvailableQuickActions690
     * 
     * @param sessionHeader691
     * 
     * @param callOptions692
     * 
     * @param packageVersionHeader693
     * 
     * @param localeOptions694
     */
    public void startdescribeAvailableQuickActions(

    com.salesforce.soap.partner.DescribeAvailableQuickActions describeAvailableQuickActions690,
            com.salesforce.soap.partner.SessionHeader sessionHeader691, com.salesforce.soap.partner.CallOptions callOptions692,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader693,
            com.salesforce.soap.partner.LocaleOptions localeOptions694,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[16].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeAvailableQuickActionsRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeAvailableQuickActions690,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAvailableQuickActions")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAvailableQuickActions"));

        // add the soap_headers only if they are not null
        if (sessionHeader691 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader691 = toOM(
                    sessionHeader691,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAvailableQuickActions")));
            addHeader(omElementsessionHeader691, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions692 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions692 = toOM(
                    callOptions692,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAvailableQuickActions")));
            addHeader(omElementcallOptions692, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader693 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader693 = toOM(
                    packageVersionHeader693,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAvailableQuickActions")));
            addHeader(omElementpackageVersionHeader693, env);

        }

        // add the soap_headers only if they are not null
        if (localeOptions694 != null) {

            org.apache.axiom.om.OMElement omElementlocaleOptions694 = toOM(
                    localeOptions694,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAvailableQuickActions")));
            addHeader(omElementlocaleOptions694, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.DescribeAvailableQuickActionsResponse.class,
                            getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultdescribeAvailableQuickActions((com.salesforce.soap.partner.DescribeAvailableQuickActionsResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrordescribeAvailableQuickActions(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "describeAvailableQuickActions"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                                "describeAvailableQuickActions"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                                "describeAvailableQuickActions"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                callback.receiveErrordescribeAvailableQuickActions(new java.rmi.RemoteException(ex.getMessage(),
                                        ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeAvailableQuickActions(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeAvailableQuickActions(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeAvailableQuickActions(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeAvailableQuickActions(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeAvailableQuickActions(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeAvailableQuickActions(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeAvailableQuickActions(f);
                            }
                        } else {
                            callback.receiveErrordescribeAvailableQuickActions(f);
                        }
                    } else {
                        callback.receiveErrordescribeAvailableQuickActions(f);
                    }
                } else {
                    callback.receiveErrordescribeAvailableQuickActions(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrordescribeAvailableQuickActions(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[16].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[16].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Send outbound email
     * 
     * @see com.salesforce.soap.partner.SforceService#sendEmail
     * @param sendEmail696
     * 
     * @param sessionHeader697
     * 
     * @param callOptions698
     * 
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.SendEmailResponse sendEmail(

    com.salesforce.soap.partner.SendEmail sendEmail696, com.salesforce.soap.partner.SessionHeader sessionHeader697,
            com.salesforce.soap.partner.CallOptions callOptions698)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[17].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:sendEmailRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), sendEmail696,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "sendEmail")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "sendEmail"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader697 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader697 = toOM(sessionHeader697,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "sendEmail")));
                addHeader(omElementsessionHeader697, env);

            }

            // add the children only if the parameter is not null
            if (callOptions698 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions698 = toOM(callOptions698,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "sendEmail")));
                addHeader(omElementcallOptions698, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.SendEmailResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.SendEmailResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "sendEmail"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "sendEmail"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "sendEmail"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Send outbound email
     * 
     * @see com.salesforce.soap.partner.SforceService#startsendEmail
     * @param sendEmail696
     * 
     * @param sessionHeader697
     * 
     * @param callOptions698
     */
    public void startsendEmail(

    com.salesforce.soap.partner.SendEmail sendEmail696, com.salesforce.soap.partner.SessionHeader sessionHeader697,
            com.salesforce.soap.partner.CallOptions callOptions698,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[17].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:sendEmailRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), sendEmail696,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "sendEmail")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "sendEmail"));

        // add the soap_headers only if they are not null
        if (sessionHeader697 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader697 = toOM(sessionHeader697,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "sendEmail")));
            addHeader(omElementsessionHeader697, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions698 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions698 = toOM(callOptions698,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "sendEmail")));
            addHeader(omElementcallOptions698, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.SendEmailResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultsendEmail((com.salesforce.soap.partner.SendEmailResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorsendEmail(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "sendEmail"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "sendEmail"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "sendEmail"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrorsendEmail((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrorsendEmail(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsendEmail(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsendEmail(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsendEmail(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsendEmail(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsendEmail(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsendEmail(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsendEmail(f);
                            }
                        } else {
                            callback.receiveErrorsendEmail(f);
                        }
                    } else {
                        callback.receiveErrorsendEmail(f);
                    }
                } else {
                    callback.receiveErrorsendEmail(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorsendEmail(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[17].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[17].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Search for sObjects
     * 
     * @see com.salesforce.soap.partner.SforceService#search
     * @param search700
     * 
     * @param sessionHeader701
     * 
     * @param callOptions702
     * 
     * @param packageVersionHeader703
     * 
     * @throws com.salesforce.soap.partner.InvalidSObjectFault :
     * @throws com.salesforce.soap.partner.MalformedSearchFault :
     * @throws com.salesforce.soap.partner.InvalidFieldFault :
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.SearchResponse search(

    com.salesforce.soap.partner.Search search700, com.salesforce.soap.partner.SessionHeader sessionHeader701,
            com.salesforce.soap.partner.CallOptions callOptions702,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader703)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.InvalidSObjectFault, com.salesforce.soap.partner.MalformedSearchFault,
            com.salesforce.soap.partner.InvalidFieldFault, com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[18].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:searchRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), search700,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "search")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "search"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader701 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader701 = toOM(sessionHeader701,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "search")));
                addHeader(omElementsessionHeader701, env);

            }

            // add the children only if the parameter is not null
            if (callOptions702 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions702 = toOM(callOptions702,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "search")));
                addHeader(omElementcallOptions702, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader703 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader703 = toOM(packageVersionHeader703,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "search")));
                addHeader(omElementpackageVersionHeader703, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.SearchResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.SearchResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "search"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "search"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "search"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                            throw (com.salesforce.soap.partner.InvalidSObjectFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.MalformedSearchFault) {
                            throw (com.salesforce.soap.partner.MalformedSearchFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.InvalidFieldFault) {
                            throw (com.salesforce.soap.partner.InvalidFieldFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Search for sObjects
     * 
     * @see com.salesforce.soap.partner.SforceService#startsearch
     * @param search700
     * 
     * @param sessionHeader701
     * 
     * @param callOptions702
     * 
     * @param packageVersionHeader703
     */
    public void startsearch(

    com.salesforce.soap.partner.Search search700, com.salesforce.soap.partner.SessionHeader sessionHeader701,
            com.salesforce.soap.partner.CallOptions callOptions702,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader703,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[18].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:searchRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), search700,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "search")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "search"));

        // add the soap_headers only if they are not null
        if (sessionHeader701 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader701 = toOM(sessionHeader701,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "search")));
            addHeader(omElementsessionHeader701, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions702 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions702 = toOM(callOptions702,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "search")));
            addHeader(omElementcallOptions702, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader703 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader703 = toOM(packageVersionHeader703,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "search")));
            addHeader(omElementpackageVersionHeader703, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.SearchResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultsearch((com.salesforce.soap.partner.SearchResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorsearch(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "search"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "search"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "search"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                                    callback.receiveErrorsearch((com.salesforce.soap.partner.InvalidSObjectFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.MalformedSearchFault) {
                                    callback.receiveErrorsearch((com.salesforce.soap.partner.MalformedSearchFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.InvalidFieldFault) {
                                    callback.receiveErrorsearch((com.salesforce.soap.partner.InvalidFieldFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrorsearch((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrorsearch(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsearch(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsearch(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsearch(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsearch(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsearch(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsearch(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsearch(f);
                            }
                        } else {
                            callback.receiveErrorsearch(f);
                        }
                    } else {
                        callback.receiveErrorsearch(f);
                    }
                } else {
                    callback.receiveErrorsearch(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorsearch(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[18].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[18].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Return the renameable nouns from the server for use in presentation using the salesforce grammar
     * engine
     * 
     * @see com.salesforce.soap.partner.SforceService#describeNouns
     * @param describeNouns705
     * 
     * @param sessionHeader706
     * 
     * @param callOptions707
     * 
     * @param packageVersionHeader708
     * 
     * @param localeOptions709
     */

    public com.salesforce.soap.partner.DescribeNounsResponse describeNouns(

    com.salesforce.soap.partner.DescribeNouns describeNouns705, com.salesforce.soap.partner.SessionHeader sessionHeader706,
            com.salesforce.soap.partner.CallOptions callOptions707,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader708,
            com.salesforce.soap.partner.LocaleOptions localeOptions709)

    throws java.rmi.RemoteException

    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[19].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeNounsRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeNouns705,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeNouns")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeNouns"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader706 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader706 = toOM(sessionHeader706,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeNouns")));
                addHeader(omElementsessionHeader706, env);

            }

            // add the children only if the parameter is not null
            if (callOptions707 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions707 = toOM(callOptions707,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeNouns")));
                addHeader(omElementcallOptions707, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader708 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader708 = toOM(packageVersionHeader708,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeNouns")));
                addHeader(omElementpackageVersionHeader708, env);

            }

            // add the children only if the parameter is not null
            if (localeOptions709 != null) {

                org.apache.axiom.om.OMElement omElementlocaleOptions709 = toOM(localeOptions709,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeNouns")));
                addHeader(omElementlocaleOptions709, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.DescribeNounsResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.DescribeNounsResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "describeNouns"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeNouns"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeNouns"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Return the renameable nouns from the server for use in presentation
     * using the salesforce grammar engine
     * 
     * @see com.salesforce.soap.partner.SforceService#startdescribeNouns
     * @param describeNouns705
     * 
     * @param sessionHeader706
     * 
     * @param callOptions707
     * 
     * @param packageVersionHeader708
     * 
     * @param localeOptions709
     */
    public void startdescribeNouns(

    com.salesforce.soap.partner.DescribeNouns describeNouns705, com.salesforce.soap.partner.SessionHeader sessionHeader706,
            com.salesforce.soap.partner.CallOptions callOptions707,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader708,
            com.salesforce.soap.partner.LocaleOptions localeOptions709,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[19].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeNounsRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeNouns705,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeNouns")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeNouns"));

        // add the soap_headers only if they are not null
        if (sessionHeader706 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader706 = toOM(sessionHeader706,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeNouns")));
            addHeader(omElementsessionHeader706, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions707 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions707 = toOM(callOptions707,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeNouns")));
            addHeader(omElementcallOptions707, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader708 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader708 = toOM(packageVersionHeader708,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeNouns")));
            addHeader(omElementpackageVersionHeader708, env);

        }

        // add the soap_headers only if they are not null
        if (localeOptions709 != null) {

            org.apache.axiom.om.OMElement omElementlocaleOptions709 = toOM(localeOptions709,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeNouns")));
            addHeader(omElementlocaleOptions709, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.DescribeNounsResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultdescribeNouns((com.salesforce.soap.partner.DescribeNounsResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrordescribeNouns(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "describeNouns"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeNouns"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeNouns"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                callback.receiveErrordescribeNouns(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeNouns(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeNouns(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeNouns(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeNouns(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeNouns(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeNouns(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeNouns(f);
                            }
                        } else {
                            callback.receiveErrordescribeNouns(f);
                        }
                    } else {
                        callback.receiveErrordescribeNouns(f);
                    }
                } else {
                    callback.receiveErrordescribeNouns(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrordescribeNouns(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[19].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[19].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Create a Query Cursor
     * 
     * @see com.salesforce.soap.partner.SforceService#query
     * @param query711
     * 
     * @param sessionHeader712
     * 
     * @param callOptions713
     * 
     * @param queryOptions714
     * 
     * @param mruHeader715
     * 
     * @param packageVersionHeader716
     * 
     * @throws com.salesforce.soap.partner.InvalidSObjectFault :
     * @throws com.salesforce.soap.partner.MalformedQueryFault :
     * @throws com.salesforce.soap.partner.InvalidIdFault :
     * @throws com.salesforce.soap.partner.InvalidFieldFault :
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     * @throws com.salesforce.soap.partner.InvalidQueryLocatorFault :
     */

    public com.salesforce.soap.partner.QueryResponse query(

    com.salesforce.soap.partner.Query query711, com.salesforce.soap.partner.SessionHeader sessionHeader712,
            com.salesforce.soap.partner.CallOptions callOptions713, com.salesforce.soap.partner.QueryOptions queryOptions714,
            com.salesforce.soap.partner.MruHeader mruHeader715,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader716)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.InvalidSObjectFault, com.salesforce.soap.partner.MalformedQueryFault,
            com.salesforce.soap.partner.InvalidIdFault, com.salesforce.soap.partner.InvalidFieldFault,
            com.salesforce.soap.partner.UnexpectedErrorFault, com.salesforce.soap.partner.InvalidQueryLocatorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[20].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:queryRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), query711,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "query")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "query"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader712 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader712 = toOM(sessionHeader712,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "query")));
                addHeader(omElementsessionHeader712, env);

            }

            // add the children only if the parameter is not null
            if (callOptions713 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions713 = toOM(callOptions713,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "query")));
                addHeader(omElementcallOptions713, env);

            }

            // add the children only if the parameter is not null
            if (queryOptions714 != null) {

                org.apache.axiom.om.OMElement omElementqueryOptions714 = toOM(queryOptions714,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "query")));
                addHeader(omElementqueryOptions714, env);

            }

            // add the children only if the parameter is not null
            if (mruHeader715 != null) {

                org.apache.axiom.om.OMElement omElementmruHeader715 = toOM(mruHeader715,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "query")));
                addHeader(omElementmruHeader715, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader716 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader716 = toOM(packageVersionHeader716,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "query")));
                addHeader(omElementpackageVersionHeader716, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.QueryResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.QueryResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "query"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "query"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "query"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                            throw (com.salesforce.soap.partner.InvalidSObjectFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.MalformedQueryFault) {
                            throw (com.salesforce.soap.partner.MalformedQueryFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                            throw (com.salesforce.soap.partner.InvalidIdFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.InvalidFieldFault) {
                            throw (com.salesforce.soap.partner.InvalidFieldFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.InvalidQueryLocatorFault) {
                            throw (com.salesforce.soap.partner.InvalidQueryLocatorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Create a Query Cursor
     * 
     * @see com.salesforce.soap.partner.SforceService#startquery
     * @param query711
     * 
     * @param sessionHeader712
     * 
     * @param callOptions713
     * 
     * @param queryOptions714
     * 
     * @param mruHeader715
     * 
     * @param packageVersionHeader716
     */
    public void startquery(

    com.salesforce.soap.partner.Query query711, com.salesforce.soap.partner.SessionHeader sessionHeader712,
            com.salesforce.soap.partner.CallOptions callOptions713, com.salesforce.soap.partner.QueryOptions queryOptions714,
            com.salesforce.soap.partner.MruHeader mruHeader715,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader716,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[20].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:queryRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), query711,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "query")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "query"));

        // add the soap_headers only if they are not null
        if (sessionHeader712 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader712 = toOM(sessionHeader712,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "query")));
            addHeader(omElementsessionHeader712, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions713 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions713 = toOM(callOptions713,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "query")));
            addHeader(omElementcallOptions713, env);

        }

        // add the soap_headers only if they are not null
        if (queryOptions714 != null) {

            org.apache.axiom.om.OMElement omElementqueryOptions714 = toOM(queryOptions714,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "query")));
            addHeader(omElementqueryOptions714, env);

        }

        // add the soap_headers only if they are not null
        if (mruHeader715 != null) {

            org.apache.axiom.om.OMElement omElementmruHeader715 = toOM(mruHeader715,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "query")));
            addHeader(omElementmruHeader715, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader716 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader716 = toOM(packageVersionHeader716,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "query")));
            addHeader(omElementpackageVersionHeader716, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.QueryResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultquery((com.salesforce.soap.partner.QueryResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorquery(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "query"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "query"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "query"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                                    callback.receiveErrorquery((com.salesforce.soap.partner.InvalidSObjectFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.MalformedQueryFault) {
                                    callback.receiveErrorquery((com.salesforce.soap.partner.MalformedQueryFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                                    callback.receiveErrorquery((com.salesforce.soap.partner.InvalidIdFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.InvalidFieldFault) {
                                    callback.receiveErrorquery((com.salesforce.soap.partner.InvalidFieldFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrorquery((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.InvalidQueryLocatorFault) {
                                    callback.receiveErrorquery((com.salesforce.soap.partner.InvalidQueryLocatorFault) ex);
                                    return;
                                }

                                callback.receiveErrorquery(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorquery(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorquery(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorquery(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorquery(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorquery(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorquery(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorquery(f);
                            }
                        } else {
                            callback.receiveErrorquery(f);
                        }
                    } else {
                        callback.receiveErrorquery(f);
                    }
                } else {
                    callback.receiveErrorquery(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorquery(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[20].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[20].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Describe Themes
     * 
     * @see com.salesforce.soap.partner.SforceService#describeTheme
     * @param describeTheme718
     * 
     * @param sessionHeader719
     * 
     * @param callOptions720
     * 
     * @param packageVersionHeader721
     * 
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.DescribeThemeResponse describeTheme(

    com.salesforce.soap.partner.DescribeTheme describeTheme718, com.salesforce.soap.partner.SessionHeader sessionHeader719,
            com.salesforce.soap.partner.CallOptions callOptions720,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader721)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[21].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeThemeRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeTheme718,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeTheme")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeTheme"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader719 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader719 = toOM(sessionHeader719,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeTheme")));
                addHeader(omElementsessionHeader719, env);

            }

            // add the children only if the parameter is not null
            if (callOptions720 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions720 = toOM(callOptions720,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeTheme")));
                addHeader(omElementcallOptions720, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader721 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader721 = toOM(packageVersionHeader721,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeTheme")));
                addHeader(omElementpackageVersionHeader721, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.DescribeThemeResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.DescribeThemeResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "describeTheme"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeTheme"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeTheme"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Describe Themes
     * 
     * @see com.salesforce.soap.partner.SforceService#startdescribeTheme
     * @param describeTheme718
     * 
     * @param sessionHeader719
     * 
     * @param callOptions720
     * 
     * @param packageVersionHeader721
     */
    public void startdescribeTheme(

    com.salesforce.soap.partner.DescribeTheme describeTheme718, com.salesforce.soap.partner.SessionHeader sessionHeader719,
            com.salesforce.soap.partner.CallOptions callOptions720,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader721,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[21].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeThemeRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeTheme718,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeTheme")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeTheme"));

        // add the soap_headers only if they are not null
        if (sessionHeader719 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader719 = toOM(sessionHeader719,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeTheme")));
            addHeader(omElementsessionHeader719, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions720 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions720 = toOM(callOptions720,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeTheme")));
            addHeader(omElementcallOptions720, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader721 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader721 = toOM(packageVersionHeader721,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeTheme")));
            addHeader(omElementpackageVersionHeader721, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.DescribeThemeResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultdescribeTheme((com.salesforce.soap.partner.DescribeThemeResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrordescribeTheme(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "describeTheme"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeTheme"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeTheme"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrordescribeTheme((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrordescribeTheme(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeTheme(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeTheme(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeTheme(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeTheme(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeTheme(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeTheme(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeTheme(f);
                            }
                        } else {
                            callback.receiveErrordescribeTheme(f);
                        }
                    } else {
                        callback.receiveErrordescribeTheme(f);
                    }
                } else {
                    callback.receiveErrordescribeTheme(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrordescribeTheme(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[21].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[21].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Describe the ListViews of a SObject as SOQL metadata for the generation of SOQL.
     * 
     * @see com.salesforce.soap.partner.SforceService#describeSObjectListViews
     * @param describeSObjectListViews723
     * 
     * @param sessionHeader724
     * 
     * @param callOptions725
     * 
     * @param packageVersionHeader726
     * 
     * @throws com.salesforce.soap.partner.InvalidSObjectFault :
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.DescribeSObjectListViewsResponse describeSObjectListViews(

    com.salesforce.soap.partner.DescribeSObjectListViews describeSObjectListViews723,
            com.salesforce.soap.partner.SessionHeader sessionHeader724, com.salesforce.soap.partner.CallOptions callOptions725,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader726)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.InvalidSObjectFault, com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[22].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeSObjectListViewsRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeSObjectListViews723,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObjectListViews")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObjectListViews"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader724 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader724 = toOM(sessionHeader724,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObjectListViews")));
                addHeader(omElementsessionHeader724, env);

            }

            // add the children only if the parameter is not null
            if (callOptions725 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions725 = toOM(callOptions725,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObjectListViews")));
                addHeader(omElementcallOptions725, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader726 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader726 = toOM(packageVersionHeader726,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObjectListViews")));
                addHeader(omElementpackageVersionHeader726, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.DescribeSObjectListViewsResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.DescribeSObjectListViewsResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "describeSObjectListViews"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeSObjectListViews"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeSObjectListViews"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                            throw (com.salesforce.soap.partner.InvalidSObjectFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Describe the ListViews of a SObject as SOQL metadata for the generation
     * of SOQL.
     * 
     * @see com.salesforce.soap.partner.SforceService#startdescribeSObjectListViews
     * @param describeSObjectListViews723
     * 
     * @param sessionHeader724
     * 
     * @param callOptions725
     * 
     * @param packageVersionHeader726
     */
    public void startdescribeSObjectListViews(

    com.salesforce.soap.partner.DescribeSObjectListViews describeSObjectListViews723,
            com.salesforce.soap.partner.SessionHeader sessionHeader724, com.salesforce.soap.partner.CallOptions callOptions725,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader726,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[22].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeSObjectListViewsRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeSObjectListViews723,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObjectListViews")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObjectListViews"));

        // add the soap_headers only if they are not null
        if (sessionHeader724 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader724 = toOM(sessionHeader724,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObjectListViews")));
            addHeader(omElementsessionHeader724, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions725 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions725 = toOM(callOptions725,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObjectListViews")));
            addHeader(omElementcallOptions725, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader726 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader726 = toOM(packageVersionHeader726,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObjectListViews")));
            addHeader(omElementpackageVersionHeader726, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.DescribeSObjectListViewsResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultdescribeSObjectListViews((com.salesforce.soap.partner.DescribeSObjectListViewsResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrordescribeSObjectListViews(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "describeSObjectListViews"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                                "describeSObjectListViews"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                                "describeSObjectListViews"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                                    callback.receiveErrordescribeSObjectListViews((com.salesforce.soap.partner.InvalidSObjectFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrordescribeSObjectListViews((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrordescribeSObjectListViews(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSObjectListViews(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSObjectListViews(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSObjectListViews(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSObjectListViews(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSObjectListViews(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSObjectListViews(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSObjectListViews(f);
                            }
                        } else {
                            callback.receiveErrordescribeSObjectListViews(f);
                        }
                    } else {
                        callback.receiveErrordescribeSObjectListViews(f);
                    }
                } else {
                    callback.receiveErrordescribeSObjectListViews(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrordescribeSObjectListViews(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[22].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[22].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Get the IDs for deleted sObjects
     * 
     * @see com.salesforce.soap.partner.SforceService#getDeleted
     * @param getDeleted728
     * 
     * @param sessionHeader729
     * 
     * @param callOptions730
     * 
     * @throws com.salesforce.soap.partner.InvalidSObjectFault :
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.GetDeletedResponse getDeleted(

    com.salesforce.soap.partner.GetDeleted getDeleted728, com.salesforce.soap.partner.SessionHeader sessionHeader729,
            com.salesforce.soap.partner.CallOptions callOptions730)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.InvalidSObjectFault, com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[23].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:getDeletedRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), getDeleted728,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getDeleted")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getDeleted"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader729 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader729 = toOM(sessionHeader729,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getDeleted")));
                addHeader(omElementsessionHeader729, env);

            }

            // add the children only if the parameter is not null
            if (callOptions730 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions730 = toOM(callOptions730,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getDeleted")));
                addHeader(omElementcallOptions730, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.GetDeletedResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.GetDeletedResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "getDeleted"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "getDeleted"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "getDeleted"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                            throw (com.salesforce.soap.partner.InvalidSObjectFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Get the IDs for deleted sObjects
     * 
     * @see com.salesforce.soap.partner.SforceService#startgetDeleted
     * @param getDeleted728
     * 
     * @param sessionHeader729
     * 
     * @param callOptions730
     */
    public void startgetDeleted(

    com.salesforce.soap.partner.GetDeleted getDeleted728, com.salesforce.soap.partner.SessionHeader sessionHeader729,
            com.salesforce.soap.partner.CallOptions callOptions730,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[23].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:getDeletedRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), getDeleted728,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getDeleted")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getDeleted"));

        // add the soap_headers only if they are not null
        if (sessionHeader729 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader729 = toOM(sessionHeader729,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getDeleted")));
            addHeader(omElementsessionHeader729, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions730 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions730 = toOM(callOptions730,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getDeleted")));
            addHeader(omElementcallOptions730, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.GetDeletedResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultgetDeleted((com.salesforce.soap.partner.GetDeletedResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorgetDeleted(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "getDeleted"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "getDeleted"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "getDeleted"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                                    callback.receiveErrorgetDeleted((com.salesforce.soap.partner.InvalidSObjectFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrorgetDeleted((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrorgetDeleted(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetDeleted(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetDeleted(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetDeleted(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetDeleted(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetDeleted(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetDeleted(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetDeleted(f);
                            }
                        } else {
                            callback.receiveErrorgetDeleted(f);
                        }
                    } else {
                        callback.receiveErrorgetDeleted(f);
                    }
                } else {
                    callback.receiveErrorgetDeleted(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorgetDeleted(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[23].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[23].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Describe a list of FlexiPage and their contents
     * 
     * @see com.salesforce.soap.partner.SforceService#describeFlexiPages
     * @param describeFlexiPages732
     * 
     * @param sessionHeader733
     * 
     * @param callOptions734
     * 
     * @param packageVersionHeader735
     * 
     * @throws com.salesforce.soap.partner.InvalidIdFault :
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.DescribeFlexiPagesResponse describeFlexiPages(

    com.salesforce.soap.partner.DescribeFlexiPages describeFlexiPages732,
            com.salesforce.soap.partner.SessionHeader sessionHeader733, com.salesforce.soap.partner.CallOptions callOptions734,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader735)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.InvalidIdFault, com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[24].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeFlexiPagesRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeFlexiPages732,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeFlexiPages")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeFlexiPages"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader733 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader733 = toOM(sessionHeader733,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeFlexiPages")));
                addHeader(omElementsessionHeader733, env);

            }

            // add the children only if the parameter is not null
            if (callOptions734 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions734 = toOM(callOptions734,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeFlexiPages")));
                addHeader(omElementcallOptions734, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader735 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader735 = toOM(packageVersionHeader735,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeFlexiPages")));
                addHeader(omElementpackageVersionHeader735, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.DescribeFlexiPagesResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.DescribeFlexiPagesResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "describeFlexiPages"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeFlexiPages"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeFlexiPages"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                            throw (com.salesforce.soap.partner.InvalidIdFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Describe a list of FlexiPage and their contents
     * 
     * @see com.salesforce.soap.partner.SforceService#startdescribeFlexiPages
     * @param describeFlexiPages732
     * 
     * @param sessionHeader733
     * 
     * @param callOptions734
     * 
     * @param packageVersionHeader735
     */
    public void startdescribeFlexiPages(

    com.salesforce.soap.partner.DescribeFlexiPages describeFlexiPages732,
            com.salesforce.soap.partner.SessionHeader sessionHeader733, com.salesforce.soap.partner.CallOptions callOptions734,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader735,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[24].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeFlexiPagesRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeFlexiPages732,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeFlexiPages")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeFlexiPages"));

        // add the soap_headers only if they are not null
        if (sessionHeader733 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader733 = toOM(sessionHeader733,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeFlexiPages")));
            addHeader(omElementsessionHeader733, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions734 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions734 = toOM(callOptions734,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeFlexiPages")));
            addHeader(omElementcallOptions734, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader735 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader735 = toOM(packageVersionHeader735,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeFlexiPages")));
            addHeader(omElementpackageVersionHeader735, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.DescribeFlexiPagesResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultdescribeFlexiPages((com.salesforce.soap.partner.DescribeFlexiPagesResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrordescribeFlexiPages(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "describeFlexiPages"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeFlexiPages"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeFlexiPages"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                                    callback.receiveErrordescribeFlexiPages((com.salesforce.soap.partner.InvalidIdFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrordescribeFlexiPages((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrordescribeFlexiPages(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeFlexiPages(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeFlexiPages(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeFlexiPages(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeFlexiPages(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeFlexiPages(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeFlexiPages(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeFlexiPages(f);
                            }
                        } else {
                            callback.receiveErrordescribeFlexiPages(f);
                        }
                    } else {
                        callback.receiveErrordescribeFlexiPages(f);
                    }
                } else {
                    callback.receiveErrordescribeFlexiPages(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrordescribeFlexiPages(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[24].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[24].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Describe a list of objects representing the order and scope of objects on a users search result page
     * 
     * @see com.salesforce.soap.partner.SforceService#describeSearchScopeOrder
     * @param describeSearchScopeOrder737
     * 
     * @param sessionHeader738
     * 
     * @param callOptions739
     * 
     * @param packageVersionHeader740
     */

    public com.salesforce.soap.partner.DescribeSearchScopeOrderResponse describeSearchScopeOrder(

    com.salesforce.soap.partner.DescribeSearchScopeOrder describeSearchScopeOrder737,
            com.salesforce.soap.partner.SessionHeader sessionHeader738, com.salesforce.soap.partner.CallOptions callOptions739,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader740)

    throws java.rmi.RemoteException

    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[25].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeSearchScopeOrderRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeSearchScopeOrder737,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSearchScopeOrder")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSearchScopeOrder"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader738 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader738 = toOM(sessionHeader738,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSearchScopeOrder")));
                addHeader(omElementsessionHeader738, env);

            }

            // add the children only if the parameter is not null
            if (callOptions739 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions739 = toOM(callOptions739,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSearchScopeOrder")));
                addHeader(omElementcallOptions739, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader740 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader740 = toOM(packageVersionHeader740,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSearchScopeOrder")));
                addHeader(omElementpackageVersionHeader740, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.DescribeSearchScopeOrderResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.DescribeSearchScopeOrderResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "describeSearchScopeOrder"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeSearchScopeOrder"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeSearchScopeOrder"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Describe a list of objects representing the order and scope of objects
     * on a users search result page
     * 
     * @see com.salesforce.soap.partner.SforceService#startdescribeSearchScopeOrder
     * @param describeSearchScopeOrder737
     * 
     * @param sessionHeader738
     * 
     * @param callOptions739
     * 
     * @param packageVersionHeader740
     */
    public void startdescribeSearchScopeOrder(

    com.salesforce.soap.partner.DescribeSearchScopeOrder describeSearchScopeOrder737,
            com.salesforce.soap.partner.SessionHeader sessionHeader738, com.salesforce.soap.partner.CallOptions callOptions739,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader740,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[25].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeSearchScopeOrderRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeSearchScopeOrder737,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSearchScopeOrder")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSearchScopeOrder"));

        // add the soap_headers only if they are not null
        if (sessionHeader738 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader738 = toOM(sessionHeader738,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSearchScopeOrder")));
            addHeader(omElementsessionHeader738, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions739 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions739 = toOM(callOptions739,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSearchScopeOrder")));
            addHeader(omElementcallOptions739, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader740 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader740 = toOM(packageVersionHeader740,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSearchScopeOrder")));
            addHeader(omElementpackageVersionHeader740, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.DescribeSearchScopeOrderResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultdescribeSearchScopeOrder((com.salesforce.soap.partner.DescribeSearchScopeOrderResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrordescribeSearchScopeOrder(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "describeSearchScopeOrder"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                                "describeSearchScopeOrder"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                                "describeSearchScopeOrder"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                callback.receiveErrordescribeSearchScopeOrder(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSearchScopeOrder(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSearchScopeOrder(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSearchScopeOrder(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSearchScopeOrder(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSearchScopeOrder(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSearchScopeOrder(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSearchScopeOrder(f);
                            }
                        } else {
                            callback.receiveErrordescribeSearchScopeOrder(f);
                        }
                    } else {
                        callback.receiveErrordescribeSearchScopeOrder(f);
                    }
                } else {
                    callback.receiveErrordescribeSearchScopeOrder(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrordescribeSearchScopeOrder(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[25].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[25].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Describe the ListViews as SOQL metadata for the generation of SOQL.
     * 
     * @see com.salesforce.soap.partner.SforceService#describeSoqlListViews
     * @param describeSoqlListViews742
     * 
     * @param sessionHeader743
     * 
     * @param callOptions744
     * 
     * @param packageVersionHeader745
     * 
     * @throws com.salesforce.soap.partner.InvalidSObjectFault :
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.DescribeSoqlListViewsResponse describeSoqlListViews(

    com.salesforce.soap.partner.DescribeSoqlListViews describeSoqlListViews742,
            com.salesforce.soap.partner.SessionHeader sessionHeader743, com.salesforce.soap.partner.CallOptions callOptions744,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader745)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.InvalidSObjectFault, com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[26].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeSoqlListViewsRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeSoqlListViews742,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSoqlListViews")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSoqlListViews"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader743 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader743 = toOM(sessionHeader743,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSoqlListViews")));
                addHeader(omElementsessionHeader743, env);

            }

            // add the children only if the parameter is not null
            if (callOptions744 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions744 = toOM(callOptions744,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSoqlListViews")));
                addHeader(omElementcallOptions744, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader745 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader745 = toOM(packageVersionHeader745,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSoqlListViews")));
                addHeader(omElementpackageVersionHeader745, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.DescribeSoqlListViewsResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.DescribeSoqlListViewsResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "describeSoqlListViews"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeSoqlListViews"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeSoqlListViews"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                            throw (com.salesforce.soap.partner.InvalidSObjectFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Describe the ListViews as SOQL metadata for the generation of SOQL.
     * 
     * @see com.salesforce.soap.partner.SforceService#startdescribeSoqlListViews
     * @param describeSoqlListViews742
     * 
     * @param sessionHeader743
     * 
     * @param callOptions744
     * 
     * @param packageVersionHeader745
     */
    public void startdescribeSoqlListViews(

    com.salesforce.soap.partner.DescribeSoqlListViews describeSoqlListViews742,
            com.salesforce.soap.partner.SessionHeader sessionHeader743, com.salesforce.soap.partner.CallOptions callOptions744,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader745,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[26].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeSoqlListViewsRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeSoqlListViews742,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSoqlListViews")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSoqlListViews"));

        // add the soap_headers only if they are not null
        if (sessionHeader743 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader743 = toOM(sessionHeader743,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSoqlListViews")));
            addHeader(omElementsessionHeader743, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions744 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions744 = toOM(callOptions744,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSoqlListViews")));
            addHeader(omElementcallOptions744, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader745 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader745 = toOM(packageVersionHeader745,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSoqlListViews")));
            addHeader(omElementpackageVersionHeader745, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.DescribeSoqlListViewsResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultdescribeSoqlListViews((com.salesforce.soap.partner.DescribeSoqlListViewsResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrordescribeSoqlListViews(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "describeSoqlListViews"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeSoqlListViews"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeSoqlListViews"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                                    callback.receiveErrordescribeSoqlListViews((com.salesforce.soap.partner.InvalidSObjectFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrordescribeSoqlListViews((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrordescribeSoqlListViews(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSoqlListViews(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSoqlListViews(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSoqlListViews(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSoqlListViews(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSoqlListViews(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSoqlListViews(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSoqlListViews(f);
                            }
                        } else {
                            callback.receiveErrordescribeSoqlListViews(f);
                        }
                    } else {
                        callback.receiveErrordescribeSoqlListViews(f);
                    }
                } else {
                    callback.receiveErrordescribeSoqlListViews(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrordescribeSoqlListViews(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[26].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[26].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Describe the search view of an sObject
     * 
     * @see com.salesforce.soap.partner.SforceService#describeSearchLayouts
     * @param describeSearchLayouts747
     * 
     * @param sessionHeader748
     * 
     * @param callOptions749
     * 
     * @param packageVersionHeader750
     * 
     * @throws com.salesforce.soap.partner.InvalidSObjectFault :
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.DescribeSearchLayoutsResponse describeSearchLayouts(

    com.salesforce.soap.partner.DescribeSearchLayouts describeSearchLayouts747,
            com.salesforce.soap.partner.SessionHeader sessionHeader748, com.salesforce.soap.partner.CallOptions callOptions749,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader750)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.InvalidSObjectFault, com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[27].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeSearchLayoutsRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeSearchLayouts747,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSearchLayouts")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSearchLayouts"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader748 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader748 = toOM(sessionHeader748,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSearchLayouts")));
                addHeader(omElementsessionHeader748, env);

            }

            // add the children only if the parameter is not null
            if (callOptions749 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions749 = toOM(callOptions749,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSearchLayouts")));
                addHeader(omElementcallOptions749, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader750 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader750 = toOM(packageVersionHeader750,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSearchLayouts")));
                addHeader(omElementpackageVersionHeader750, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.DescribeSearchLayoutsResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.DescribeSearchLayoutsResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "describeSearchLayouts"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeSearchLayouts"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeSearchLayouts"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                            throw (com.salesforce.soap.partner.InvalidSObjectFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Describe the search view of an sObject
     * 
     * @see com.salesforce.soap.partner.SforceService#startdescribeSearchLayouts
     * @param describeSearchLayouts747
     * 
     * @param sessionHeader748
     * 
     * @param callOptions749
     * 
     * @param packageVersionHeader750
     */
    public void startdescribeSearchLayouts(

    com.salesforce.soap.partner.DescribeSearchLayouts describeSearchLayouts747,
            com.salesforce.soap.partner.SessionHeader sessionHeader748, com.salesforce.soap.partner.CallOptions callOptions749,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader750,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[27].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeSearchLayoutsRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeSearchLayouts747,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSearchLayouts")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSearchLayouts"));

        // add the soap_headers only if they are not null
        if (sessionHeader748 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader748 = toOM(sessionHeader748,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSearchLayouts")));
            addHeader(omElementsessionHeader748, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions749 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions749 = toOM(callOptions749,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSearchLayouts")));
            addHeader(omElementcallOptions749, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader750 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader750 = toOM(packageVersionHeader750,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSearchLayouts")));
            addHeader(omElementpackageVersionHeader750, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.DescribeSearchLayoutsResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultdescribeSearchLayouts((com.salesforce.soap.partner.DescribeSearchLayoutsResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrordescribeSearchLayouts(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "describeSearchLayouts"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeSearchLayouts"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeSearchLayouts"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                                    callback.receiveErrordescribeSearchLayouts((com.salesforce.soap.partner.InvalidSObjectFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrordescribeSearchLayouts((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrordescribeSearchLayouts(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSearchLayouts(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSearchLayouts(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSearchLayouts(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSearchLayouts(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSearchLayouts(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSearchLayouts(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSearchLayouts(f);
                            }
                        } else {
                            callback.receiveErrordescribeSearchLayouts(f);
                        }
                    } else {
                        callback.receiveErrordescribeSearchLayouts(f);
                    }
                } else {
                    callback.receiveErrordescribeSearchLayouts(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrordescribeSearchLayouts(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[27].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[27].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Submit an entity to a workflow process or process a workitem
     * 
     * @see com.salesforce.soap.partner.SforceService#process
     * @param process752
     * 
     * @param sessionHeader753
     * 
     * @param callOptions754
     * 
     * @param allowFieldTruncationHeader755
     * 
     * @param disableFeedTrackingHeader756
     * 
     * @param streamingEnabledHeader757
     * 
     * @param duplicateRuleHeader758
     * 
     * @param localeOptions759
     * 
     * @param debuggingHeader760
     * 
     * @param packageVersionHeader761
     * 
     * @throws com.salesforce.soap.partner.InvalidIdFault :
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.ProcessResponse process(

    com.salesforce.soap.partner.Process process752, com.salesforce.soap.partner.SessionHeader sessionHeader753,
            com.salesforce.soap.partner.CallOptions callOptions754,
            com.salesforce.soap.partner.AllowFieldTruncationHeader allowFieldTruncationHeader755,
            com.salesforce.soap.partner.DisableFeedTrackingHeader disableFeedTrackingHeader756,
            com.salesforce.soap.partner.StreamingEnabledHeader streamingEnabledHeader757,
            com.salesforce.soap.partner.DuplicateRuleHeader duplicateRuleHeader758,
            com.salesforce.soap.partner.LocaleOptions localeOptions759,
            com.salesforce.soap.partner.DebuggingHeader debuggingHeader760,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader761)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.InvalidIdFault, com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[28].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:processRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), process752,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "process")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "process"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader753 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader753 = toOM(sessionHeader753,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "process")));
                addHeader(omElementsessionHeader753, env);

            }

            // add the children only if the parameter is not null
            if (callOptions754 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions754 = toOM(callOptions754,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "process")));
                addHeader(omElementcallOptions754, env);

            }

            // add the children only if the parameter is not null
            if (allowFieldTruncationHeader755 != null) {

                org.apache.axiom.om.OMElement omElementallowFieldTruncationHeader755 = toOM(allowFieldTruncationHeader755,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "process")));
                addHeader(omElementallowFieldTruncationHeader755, env);

            }

            // add the children only if the parameter is not null
            if (disableFeedTrackingHeader756 != null) {

                org.apache.axiom.om.OMElement omElementdisableFeedTrackingHeader756 = toOM(disableFeedTrackingHeader756,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "process")));
                addHeader(omElementdisableFeedTrackingHeader756, env);

            }

            // add the children only if the parameter is not null
            if (streamingEnabledHeader757 != null) {

                org.apache.axiom.om.OMElement omElementstreamingEnabledHeader757 = toOM(streamingEnabledHeader757,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "process")));
                addHeader(omElementstreamingEnabledHeader757, env);

            }

            // add the children only if the parameter is not null
            if (duplicateRuleHeader758 != null) {

                org.apache.axiom.om.OMElement omElementduplicateRuleHeader758 = toOM(duplicateRuleHeader758,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "process")));
                addHeader(omElementduplicateRuleHeader758, env);

            }

            // add the children only if the parameter is not null
            if (localeOptions759 != null) {

                org.apache.axiom.om.OMElement omElementlocaleOptions759 = toOM(localeOptions759,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "process")));
                addHeader(omElementlocaleOptions759, env);

            }

            // add the children only if the parameter is not null
            if (debuggingHeader760 != null) {

                org.apache.axiom.om.OMElement omElementdebuggingHeader760 = toOM(debuggingHeader760,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "process")));
                addHeader(omElementdebuggingHeader760, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader761 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader761 = toOM(packageVersionHeader761,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "process")));
                addHeader(omElementpackageVersionHeader761, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.ProcessResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.ProcessResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "process"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "process"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "process"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                            throw (com.salesforce.soap.partner.InvalidIdFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Submit an entity to a workflow process or process a workitem
     * 
     * @see com.salesforce.soap.partner.SforceService#startprocess
     * @param process752
     * 
     * @param sessionHeader753
     * 
     * @param callOptions754
     * 
     * @param allowFieldTruncationHeader755
     * 
     * @param disableFeedTrackingHeader756
     * 
     * @param streamingEnabledHeader757
     * 
     * @param duplicateRuleHeader758
     * 
     * @param localeOptions759
     * 
     * @param debuggingHeader760
     * 
     * @param packageVersionHeader761
     */
    public void startprocess(

    com.salesforce.soap.partner.Process process752, com.salesforce.soap.partner.SessionHeader sessionHeader753,
            com.salesforce.soap.partner.CallOptions callOptions754,
            com.salesforce.soap.partner.AllowFieldTruncationHeader allowFieldTruncationHeader755,
            com.salesforce.soap.partner.DisableFeedTrackingHeader disableFeedTrackingHeader756,
            com.salesforce.soap.partner.StreamingEnabledHeader streamingEnabledHeader757,
            com.salesforce.soap.partner.DuplicateRuleHeader duplicateRuleHeader758,
            com.salesforce.soap.partner.LocaleOptions localeOptions759,
            com.salesforce.soap.partner.DebuggingHeader debuggingHeader760,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader761,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[28].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:processRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), process752,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "process")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "process"));

        // add the soap_headers only if they are not null
        if (sessionHeader753 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader753 = toOM(sessionHeader753,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "process")));
            addHeader(omElementsessionHeader753, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions754 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions754 = toOM(callOptions754,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "process")));
            addHeader(omElementcallOptions754, env);

        }

        // add the soap_headers only if they are not null
        if (allowFieldTruncationHeader755 != null) {

            org.apache.axiom.om.OMElement omElementallowFieldTruncationHeader755 = toOM(allowFieldTruncationHeader755,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "process")));
            addHeader(omElementallowFieldTruncationHeader755, env);

        }

        // add the soap_headers only if they are not null
        if (disableFeedTrackingHeader756 != null) {

            org.apache.axiom.om.OMElement omElementdisableFeedTrackingHeader756 = toOM(disableFeedTrackingHeader756,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "process")));
            addHeader(omElementdisableFeedTrackingHeader756, env);

        }

        // add the soap_headers only if they are not null
        if (streamingEnabledHeader757 != null) {

            org.apache.axiom.om.OMElement omElementstreamingEnabledHeader757 = toOM(streamingEnabledHeader757,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "process")));
            addHeader(omElementstreamingEnabledHeader757, env);

        }

        // add the soap_headers only if they are not null
        if (duplicateRuleHeader758 != null) {

            org.apache.axiom.om.OMElement omElementduplicateRuleHeader758 = toOM(duplicateRuleHeader758,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "process")));
            addHeader(omElementduplicateRuleHeader758, env);

        }

        // add the soap_headers only if they are not null
        if (localeOptions759 != null) {

            org.apache.axiom.om.OMElement omElementlocaleOptions759 = toOM(localeOptions759,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "process")));
            addHeader(omElementlocaleOptions759, env);

        }

        // add the soap_headers only if they are not null
        if (debuggingHeader760 != null) {

            org.apache.axiom.om.OMElement omElementdebuggingHeader760 = toOM(debuggingHeader760,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "process")));
            addHeader(omElementdebuggingHeader760, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader761 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader761 = toOM(packageVersionHeader761,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "process")));
            addHeader(omElementpackageVersionHeader761, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.ProcessResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultprocess((com.salesforce.soap.partner.ProcessResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorprocess(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "process"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "process"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "process"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                                    callback.receiveErrorprocess((com.salesforce.soap.partner.InvalidIdFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrorprocess((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrorprocess(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorprocess(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorprocess(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorprocess(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorprocess(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorprocess(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorprocess(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorprocess(f);
                            }
                        } else {
                            callback.receiveErrorprocess(f);
                        }
                    } else {
                        callback.receiveErrorprocess(f);
                    }
                } else {
                    callback.receiveErrorprocess(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorprocess(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[28].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[28].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Describe the data category group structures for a given set of pair of types and data category group
     * name
     * 
     * @see com.salesforce.soap.partner.SforceService#describeDataCategoryGroupStructures
     * @param describeDataCategoryGroupStructures763
     * 
     * @param sessionHeader764
     * 
     * @param callOptions765
     * 
     * @param packageVersionHeader766
     * 
     * @param localeOptions767
     * 
     * @throws com.salesforce.soap.partner.InvalidSObjectFault :
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.DescribeDataCategoryGroupStructuresResponse describeDataCategoryGroupStructures(

    com.salesforce.soap.partner.DescribeDataCategoryGroupStructures describeDataCategoryGroupStructures763,
            com.salesforce.soap.partner.SessionHeader sessionHeader764, com.salesforce.soap.partner.CallOptions callOptions765,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader766,
            com.salesforce.soap.partner.LocaleOptions localeOptions767)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.InvalidSObjectFault, com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[29].getName());
            _operationClient.getOptions()
                    .setAction("urn:partner.soap.sforce.com:Soap:describeDataCategoryGroupStructuresRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                    describeDataCategoryGroupStructures763, optimizeContent(new javax.xml.namespace.QName(
                            "urn:partner.soap.sforce.com", "describeDataCategoryGroupStructures")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeDataCategoryGroupStructures"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader764 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader764 = toOM(sessionHeader764,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com",
                                "describeDataCategoryGroupStructures")));
                addHeader(omElementsessionHeader764, env);

            }

            // add the children only if the parameter is not null
            if (callOptions765 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions765 = toOM(callOptions765,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com",
                                "describeDataCategoryGroupStructures")));
                addHeader(omElementcallOptions765, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader766 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader766 = toOM(packageVersionHeader766,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com",
                                "describeDataCategoryGroupStructures")));
                addHeader(omElementpackageVersionHeader766, env);

            }

            // add the children only if the parameter is not null
            if (localeOptions767 != null) {

                org.apache.axiom.om.OMElement omElementlocaleOptions767 = toOM(localeOptions767,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com",
                                "describeDataCategoryGroupStructures")));
                addHeader(omElementlocaleOptions767, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.DescribeDataCategoryGroupStructuresResponse.class,
                    getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.DescribeDataCategoryGroupStructuresResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "describeDataCategoryGroupStructures"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                        "describeDataCategoryGroupStructures"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                        "describeDataCategoryGroupStructures"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                            throw (com.salesforce.soap.partner.InvalidSObjectFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Describe the data category group structures for a given set of pair of
     * types and data category group name
     * 
     * @see com.salesforce.soap.partner.SforceService#startdescribeDataCategoryGroupStructures
     * @param describeDataCategoryGroupStructures763
     * 
     * @param sessionHeader764
     * 
     * @param callOptions765
     * 
     * @param packageVersionHeader766
     * 
     * @param localeOptions767
     */
    public void startdescribeDataCategoryGroupStructures(

    com.salesforce.soap.partner.DescribeDataCategoryGroupStructures describeDataCategoryGroupStructures763,
            com.salesforce.soap.partner.SessionHeader sessionHeader764, com.salesforce.soap.partner.CallOptions callOptions765,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader766,
            com.salesforce.soap.partner.LocaleOptions localeOptions767,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[29].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeDataCategoryGroupStructuresRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeDataCategoryGroupStructures763,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com",
                        "describeDataCategoryGroupStructures")), new javax.xml.namespace.QName("urn:partner.soap.sforce.com",
                        "describeDataCategoryGroupStructures"));

        // add the soap_headers only if they are not null
        if (sessionHeader764 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader764 = toOM(sessionHeader764,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com",
                            "describeDataCategoryGroupStructures")));
            addHeader(omElementsessionHeader764, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions765 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions765 = toOM(callOptions765,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com",
                            "describeDataCategoryGroupStructures")));
            addHeader(omElementcallOptions765, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader766 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader766 = toOM(packageVersionHeader766,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com",
                            "describeDataCategoryGroupStructures")));
            addHeader(omElementpackageVersionHeader766, env);

        }

        // add the soap_headers only if they are not null
        if (localeOptions767 != null) {

            org.apache.axiom.om.OMElement omElementlocaleOptions767 = toOM(localeOptions767,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com",
                            "describeDataCategoryGroupStructures")));
            addHeader(omElementlocaleOptions767, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.DescribeDataCategoryGroupStructuresResponse.class,
                            getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultdescribeDataCategoryGroupStructures((com.salesforce.soap.partner.DescribeDataCategoryGroupStructuresResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrordescribeDataCategoryGroupStructures(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "describeDataCategoryGroupStructures"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                                "describeDataCategoryGroupStructures"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                                "describeDataCategoryGroupStructures"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                                    callback.receiveErrordescribeDataCategoryGroupStructures((com.salesforce.soap.partner.InvalidSObjectFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrordescribeDataCategoryGroupStructures((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrordescribeDataCategoryGroupStructures(new java.rmi.RemoteException(ex
                                        .getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeDataCategoryGroupStructures(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeDataCategoryGroupStructures(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeDataCategoryGroupStructures(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeDataCategoryGroupStructures(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeDataCategoryGroupStructures(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeDataCategoryGroupStructures(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeDataCategoryGroupStructures(f);
                            }
                        } else {
                            callback.receiveErrordescribeDataCategoryGroupStructures(f);
                        }
                    } else {
                        callback.receiveErrordescribeDataCategoryGroupStructures(f);
                    }
                } else {
                    callback.receiveErrordescribeDataCategoryGroupStructures(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrordescribeDataCategoryGroupStructures(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[29].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[29].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Reset a user's password
     * 
     * @see com.salesforce.soap.partner.SforceService#resetPassword
     * @param resetPassword769
     * 
     * @param sessionHeader770
     * 
     * @param callOptions771
     * 
     * @param emailHeader772
     * 
     * @throws com.salesforce.soap.partner.InvalidIdFault :
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.ResetPasswordResponse resetPassword(

    com.salesforce.soap.partner.ResetPassword resetPassword769, com.salesforce.soap.partner.SessionHeader sessionHeader770,
            com.salesforce.soap.partner.CallOptions callOptions771, com.salesforce.soap.partner.EmailHeader emailHeader772)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.InvalidIdFault, com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[30].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:resetPasswordRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), resetPassword769,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "resetPassword")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "resetPassword"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader770 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader770 = toOM(sessionHeader770,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "resetPassword")));
                addHeader(omElementsessionHeader770, env);

            }

            // add the children only if the parameter is not null
            if (callOptions771 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions771 = toOM(callOptions771,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "resetPassword")));
                addHeader(omElementcallOptions771, env);

            }

            // add the children only if the parameter is not null
            if (emailHeader772 != null) {

                org.apache.axiom.om.OMElement omElementemailHeader772 = toOM(emailHeader772,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "resetPassword")));
                addHeader(omElementemailHeader772, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.ResetPasswordResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.ResetPasswordResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "resetPassword"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "resetPassword"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "resetPassword"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                            throw (com.salesforce.soap.partner.InvalidIdFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Reset a user's password
     * 
     * @see com.salesforce.soap.partner.SforceService#startresetPassword
     * @param resetPassword769
     * 
     * @param sessionHeader770
     * 
     * @param callOptions771
     * 
     * @param emailHeader772
     */
    public void startresetPassword(

    com.salesforce.soap.partner.ResetPassword resetPassword769, com.salesforce.soap.partner.SessionHeader sessionHeader770,
            com.salesforce.soap.partner.CallOptions callOptions771, com.salesforce.soap.partner.EmailHeader emailHeader772,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[30].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:resetPasswordRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), resetPassword769,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "resetPassword")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "resetPassword"));

        // add the soap_headers only if they are not null
        if (sessionHeader770 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader770 = toOM(sessionHeader770,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "resetPassword")));
            addHeader(omElementsessionHeader770, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions771 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions771 = toOM(callOptions771,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "resetPassword")));
            addHeader(omElementcallOptions771, env);

        }

        // add the soap_headers only if they are not null
        if (emailHeader772 != null) {

            org.apache.axiom.om.OMElement omElementemailHeader772 = toOM(emailHeader772,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "resetPassword")));
            addHeader(omElementemailHeader772, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.ResetPasswordResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultresetPassword((com.salesforce.soap.partner.ResetPasswordResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorresetPassword(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "resetPassword"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "resetPassword"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "resetPassword"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                                    callback.receiveErrorresetPassword((com.salesforce.soap.partner.InvalidIdFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrorresetPassword((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrorresetPassword(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorresetPassword(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorresetPassword(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorresetPassword(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorresetPassword(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorresetPassword(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorresetPassword(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorresetPassword(f);
                            }
                        } else {
                            callback.receiveErrorresetPassword(f);
                        }
                    } else {
                        callback.receiveErrorresetPassword(f);
                    }
                } else {
                    callback.receiveErrorresetPassword(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorresetPassword(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[30].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[30].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Describe the Global state
     * 
     * @see com.salesforce.soap.partner.SforceService#describeGlobal
     * @param describeGlobal774
     * 
     * @param sessionHeader775
     * 
     * @param callOptions776
     * 
     * @param packageVersionHeader777
     * 
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.DescribeGlobalResponse describeGlobal(

    com.salesforce.soap.partner.DescribeGlobal describeGlobal774, com.salesforce.soap.partner.SessionHeader sessionHeader775,
            com.salesforce.soap.partner.CallOptions callOptions776,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader777)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[31].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeGlobalRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeGlobal774,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeGlobal")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeGlobal"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader775 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader775 = toOM(sessionHeader775,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeGlobal")));
                addHeader(omElementsessionHeader775, env);

            }

            // add the children only if the parameter is not null
            if (callOptions776 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions776 = toOM(callOptions776,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeGlobal")));
                addHeader(omElementcallOptions776, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader777 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader777 = toOM(packageVersionHeader777,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeGlobal")));
                addHeader(omElementpackageVersionHeader777, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.DescribeGlobalResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.DescribeGlobalResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "describeGlobal"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeGlobal"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeGlobal"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Describe the Global state
     * 
     * @see com.salesforce.soap.partner.SforceService#startdescribeGlobal
     * @param describeGlobal774
     * 
     * @param sessionHeader775
     * 
     * @param callOptions776
     * 
     * @param packageVersionHeader777
     */
    public void startdescribeGlobal(

    com.salesforce.soap.partner.DescribeGlobal describeGlobal774, com.salesforce.soap.partner.SessionHeader sessionHeader775,
            com.salesforce.soap.partner.CallOptions callOptions776,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader777,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[31].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeGlobalRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeGlobal774,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeGlobal")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeGlobal"));

        // add the soap_headers only if they are not null
        if (sessionHeader775 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader775 = toOM(sessionHeader775,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeGlobal")));
            addHeader(omElementsessionHeader775, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions776 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions776 = toOM(callOptions776,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeGlobal")));
            addHeader(omElementcallOptions776, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader777 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader777 = toOM(packageVersionHeader777,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeGlobal")));
            addHeader(omElementpackageVersionHeader777, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.DescribeGlobalResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultdescribeGlobal((com.salesforce.soap.partner.DescribeGlobalResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrordescribeGlobal(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "describeGlobal"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeGlobal"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeGlobal"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrordescribeGlobal((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrordescribeGlobal(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeGlobal(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeGlobal(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeGlobal(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeGlobal(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeGlobal(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeGlobal(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeGlobal(f);
                            }
                        } else {
                            callback.receiveErrordescribeGlobal(f);
                        }
                    } else {
                        callback.receiveErrordescribeGlobal(f);
                    }
                } else {
                    callback.receiveErrordescribeGlobal(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrordescribeGlobal(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[31].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[31].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Describe the items in an AppMenu
     * 
     * @see com.salesforce.soap.partner.SforceService#describeAppMenu
     * @param describeAppMenu779
     * 
     * @param sessionHeader780
     * 
     * @param callOptions781
     * 
     * @param packageVersionHeader782
     * 
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.DescribeAppMenuResponse describeAppMenu(

    com.salesforce.soap.partner.DescribeAppMenu describeAppMenu779, com.salesforce.soap.partner.SessionHeader sessionHeader780,
            com.salesforce.soap.partner.CallOptions callOptions781,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader782)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[32].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeAppMenuRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeAppMenu779,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAppMenu")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAppMenu"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader780 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader780 = toOM(sessionHeader780,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAppMenu")));
                addHeader(omElementsessionHeader780, env);

            }

            // add the children only if the parameter is not null
            if (callOptions781 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions781 = toOM(callOptions781,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAppMenu")));
                addHeader(omElementcallOptions781, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader782 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader782 = toOM(packageVersionHeader782,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAppMenu")));
                addHeader(omElementpackageVersionHeader782, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.DescribeAppMenuResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.DescribeAppMenuResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "describeAppMenu"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeAppMenu"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeAppMenu"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Describe the items in an AppMenu
     * 
     * @see com.salesforce.soap.partner.SforceService#startdescribeAppMenu
     * @param describeAppMenu779
     * 
     * @param sessionHeader780
     * 
     * @param callOptions781
     * 
     * @param packageVersionHeader782
     */
    public void startdescribeAppMenu(

    com.salesforce.soap.partner.DescribeAppMenu describeAppMenu779, com.salesforce.soap.partner.SessionHeader sessionHeader780,
            com.salesforce.soap.partner.CallOptions callOptions781,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader782,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[32].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeAppMenuRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeAppMenu779,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAppMenu")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAppMenu"));

        // add the soap_headers only if they are not null
        if (sessionHeader780 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader780 = toOM(sessionHeader780,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAppMenu")));
            addHeader(omElementsessionHeader780, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions781 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions781 = toOM(callOptions781,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAppMenu")));
            addHeader(omElementcallOptions781, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader782 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader782 = toOM(packageVersionHeader782,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeAppMenu")));
            addHeader(omElementpackageVersionHeader782, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.DescribeAppMenuResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultdescribeAppMenu((com.salesforce.soap.partner.DescribeAppMenuResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrordescribeAppMenu(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "describeAppMenu"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeAppMenu"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeAppMenu"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrordescribeAppMenu((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrordescribeAppMenu(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeAppMenu(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeAppMenu(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeAppMenu(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeAppMenu(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeAppMenu(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeAppMenu(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeAppMenu(f);
                            }
                        } else {
                            callback.receiveErrordescribeAppMenu(f);
                        }
                    } else {
                        callback.receiveErrordescribeAppMenu(f);
                    }
                } else {
                    callback.receiveErrordescribeAppMenu(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrordescribeAppMenu(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[32].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[32].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Describe the compact layouts of the given sObject
     * 
     * @see com.salesforce.soap.partner.SforceService#describeCompactLayouts
     * @param describeCompactLayouts784
     * 
     * @param sessionHeader785
     * 
     * @param callOptions786
     * 
     * @param packageVersionHeader787
     */

    public com.salesforce.soap.partner.DescribeCompactLayoutsResponse describeCompactLayouts(

    com.salesforce.soap.partner.DescribeCompactLayouts describeCompactLayouts784,
            com.salesforce.soap.partner.SessionHeader sessionHeader785, com.salesforce.soap.partner.CallOptions callOptions786,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader787)

    throws java.rmi.RemoteException

    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[33].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeCompactLayoutsRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeCompactLayouts784,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeCompactLayouts")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeCompactLayouts"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader785 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader785 = toOM(sessionHeader785,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeCompactLayouts")));
                addHeader(omElementsessionHeader785, env);

            }

            // add the children only if the parameter is not null
            if (callOptions786 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions786 = toOM(callOptions786,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeCompactLayouts")));
                addHeader(omElementcallOptions786, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader787 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader787 = toOM(packageVersionHeader787,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeCompactLayouts")));
                addHeader(omElementpackageVersionHeader787, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.DescribeCompactLayoutsResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.DescribeCompactLayoutsResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "describeCompactLayouts"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeCompactLayouts"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeCompactLayouts"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Describe the compact layouts of the given sObject
     * 
     * @see com.salesforce.soap.partner.SforceService#startdescribeCompactLayouts
     * @param describeCompactLayouts784
     * 
     * @param sessionHeader785
     * 
     * @param callOptions786
     * 
     * @param packageVersionHeader787
     */
    public void startdescribeCompactLayouts(

    com.salesforce.soap.partner.DescribeCompactLayouts describeCompactLayouts784,
            com.salesforce.soap.partner.SessionHeader sessionHeader785, com.salesforce.soap.partner.CallOptions callOptions786,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader787,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[33].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeCompactLayoutsRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeCompactLayouts784,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeCompactLayouts")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeCompactLayouts"));

        // add the soap_headers only if they are not null
        if (sessionHeader785 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader785 = toOM(sessionHeader785,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeCompactLayouts")));
            addHeader(omElementsessionHeader785, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions786 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions786 = toOM(callOptions786,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeCompactLayouts")));
            addHeader(omElementcallOptions786, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader787 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader787 = toOM(packageVersionHeader787,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeCompactLayouts")));
            addHeader(omElementpackageVersionHeader787, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.DescribeCompactLayoutsResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultdescribeCompactLayouts((com.salesforce.soap.partner.DescribeCompactLayoutsResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrordescribeCompactLayouts(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "describeCompactLayouts"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                                "describeCompactLayouts"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                                "describeCompactLayouts"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                callback.receiveErrordescribeCompactLayouts(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeCompactLayouts(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeCompactLayouts(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeCompactLayouts(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeCompactLayouts(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeCompactLayouts(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeCompactLayouts(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeCompactLayouts(f);
                            }
                        } else {
                            callback.receiveErrordescribeCompactLayouts(f);
                        }
                    } else {
                        callback.receiveErrordescribeCompactLayouts(f);
                    }
                } else {
                    callback.receiveErrordescribeCompactLayouts(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrordescribeCompactLayouts(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[33].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[33].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Describe the approval layouts of the given sObject
     * 
     * @see com.salesforce.soap.partner.SforceService#describeApprovalLayout
     * @param describeApprovalLayout789
     * 
     * @param sessionHeader790
     * 
     * @param callOptions791
     * 
     * @param packageVersionHeader792
     */

    public com.salesforce.soap.partner.DescribeApprovalLayoutResponse describeApprovalLayout(

    com.salesforce.soap.partner.DescribeApprovalLayoutE describeApprovalLayout789,
            com.salesforce.soap.partner.SessionHeader sessionHeader790, com.salesforce.soap.partner.CallOptions callOptions791,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader792)

    throws java.rmi.RemoteException

    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[34].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeApprovalLayoutRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeApprovalLayout789,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeApprovalLayout")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeApprovalLayout"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader790 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader790 = toOM(sessionHeader790,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeApprovalLayout")));
                addHeader(omElementsessionHeader790, env);

            }

            // add the children only if the parameter is not null
            if (callOptions791 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions791 = toOM(callOptions791,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeApprovalLayout")));
                addHeader(omElementcallOptions791, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader792 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader792 = toOM(packageVersionHeader792,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeApprovalLayout")));
                addHeader(omElementpackageVersionHeader792, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.DescribeApprovalLayoutResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.DescribeApprovalLayoutResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "describeApprovalLayout"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeApprovalLayout"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeApprovalLayout"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Describe the approval layouts of the given sObject
     * 
     * @see com.salesforce.soap.partner.SforceService#startdescribeApprovalLayout
     * @param describeApprovalLayout789
     * 
     * @param sessionHeader790
     * 
     * @param callOptions791
     * 
     * @param packageVersionHeader792
     */
    public void startdescribeApprovalLayout(

    com.salesforce.soap.partner.DescribeApprovalLayoutE describeApprovalLayout789,
            com.salesforce.soap.partner.SessionHeader sessionHeader790, com.salesforce.soap.partner.CallOptions callOptions791,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader792,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[34].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeApprovalLayoutRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeApprovalLayout789,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeApprovalLayout")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeApprovalLayout"));

        // add the soap_headers only if they are not null
        if (sessionHeader790 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader790 = toOM(sessionHeader790,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeApprovalLayout")));
            addHeader(omElementsessionHeader790, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions791 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions791 = toOM(callOptions791,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeApprovalLayout")));
            addHeader(omElementcallOptions791, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader792 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader792 = toOM(packageVersionHeader792,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeApprovalLayout")));
            addHeader(omElementpackageVersionHeader792, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.DescribeApprovalLayoutResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultdescribeApprovalLayout((com.salesforce.soap.partner.DescribeApprovalLayoutResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrordescribeApprovalLayout(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "describeApprovalLayout"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                                "describeApprovalLayout"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                                "describeApprovalLayout"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                callback.receiveErrordescribeApprovalLayout(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeApprovalLayout(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeApprovalLayout(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeApprovalLayout(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeApprovalLayout(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeApprovalLayout(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeApprovalLayout(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeApprovalLayout(f);
                            }
                        } else {
                            callback.receiveErrordescribeApprovalLayout(f);
                        }
                    } else {
                        callback.receiveErrordescribeApprovalLayout(f);
                    }
                } else {
                    callback.receiveErrordescribeApprovalLayout(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrordescribeApprovalLayout(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[34].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[34].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Send existing draft EmailMessage
     * 
     * @see com.salesforce.soap.partner.SforceService#sendEmailMessage
     * @param sendEmailMessage794
     * 
     * @param sessionHeader795
     * 
     * @param callOptions796
     * 
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.SendEmailMessageResponse sendEmailMessage(

    com.salesforce.soap.partner.SendEmailMessage sendEmailMessage794, com.salesforce.soap.partner.SessionHeader sessionHeader795,
            com.salesforce.soap.partner.CallOptions callOptions796)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[35].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:sendEmailMessageRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), sendEmailMessage794,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "sendEmailMessage")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "sendEmailMessage"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader795 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader795 = toOM(sessionHeader795,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "sendEmailMessage")));
                addHeader(omElementsessionHeader795, env);

            }

            // add the children only if the parameter is not null
            if (callOptions796 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions796 = toOM(callOptions796,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "sendEmailMessage")));
                addHeader(omElementcallOptions796, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.SendEmailMessageResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.SendEmailMessageResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "sendEmailMessage"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "sendEmailMessage"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "sendEmailMessage"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Send existing draft EmailMessage
     * 
     * @see com.salesforce.soap.partner.SforceService#startsendEmailMessage
     * @param sendEmailMessage794
     * 
     * @param sessionHeader795
     * 
     * @param callOptions796
     */
    public void startsendEmailMessage(

    com.salesforce.soap.partner.SendEmailMessage sendEmailMessage794, com.salesforce.soap.partner.SessionHeader sessionHeader795,
            com.salesforce.soap.partner.CallOptions callOptions796,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[35].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:sendEmailMessageRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), sendEmailMessage794,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "sendEmailMessage")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "sendEmailMessage"));

        // add the soap_headers only if they are not null
        if (sessionHeader795 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader795 = toOM(sessionHeader795,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "sendEmailMessage")));
            addHeader(omElementsessionHeader795, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions796 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions796 = toOM(callOptions796,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "sendEmailMessage")));
            addHeader(omElementcallOptions796, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.SendEmailMessageResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultsendEmailMessage((com.salesforce.soap.partner.SendEmailMessageResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorsendEmailMessage(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "sendEmailMessage"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "sendEmailMessage"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "sendEmailMessage"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrorsendEmailMessage((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrorsendEmailMessage(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsendEmailMessage(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsendEmailMessage(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsendEmailMessage(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsendEmailMessage(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsendEmailMessage(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsendEmailMessage(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorsendEmailMessage(f);
                            }
                        } else {
                            callback.receiveErrorsendEmailMessage(f);
                        }
                    } else {
                        callback.receiveErrorsendEmailMessage(f);
                    }
                } else {
                    callback.receiveErrorsendEmailMessage(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorsendEmailMessage(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[35].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[35].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Describe the layout of the given sObject or the given actionable global page.
     * 
     * @see com.salesforce.soap.partner.SforceService#describeLayout
     * @param describeLayout798
     * 
     * @param sessionHeader799
     * 
     * @param callOptions800
     * 
     * @param packageVersionHeader801
     * 
     * @throws com.salesforce.soap.partner.InvalidSObjectFault :
     * @throws com.salesforce.soap.partner.InvalidIdFault :
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.DescribeLayoutResponse describeLayout(

    com.salesforce.soap.partner.DescribeLayoutE describeLayout798, com.salesforce.soap.partner.SessionHeader sessionHeader799,
            com.salesforce.soap.partner.CallOptions callOptions800,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader801)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.InvalidSObjectFault, com.salesforce.soap.partner.InvalidIdFault,
            com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[36].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeLayoutRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeLayout798,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeLayout")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeLayout"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader799 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader799 = toOM(sessionHeader799,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeLayout")));
                addHeader(omElementsessionHeader799, env);

            }

            // add the children only if the parameter is not null
            if (callOptions800 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions800 = toOM(callOptions800,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeLayout")));
                addHeader(omElementcallOptions800, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader801 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader801 = toOM(packageVersionHeader801,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeLayout")));
                addHeader(omElementpackageVersionHeader801, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.DescribeLayoutResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.DescribeLayoutResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "describeLayout"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeLayout"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeLayout"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                            throw (com.salesforce.soap.partner.InvalidSObjectFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                            throw (com.salesforce.soap.partner.InvalidIdFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Describe the layout of the given sObject or the given actionable global
     * page.
     * 
     * @see com.salesforce.soap.partner.SforceService#startdescribeLayout
     * @param describeLayout798
     * 
     * @param sessionHeader799
     * 
     * @param callOptions800
     * 
     * @param packageVersionHeader801
     */
    public void startdescribeLayout(

    com.salesforce.soap.partner.DescribeLayoutE describeLayout798, com.salesforce.soap.partner.SessionHeader sessionHeader799,
            com.salesforce.soap.partner.CallOptions callOptions800,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader801,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[36].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeLayoutRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeLayout798,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeLayout")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeLayout"));

        // add the soap_headers only if they are not null
        if (sessionHeader799 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader799 = toOM(sessionHeader799,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeLayout")));
            addHeader(omElementsessionHeader799, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions800 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions800 = toOM(callOptions800,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeLayout")));
            addHeader(omElementcallOptions800, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader801 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader801 = toOM(packageVersionHeader801,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeLayout")));
            addHeader(omElementpackageVersionHeader801, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.DescribeLayoutResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultdescribeLayout((com.salesforce.soap.partner.DescribeLayoutResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrordescribeLayout(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "describeLayout"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeLayout"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeLayout"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                                    callback.receiveErrordescribeLayout((com.salesforce.soap.partner.InvalidSObjectFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                                    callback.receiveErrordescribeLayout((com.salesforce.soap.partner.InvalidIdFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrordescribeLayout((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrordescribeLayout(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeLayout(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeLayout(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeLayout(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeLayout(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeLayout(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeLayout(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeLayout(f);
                            }
                        } else {
                            callback.receiveErrordescribeLayout(f);
                        }
                    } else {
                        callback.receiveErrordescribeLayout(f);
                    }
                } else {
                    callback.receiveErrordescribeLayout(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrordescribeLayout(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[36].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[36].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Describe the tabs that appear on a users page
     * 
     * @see com.salesforce.soap.partner.SforceService#describeTabs
     * @param describeTabs803
     * 
     * @param sessionHeader804
     * 
     * @param callOptions805
     * 
     * @param packageVersionHeader806
     * 
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.DescribeTabsResponse describeTabs(

    com.salesforce.soap.partner.DescribeTabs describeTabs803, com.salesforce.soap.partner.SessionHeader sessionHeader804,
            com.salesforce.soap.partner.CallOptions callOptions805,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader806)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[37].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeTabsRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeTabs803,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeTabs")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeTabs"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader804 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader804 = toOM(sessionHeader804,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeTabs")));
                addHeader(omElementsessionHeader804, env);

            }

            // add the children only if the parameter is not null
            if (callOptions805 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions805 = toOM(callOptions805,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeTabs")));
                addHeader(omElementcallOptions805, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader806 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader806 = toOM(packageVersionHeader806,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeTabs")));
                addHeader(omElementpackageVersionHeader806, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.DescribeTabsResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.DescribeTabsResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap
                        .containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeTabs"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeTabs"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeTabs"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Describe the tabs that appear on a users page
     * 
     * @see com.salesforce.soap.partner.SforceService#startdescribeTabs
     * @param describeTabs803
     * 
     * @param sessionHeader804
     * 
     * @param callOptions805
     * 
     * @param packageVersionHeader806
     */
    public void startdescribeTabs(

    com.salesforce.soap.partner.DescribeTabs describeTabs803, com.salesforce.soap.partner.SessionHeader sessionHeader804,
            com.salesforce.soap.partner.CallOptions callOptions805,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader806,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[37].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeTabsRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeTabs803,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeTabs")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeTabs"));

        // add the soap_headers only if they are not null
        if (sessionHeader804 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader804 = toOM(sessionHeader804,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeTabs")));
            addHeader(omElementsessionHeader804, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions805 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions805 = toOM(callOptions805,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeTabs")));
            addHeader(omElementcallOptions805, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader806 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader806 = toOM(packageVersionHeader806,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeTabs")));
            addHeader(omElementpackageVersionHeader806, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.DescribeTabsResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultdescribeTabs((com.salesforce.soap.partner.DescribeTabsResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrordescribeTabs(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "describeTabs"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeTabs"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeTabs"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrordescribeTabs((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrordescribeTabs(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeTabs(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeTabs(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeTabs(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeTabs(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeTabs(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeTabs(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeTabs(f);
                            }
                        } else {
                            callback.receiveErrordescribeTabs(f);
                        }
                    } else {
                        callback.receiveErrordescribeTabs(f);
                    }
                } else {
                    callback.receiveErrordescribeTabs(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrordescribeTabs(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[37].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[37].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Describes your Knowledge settings, such as if knowledgeEnabled is on or off, its default language and
     * supported languages
     * 
     * @see com.salesforce.soap.partner.SforceService#describeKnowledgeSettings
     * @param describeKnowledgeSettings808
     * 
     * @param sessionHeader809
     * 
     * @param callOptions810
     * 
     * @param packageVersionHeader811
     * 
     * @param localeOptions812
     * 
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.DescribeKnowledgeSettingsResponse describeKnowledgeSettings(

    com.salesforce.soap.partner.DescribeKnowledgeSettings describeKnowledgeSettings808,
            com.salesforce.soap.partner.SessionHeader sessionHeader809, com.salesforce.soap.partner.CallOptions callOptions810,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader811,
            com.salesforce.soap.partner.LocaleOptions localeOptions812)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[38].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeKnowledgeSettingsRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeKnowledgeSettings808,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeKnowledgeSettings")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeKnowledgeSettings"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader809 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader809 = toOM(
                        sessionHeader809,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeKnowledgeSettings")));
                addHeader(omElementsessionHeader809, env);

            }

            // add the children only if the parameter is not null
            if (callOptions810 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions810 = toOM(
                        callOptions810,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeKnowledgeSettings")));
                addHeader(omElementcallOptions810, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader811 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader811 = toOM(
                        packageVersionHeader811,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeKnowledgeSettings")));
                addHeader(omElementpackageVersionHeader811, env);

            }

            // add the children only if the parameter is not null
            if (localeOptions812 != null) {

                org.apache.axiom.om.OMElement omElementlocaleOptions812 = toOM(
                        localeOptions812,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeKnowledgeSettings")));
                addHeader(omElementlocaleOptions812, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.DescribeKnowledgeSettingsResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.DescribeKnowledgeSettingsResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "describeKnowledgeSettings"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeKnowledgeSettings"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeKnowledgeSettings"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Describes your Knowledge settings, such as if knowledgeEnabled is on or
     * off, its default language and supported languages
     * 
     * @see com.salesforce.soap.partner.SforceService#startdescribeKnowledgeSettings
     * @param describeKnowledgeSettings808
     * 
     * @param sessionHeader809
     * 
     * @param callOptions810
     * 
     * @param packageVersionHeader811
     * 
     * @param localeOptions812
     */
    public void startdescribeKnowledgeSettings(

    com.salesforce.soap.partner.DescribeKnowledgeSettings describeKnowledgeSettings808,
            com.salesforce.soap.partner.SessionHeader sessionHeader809, com.salesforce.soap.partner.CallOptions callOptions810,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader811,
            com.salesforce.soap.partner.LocaleOptions localeOptions812,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[38].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeKnowledgeSettingsRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeKnowledgeSettings808,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeKnowledgeSettings")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeKnowledgeSettings"));

        // add the soap_headers only if they are not null
        if (sessionHeader809 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader809 = toOM(sessionHeader809,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeKnowledgeSettings")));
            addHeader(omElementsessionHeader809, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions810 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions810 = toOM(callOptions810,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeKnowledgeSettings")));
            addHeader(omElementcallOptions810, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader811 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader811 = toOM(packageVersionHeader811,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeKnowledgeSettings")));
            addHeader(omElementpackageVersionHeader811, env);

        }

        // add the soap_headers only if they are not null
        if (localeOptions812 != null) {

            org.apache.axiom.om.OMElement omElementlocaleOptions812 = toOM(localeOptions812,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeKnowledgeSettings")));
            addHeader(omElementlocaleOptions812, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.DescribeKnowledgeSettingsResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultdescribeKnowledgeSettings((com.salesforce.soap.partner.DescribeKnowledgeSettingsResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrordescribeKnowledgeSettings(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "describeKnowledgeSettings"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                                "describeKnowledgeSettings"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                                "describeKnowledgeSettings"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrordescribeKnowledgeSettings((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrordescribeKnowledgeSettings(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeKnowledgeSettings(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeKnowledgeSettings(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeKnowledgeSettings(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeKnowledgeSettings(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeKnowledgeSettings(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeKnowledgeSettings(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeKnowledgeSettings(f);
                            }
                        } else {
                            callback.receiveErrordescribeKnowledgeSettings(f);
                        }
                    } else {
                        callback.receiveErrordescribeKnowledgeSettings(f);
                    }
                } else {
                    callback.receiveErrordescribeKnowledgeSettings(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrordescribeKnowledgeSettings(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[38].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[38].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Describe all the data category groups available for a given set of types
     * 
     * @see com.salesforce.soap.partner.SforceService#describeDataCategoryGroups
     * @param describeDataCategoryGroups814
     * 
     * @param sessionHeader815
     * 
     * @param callOptions816
     * 
     * @param packageVersionHeader817
     * 
     * @param localeOptions818
     * 
     * @throws com.salesforce.soap.partner.InvalidSObjectFault :
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.DescribeDataCategoryGroupsResponse describeDataCategoryGroups(

    com.salesforce.soap.partner.DescribeDataCategoryGroups describeDataCategoryGroups814,
            com.salesforce.soap.partner.SessionHeader sessionHeader815, com.salesforce.soap.partner.CallOptions callOptions816,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader817,
            com.salesforce.soap.partner.LocaleOptions localeOptions818)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.InvalidSObjectFault, com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[39].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeDataCategoryGroupsRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeDataCategoryGroups814,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeDataCategoryGroups")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeDataCategoryGroups"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader815 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader815 = toOM(
                        sessionHeader815,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeDataCategoryGroups")));
                addHeader(omElementsessionHeader815, env);

            }

            // add the children only if the parameter is not null
            if (callOptions816 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions816 = toOM(
                        callOptions816,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeDataCategoryGroups")));
                addHeader(omElementcallOptions816, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader817 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader817 = toOM(
                        packageVersionHeader817,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeDataCategoryGroups")));
                addHeader(omElementpackageVersionHeader817, env);

            }

            // add the children only if the parameter is not null
            if (localeOptions818 != null) {

                org.apache.axiom.om.OMElement omElementlocaleOptions818 = toOM(
                        localeOptions818,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeDataCategoryGroups")));
                addHeader(omElementlocaleOptions818, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.DescribeDataCategoryGroupsResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.DescribeDataCategoryGroupsResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "describeDataCategoryGroups"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeDataCategoryGroups"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeDataCategoryGroups"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                            throw (com.salesforce.soap.partner.InvalidSObjectFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Describe all the data category groups available for a given set of types
     * 
     * @see com.salesforce.soap.partner.SforceService#startdescribeDataCategoryGroups
     * @param describeDataCategoryGroups814
     * 
     * @param sessionHeader815
     * 
     * @param callOptions816
     * 
     * @param packageVersionHeader817
     * 
     * @param localeOptions818
     */
    public void startdescribeDataCategoryGroups(

    com.salesforce.soap.partner.DescribeDataCategoryGroups describeDataCategoryGroups814,
            com.salesforce.soap.partner.SessionHeader sessionHeader815, com.salesforce.soap.partner.CallOptions callOptions816,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader817,
            com.salesforce.soap.partner.LocaleOptions localeOptions818,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[39].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeDataCategoryGroupsRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeDataCategoryGroups814,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeDataCategoryGroups")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeDataCategoryGroups"));

        // add the soap_headers only if they are not null
        if (sessionHeader815 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader815 = toOM(sessionHeader815,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeDataCategoryGroups")));
            addHeader(omElementsessionHeader815, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions816 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions816 = toOM(callOptions816,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeDataCategoryGroups")));
            addHeader(omElementcallOptions816, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader817 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader817 = toOM(packageVersionHeader817,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeDataCategoryGroups")));
            addHeader(omElementpackageVersionHeader817, env);

        }

        // add the soap_headers only if they are not null
        if (localeOptions818 != null) {

            org.apache.axiom.om.OMElement omElementlocaleOptions818 = toOM(localeOptions818,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeDataCategoryGroups")));
            addHeader(omElementlocaleOptions818, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.DescribeDataCategoryGroupsResponse.class,
                            getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultdescribeDataCategoryGroups((com.salesforce.soap.partner.DescribeDataCategoryGroupsResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrordescribeDataCategoryGroups(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "describeDataCategoryGroups"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                                "describeDataCategoryGroups"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                                "describeDataCategoryGroups"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                                    callback.receiveErrordescribeDataCategoryGroups((com.salesforce.soap.partner.InvalidSObjectFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrordescribeDataCategoryGroups((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrordescribeDataCategoryGroups(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeDataCategoryGroups(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeDataCategoryGroups(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeDataCategoryGroups(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeDataCategoryGroups(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeDataCategoryGroups(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeDataCategoryGroups(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeDataCategoryGroups(f);
                            }
                        } else {
                            callback.receiveErrordescribeDataCategoryGroups(f);
                        }
                    } else {
                        callback.receiveErrordescribeDataCategoryGroups(f);
                    }
                } else {
                    callback.receiveErrordescribeDataCategoryGroups(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrordescribeDataCategoryGroups(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[39].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[39].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Gets server timestamp
     * 
     * @see com.salesforce.soap.partner.SforceService#getServerTimestamp
     * @param getServerTimestamp820
     * 
     * @param sessionHeader821
     * 
     * @param callOptions822
     * 
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.GetServerTimestampResponse getServerTimestamp(

    com.salesforce.soap.partner.GetServerTimestamp getServerTimestamp820,
            com.salesforce.soap.partner.SessionHeader sessionHeader821, com.salesforce.soap.partner.CallOptions callOptions822)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[40].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:getServerTimestampRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), getServerTimestamp820,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getServerTimestamp")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getServerTimestamp"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader821 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader821 = toOM(sessionHeader821,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getServerTimestamp")));
                addHeader(omElementsessionHeader821, env);

            }

            // add the children only if the parameter is not null
            if (callOptions822 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions822 = toOM(callOptions822,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getServerTimestamp")));
                addHeader(omElementcallOptions822, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.GetServerTimestampResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.GetServerTimestampResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "getServerTimestamp"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "getServerTimestamp"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "getServerTimestamp"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Gets server timestamp
     * 
     * @see com.salesforce.soap.partner.SforceService#startgetServerTimestamp
     * @param getServerTimestamp820
     * 
     * @param sessionHeader821
     * 
     * @param callOptions822
     */
    public void startgetServerTimestamp(

    com.salesforce.soap.partner.GetServerTimestamp getServerTimestamp820,
            com.salesforce.soap.partner.SessionHeader sessionHeader821, com.salesforce.soap.partner.CallOptions callOptions822,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[40].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:getServerTimestampRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), getServerTimestamp820,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getServerTimestamp")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getServerTimestamp"));

        // add the soap_headers only if they are not null
        if (sessionHeader821 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader821 = toOM(sessionHeader821,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getServerTimestamp")));
            addHeader(omElementsessionHeader821, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions822 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions822 = toOM(callOptions822,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "getServerTimestamp")));
            addHeader(omElementcallOptions822, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.GetServerTimestampResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultgetServerTimestamp((com.salesforce.soap.partner.GetServerTimestampResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorgetServerTimestamp(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "getServerTimestamp"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "getServerTimestamp"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "getServerTimestamp"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrorgetServerTimestamp((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrorgetServerTimestamp(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetServerTimestamp(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetServerTimestamp(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetServerTimestamp(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetServerTimestamp(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetServerTimestamp(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetServerTimestamp(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetServerTimestamp(f);
                            }
                        } else {
                            callback.receiveErrorgetServerTimestamp(f);
                        }
                    } else {
                        callback.receiveErrorgetServerTimestamp(f);
                    }
                } else {
                    callback.receiveErrorgetServerTimestamp(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorgetServerTimestamp(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[40].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[40].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Logs out and invalidates session ids
     * 
     * @see com.salesforce.soap.partner.SforceService#invalidateSessions
     * @param invalidateSessions824
     * 
     * @param sessionHeader825
     * 
     * @param callOptions826
     * 
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.InvalidateSessionsResponse invalidateSessions(

    com.salesforce.soap.partner.InvalidateSessions invalidateSessions824,
            com.salesforce.soap.partner.SessionHeader sessionHeader825, com.salesforce.soap.partner.CallOptions callOptions826)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[41].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:invalidateSessionsRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), invalidateSessions824,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "invalidateSessions")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "invalidateSessions"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader825 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader825 = toOM(sessionHeader825,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "invalidateSessions")));
                addHeader(omElementsessionHeader825, env);

            }

            // add the children only if the parameter is not null
            if (callOptions826 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions826 = toOM(callOptions826,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "invalidateSessions")));
                addHeader(omElementcallOptions826, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.InvalidateSessionsResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.InvalidateSessionsResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "invalidateSessions"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "invalidateSessions"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "invalidateSessions"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Logs out and invalidates session ids
     * 
     * @see com.salesforce.soap.partner.SforceService#startinvalidateSessions
     * @param invalidateSessions824
     * 
     * @param sessionHeader825
     * 
     * @param callOptions826
     */
    public void startinvalidateSessions(

    com.salesforce.soap.partner.InvalidateSessions invalidateSessions824,
            com.salesforce.soap.partner.SessionHeader sessionHeader825, com.salesforce.soap.partner.CallOptions callOptions826,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[41].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:invalidateSessionsRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), invalidateSessions824,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "invalidateSessions")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "invalidateSessions"));

        // add the soap_headers only if they are not null
        if (sessionHeader825 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader825 = toOM(sessionHeader825,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "invalidateSessions")));
            addHeader(omElementsessionHeader825, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions826 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions826 = toOM(callOptions826,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "invalidateSessions")));
            addHeader(omElementcallOptions826, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.InvalidateSessionsResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultinvalidateSessions((com.salesforce.soap.partner.InvalidateSessionsResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorinvalidateSessions(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "invalidateSessions"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "invalidateSessions"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "invalidateSessions"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrorinvalidateSessions((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrorinvalidateSessions(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorinvalidateSessions(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorinvalidateSessions(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorinvalidateSessions(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorinvalidateSessions(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorinvalidateSessions(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorinvalidateSessions(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorinvalidateSessions(f);
                            }
                        } else {
                            callback.receiveErrorinvalidateSessions(f);
                        }
                    } else {
                        callback.receiveErrorinvalidateSessions(f);
                    }
                } else {
                    callback.receiveErrorinvalidateSessions(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorinvalidateSessions(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[41].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[41].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Describe an sObject
     * 
     * @see com.salesforce.soap.partner.SforceService#describeSObject
     * @param describeSObject828
     * 
     * @param sessionHeader829
     * 
     * @param callOptions830
     * 
     * @param packageVersionHeader831
     * 
     * @param localeOptions832
     * 
     * @throws com.salesforce.soap.partner.InvalidSObjectFault :
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.DescribeSObjectResponse describeSObject(

    com.salesforce.soap.partner.DescribeSObject describeSObject828, com.salesforce.soap.partner.SessionHeader sessionHeader829,
            com.salesforce.soap.partner.CallOptions callOptions830,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader831,
            com.salesforce.soap.partner.LocaleOptions localeOptions832)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.InvalidSObjectFault, com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[42].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeSObjectRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeSObject828,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObject")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObject"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader829 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader829 = toOM(sessionHeader829,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObject")));
                addHeader(omElementsessionHeader829, env);

            }

            // add the children only if the parameter is not null
            if (callOptions830 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions830 = toOM(callOptions830,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObject")));
                addHeader(omElementcallOptions830, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader831 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader831 = toOM(packageVersionHeader831,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObject")));
                addHeader(omElementpackageVersionHeader831, env);

            }

            // add the children only if the parameter is not null
            if (localeOptions832 != null) {

                org.apache.axiom.om.OMElement omElementlocaleOptions832 = toOM(localeOptions832,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObject")));
                addHeader(omElementlocaleOptions832, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.DescribeSObjectResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.DescribeSObjectResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "describeSObject"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeSObject"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeSObject"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                            throw (com.salesforce.soap.partner.InvalidSObjectFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Describe an sObject
     * 
     * @see com.salesforce.soap.partner.SforceService#startdescribeSObject
     * @param describeSObject828
     * 
     * @param sessionHeader829
     * 
     * @param callOptions830
     * 
     * @param packageVersionHeader831
     * 
     * @param localeOptions832
     */
    public void startdescribeSObject(

    com.salesforce.soap.partner.DescribeSObject describeSObject828, com.salesforce.soap.partner.SessionHeader sessionHeader829,
            com.salesforce.soap.partner.CallOptions callOptions830,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader831,
            com.salesforce.soap.partner.LocaleOptions localeOptions832,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[42].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeSObjectRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeSObject828,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObject")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObject"));

        // add the soap_headers only if they are not null
        if (sessionHeader829 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader829 = toOM(sessionHeader829,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObject")));
            addHeader(omElementsessionHeader829, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions830 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions830 = toOM(callOptions830,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObject")));
            addHeader(omElementcallOptions830, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader831 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader831 = toOM(packageVersionHeader831,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObject")));
            addHeader(omElementpackageVersionHeader831, env);

        }

        // add the soap_headers only if they are not null
        if (localeOptions832 != null) {

            org.apache.axiom.om.OMElement omElementlocaleOptions832 = toOM(localeOptions832,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObject")));
            addHeader(omElementlocaleOptions832, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.DescribeSObjectResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultdescribeSObject((com.salesforce.soap.partner.DescribeSObjectResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrordescribeSObject(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "describeSObject"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeSObject"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeSObject"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                                    callback.receiveErrordescribeSObject((com.salesforce.soap.partner.InvalidSObjectFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrordescribeSObject((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrordescribeSObject(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSObject(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSObject(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSObject(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSObject(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSObject(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSObject(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSObject(f);
                            }
                        } else {
                            callback.receiveErrordescribeSObject(f);
                        }
                    } else {
                        callback.receiveErrordescribeSObject(f);
                    }
                } else {
                    callback.receiveErrordescribeSObject(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrordescribeSObject(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[42].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[42].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Login to the Salesforce.com SOAP Api
     * 
     * @see com.salesforce.soap.partner.SforceService#login
     * @param login834
     * 
     * @param loginScopeHeader835
     * 
     * @param callOptions836
     * 
     * @throws com.salesforce.soap.partner.InvalidIdFault :
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     * @throws com.salesforce.soap.partner.LoginFault :
     */

    public com.salesforce.soap.partner.LoginResponse login(

    com.salesforce.soap.partner.Login login834, com.salesforce.soap.partner.LoginScopeHeader loginScopeHeader835,
            com.salesforce.soap.partner.CallOptions callOptions836)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.InvalidIdFault, com.salesforce.soap.partner.UnexpectedErrorFault,
            com.salesforce.soap.partner.LoginFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[43].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:loginRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), login834,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "login")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "login"));

            env.build();

            // add the children only if the parameter is not null
            if (loginScopeHeader835 != null) {

                org.apache.axiom.om.OMElement omElementloginScopeHeader835 = toOM(loginScopeHeader835,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "login")));
                addHeader(omElementloginScopeHeader835, env);

            }

            // add the children only if the parameter is not null
            if (callOptions836 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions836 = toOM(callOptions836,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "login")));
                addHeader(omElementcallOptions836, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.LoginResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.LoginResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "login"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "login"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "login"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                            throw (com.salesforce.soap.partner.InvalidIdFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.LoginFault) {
                            throw (com.salesforce.soap.partner.LoginFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Login to the Salesforce.com SOAP Api
     * 
     * @see com.salesforce.soap.partner.SforceService#startlogin
     * @param login834
     * 
     * @param loginScopeHeader835
     * 
     * @param callOptions836
     */
    public void startlogin(

    com.salesforce.soap.partner.Login login834, com.salesforce.soap.partner.LoginScopeHeader loginScopeHeader835,
            com.salesforce.soap.partner.CallOptions callOptions836,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[43].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:loginRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), login834,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "login")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "login"));

        // add the soap_headers only if they are not null
        if (loginScopeHeader835 != null) {

            org.apache.axiom.om.OMElement omElementloginScopeHeader835 = toOM(loginScopeHeader835,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "login")));
            addHeader(omElementloginScopeHeader835, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions836 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions836 = toOM(callOptions836,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "login")));
            addHeader(omElementcallOptions836, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.LoginResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultlogin((com.salesforce.soap.partner.LoginResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorlogin(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "login"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "login"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "login"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                                    callback.receiveErrorlogin((com.salesforce.soap.partner.InvalidIdFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrorlogin((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.LoginFault) {
                                    callback.receiveErrorlogin((com.salesforce.soap.partner.LoginFault) ex);
                                    return;
                                }

                                callback.receiveErrorlogin(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorlogin(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorlogin(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorlogin(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorlogin(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorlogin(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorlogin(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorlogin(f);
                            }
                        } else {
                            callback.receiveErrorlogin(f);
                        }
                    } else {
                        callback.receiveErrorlogin(f);
                    }
                } else {
                    callback.receiveErrorlogin(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorlogin(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[43].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[43].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Retreive the template sobjects, if appropriate, for the given quick action names in a given context
     * 
     * @see com.salesforce.soap.partner.SforceService#retrieveQuickActionTemplates
     * @param retrieveQuickActionTemplates838
     * 
     * @param sessionHeader839
     * 
     * @param callOptions840
     * 
     * @param packageVersionHeader841
     * 
     * @param localeOptions842
     */

    public com.salesforce.soap.partner.RetrieveQuickActionTemplatesResponse retrieveQuickActionTemplates(

    com.salesforce.soap.partner.RetrieveQuickActionTemplates retrieveQuickActionTemplates838,
            com.salesforce.soap.partner.SessionHeader sessionHeader839, com.salesforce.soap.partner.CallOptions callOptions840,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader841,
            com.salesforce.soap.partner.LocaleOptions localeOptions842)

    throws java.rmi.RemoteException

    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[44].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:retrieveQuickActionTemplatesRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(
                    getFactory(_operationClient.getOptions().getSoapVersionURI()),
                    retrieveQuickActionTemplates838,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "retrieveQuickActionTemplates")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "retrieveQuickActionTemplates"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader839 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader839 = toOM(sessionHeader839,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com",
                                "retrieveQuickActionTemplates")));
                addHeader(omElementsessionHeader839, env);

            }

            // add the children only if the parameter is not null
            if (callOptions840 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions840 = toOM(callOptions840,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com",
                                "retrieveQuickActionTemplates")));
                addHeader(omElementcallOptions840, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader841 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader841 = toOM(packageVersionHeader841,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com",
                                "retrieveQuickActionTemplates")));
                addHeader(omElementpackageVersionHeader841, env);

            }

            // add the children only if the parameter is not null
            if (localeOptions842 != null) {

                org.apache.axiom.om.OMElement omElementlocaleOptions842 = toOM(localeOptions842,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com",
                                "retrieveQuickActionTemplates")));
                addHeader(omElementlocaleOptions842, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.RetrieveQuickActionTemplatesResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.RetrieveQuickActionTemplatesResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "retrieveQuickActionTemplates"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "retrieveQuickActionTemplates"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "retrieveQuickActionTemplates"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Retreive the template sobjects, if appropriate, for the given quick
     * action names in a given context
     * 
     * @see com.salesforce.soap.partner.SforceService#startretrieveQuickActionTemplates
     * @param retrieveQuickActionTemplates838
     * 
     * @param sessionHeader839
     * 
     * @param callOptions840
     * 
     * @param packageVersionHeader841
     * 
     * @param localeOptions842
     */
    public void startretrieveQuickActionTemplates(

    com.salesforce.soap.partner.RetrieveQuickActionTemplates retrieveQuickActionTemplates838,
            com.salesforce.soap.partner.SessionHeader sessionHeader839, com.salesforce.soap.partner.CallOptions callOptions840,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader841,
            com.salesforce.soap.partner.LocaleOptions localeOptions842,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[44].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:retrieveQuickActionTemplatesRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), retrieveQuickActionTemplates838,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "retrieveQuickActionTemplates")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "retrieveQuickActionTemplates"));

        // add the soap_headers only if they are not null
        if (sessionHeader839 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader839 = toOM(sessionHeader839,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "retrieveQuickActionTemplates")));
            addHeader(omElementsessionHeader839, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions840 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions840 = toOM(callOptions840,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "retrieveQuickActionTemplates")));
            addHeader(omElementcallOptions840, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader841 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader841 = toOM(packageVersionHeader841,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "retrieveQuickActionTemplates")));
            addHeader(omElementpackageVersionHeader841, env);

        }

        // add the soap_headers only if they are not null
        if (localeOptions842 != null) {

            org.apache.axiom.om.OMElement omElementlocaleOptions842 = toOM(localeOptions842,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "retrieveQuickActionTemplates")));
            addHeader(omElementlocaleOptions842, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.RetrieveQuickActionTemplatesResponse.class,
                            getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultretrieveQuickActionTemplates((com.salesforce.soap.partner.RetrieveQuickActionTemplatesResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorretrieveQuickActionTemplates(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "retrieveQuickActionTemplates"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                                "retrieveQuickActionTemplates"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                                "retrieveQuickActionTemplates"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                callback.receiveErrorretrieveQuickActionTemplates(new java.rmi.RemoteException(ex.getMessage(),
                                        ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorretrieveQuickActionTemplates(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorretrieveQuickActionTemplates(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorretrieveQuickActionTemplates(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorretrieveQuickActionTemplates(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorretrieveQuickActionTemplates(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorretrieveQuickActionTemplates(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorretrieveQuickActionTemplates(f);
                            }
                        } else {
                            callback.receiveErrorretrieveQuickActionTemplates(f);
                        }
                    } else {
                        callback.receiveErrorretrieveQuickActionTemplates(f);
                    }
                } else {
                    callback.receiveErrorretrieveQuickActionTemplates(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorretrieveQuickActionTemplates(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[44].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[44].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Gets the next batch of sObjects from a query
     * 
     * @see com.salesforce.soap.partner.SforceService#queryMore
     * @param queryMore844
     * 
     * @param sessionHeader845
     * 
     * @param callOptions846
     * 
     * @param queryOptions847
     * 
     * @throws com.salesforce.soap.partner.MalformedQueryFault :
     * @throws com.salesforce.soap.partner.InvalidFieldFault :
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     * @throws com.salesforce.soap.partner.InvalidQueryLocatorFault :
     */

    public com.salesforce.soap.partner.QueryMoreResponse queryMore(

    com.salesforce.soap.partner.QueryMore queryMore844, com.salesforce.soap.partner.SessionHeader sessionHeader845,
            com.salesforce.soap.partner.CallOptions callOptions846, com.salesforce.soap.partner.QueryOptions queryOptions847)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.MalformedQueryFault, com.salesforce.soap.partner.InvalidFieldFault,
            com.salesforce.soap.partner.UnexpectedErrorFault, com.salesforce.soap.partner.InvalidQueryLocatorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[45].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:queryMoreRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), queryMore844,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "queryMore")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "queryMore"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader845 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader845 = toOM(sessionHeader845,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "queryMore")));
                addHeader(omElementsessionHeader845, env);

            }

            // add the children only if the parameter is not null
            if (callOptions846 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions846 = toOM(callOptions846,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "queryMore")));
                addHeader(omElementcallOptions846, env);

            }

            // add the children only if the parameter is not null
            if (queryOptions847 != null) {

                org.apache.axiom.om.OMElement omElementqueryOptions847 = toOM(queryOptions847,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "queryMore")));
                addHeader(omElementqueryOptions847, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.QueryMoreResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.QueryMoreResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "queryMore"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "queryMore"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "queryMore"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.MalformedQueryFault) {
                            throw (com.salesforce.soap.partner.MalformedQueryFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.InvalidFieldFault) {
                            throw (com.salesforce.soap.partner.InvalidFieldFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.InvalidQueryLocatorFault) {
                            throw (com.salesforce.soap.partner.InvalidQueryLocatorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Gets the next batch of sObjects from a query
     * 
     * @see com.salesforce.soap.partner.SforceService#startqueryMore
     * @param queryMore844
     * 
     * @param sessionHeader845
     * 
     * @param callOptions846
     * 
     * @param queryOptions847
     */
    public void startqueryMore(

    com.salesforce.soap.partner.QueryMore queryMore844, com.salesforce.soap.partner.SessionHeader sessionHeader845,
            com.salesforce.soap.partner.CallOptions callOptions846, com.salesforce.soap.partner.QueryOptions queryOptions847,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[45].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:queryMoreRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), queryMore844,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "queryMore")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "queryMore"));

        // add the soap_headers only if they are not null
        if (sessionHeader845 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader845 = toOM(sessionHeader845,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "queryMore")));
            addHeader(omElementsessionHeader845, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions846 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions846 = toOM(callOptions846,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "queryMore")));
            addHeader(omElementcallOptions846, env);

        }

        // add the soap_headers only if they are not null
        if (queryOptions847 != null) {

            org.apache.axiom.om.OMElement omElementqueryOptions847 = toOM(queryOptions847,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "queryMore")));
            addHeader(omElementqueryOptions847, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.QueryMoreResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultqueryMore((com.salesforce.soap.partner.QueryMoreResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorqueryMore(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "queryMore"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "queryMore"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "queryMore"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.MalformedQueryFault) {
                                    callback.receiveErrorqueryMore((com.salesforce.soap.partner.MalformedQueryFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.InvalidFieldFault) {
                                    callback.receiveErrorqueryMore((com.salesforce.soap.partner.InvalidFieldFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrorqueryMore((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.InvalidQueryLocatorFault) {
                                    callback.receiveErrorqueryMore((com.salesforce.soap.partner.InvalidQueryLocatorFault) ex);
                                    return;
                                }

                                callback.receiveErrorqueryMore(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorqueryMore(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorqueryMore(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorqueryMore(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorqueryMore(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorqueryMore(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorqueryMore(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorqueryMore(f);
                            }
                        } else {
                            callback.receiveErrorqueryMore(f);
                        }
                    } else {
                        callback.receiveErrorqueryMore(f);
                    }
                } else {
                    callback.receiveErrorqueryMore(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorqueryMore(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[45].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[45].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Describe a number sObjects
     * 
     * @see com.salesforce.soap.partner.SforceService#describeSObjects
     * @param describeSObjects849
     * 
     * @param sessionHeader850
     * 
     * @param callOptions851
     * 
     * @param packageVersionHeader852
     * 
     * @param localeOptions853
     * 
     * @throws com.salesforce.soap.partner.InvalidSObjectFault :
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.DescribeSObjectsResponse describeSObjects(

    com.salesforce.soap.partner.DescribeSObjects describeSObjects849, com.salesforce.soap.partner.SessionHeader sessionHeader850,
            com.salesforce.soap.partner.CallOptions callOptions851,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader852,
            com.salesforce.soap.partner.LocaleOptions localeOptions853)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.InvalidSObjectFault, com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[46].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeSObjectsRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeSObjects849,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObjects")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObjects"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader850 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader850 = toOM(sessionHeader850,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObjects")));
                addHeader(omElementsessionHeader850, env);

            }

            // add the children only if the parameter is not null
            if (callOptions851 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions851 = toOM(callOptions851,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObjects")));
                addHeader(omElementcallOptions851, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader852 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader852 = toOM(packageVersionHeader852,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObjects")));
                addHeader(omElementpackageVersionHeader852, env);

            }

            // add the children only if the parameter is not null
            if (localeOptions853 != null) {

                org.apache.axiom.om.OMElement omElementlocaleOptions853 = toOM(localeOptions853,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObjects")));
                addHeader(omElementlocaleOptions853, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.DescribeSObjectsResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.DescribeSObjectsResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "describeSObjects"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeSObjects"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeSObjects"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                            throw (com.salesforce.soap.partner.InvalidSObjectFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Describe a number sObjects
     * 
     * @see com.salesforce.soap.partner.SforceService#startdescribeSObjects
     * @param describeSObjects849
     * 
     * @param sessionHeader850
     * 
     * @param callOptions851
     * 
     * @param packageVersionHeader852
     * 
     * @param localeOptions853
     */
    public void startdescribeSObjects(

    com.salesforce.soap.partner.DescribeSObjects describeSObjects849, com.salesforce.soap.partner.SessionHeader sessionHeader850,
            com.salesforce.soap.partner.CallOptions callOptions851,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader852,
            com.salesforce.soap.partner.LocaleOptions localeOptions853,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[46].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeSObjectsRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeSObjects849,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObjects")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObjects"));

        // add the soap_headers only if they are not null
        if (sessionHeader850 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader850 = toOM(sessionHeader850,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObjects")));
            addHeader(omElementsessionHeader850, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions851 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions851 = toOM(callOptions851,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObjects")));
            addHeader(omElementcallOptions851, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader852 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader852 = toOM(packageVersionHeader852,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObjects")));
            addHeader(omElementpackageVersionHeader852, env);

        }

        // add the soap_headers only if they are not null
        if (localeOptions853 != null) {

            org.apache.axiom.om.OMElement omElementlocaleOptions853 = toOM(localeOptions853,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeSObjects")));
            addHeader(omElementlocaleOptions853, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.DescribeSObjectsResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultdescribeSObjects((com.salesforce.soap.partner.DescribeSObjectsResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrordescribeSObjects(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "describeSObjects"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeSObjects"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeSObjects"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                                    callback.receiveErrordescribeSObjects((com.salesforce.soap.partner.InvalidSObjectFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrordescribeSObjects((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrordescribeSObjects(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSObjects(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSObjects(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSObjects(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSObjects(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSObjects(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSObjects(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeSObjects(f);
                            }
                        } else {
                            callback.receiveErrordescribeSObjects(f);
                        }
                    } else {
                        callback.receiveErrordescribeSObjects(f);
                    }
                } else {
                    callback.receiveErrordescribeSObjects(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrordescribeSObjects(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[46].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[46].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Empty a set of sObjects from the recycle bin
     * 
     * @see com.salesforce.soap.partner.SforceService#emptyRecycleBin
     * @param emptyRecycleBin855
     * 
     * @param sessionHeader856
     * 
     * @param callOptions857
     * 
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.EmptyRecycleBinResponse emptyRecycleBin(

    com.salesforce.soap.partner.EmptyRecycleBin emptyRecycleBin855, com.salesforce.soap.partner.SessionHeader sessionHeader856,
            com.salesforce.soap.partner.CallOptions callOptions857)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[47].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:emptyRecycleBinRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), emptyRecycleBin855,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "emptyRecycleBin")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "emptyRecycleBin"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader856 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader856 = toOM(sessionHeader856,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "emptyRecycleBin")));
                addHeader(omElementsessionHeader856, env);

            }

            // add the children only if the parameter is not null
            if (callOptions857 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions857 = toOM(callOptions857,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "emptyRecycleBin")));
                addHeader(omElementcallOptions857, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.EmptyRecycleBinResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.EmptyRecycleBinResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "emptyRecycleBin"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "emptyRecycleBin"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "emptyRecycleBin"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Empty a set of sObjects from the recycle bin
     * 
     * @see com.salesforce.soap.partner.SforceService#startemptyRecycleBin
     * @param emptyRecycleBin855
     * 
     * @param sessionHeader856
     * 
     * @param callOptions857
     */
    public void startemptyRecycleBin(

    com.salesforce.soap.partner.EmptyRecycleBin emptyRecycleBin855, com.salesforce.soap.partner.SessionHeader sessionHeader856,
            com.salesforce.soap.partner.CallOptions callOptions857,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[47].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:emptyRecycleBinRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), emptyRecycleBin855,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "emptyRecycleBin")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "emptyRecycleBin"));

        // add the soap_headers only if they are not null
        if (sessionHeader856 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader856 = toOM(sessionHeader856,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "emptyRecycleBin")));
            addHeader(omElementsessionHeader856, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions857 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions857 = toOM(callOptions857,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "emptyRecycleBin")));
            addHeader(omElementcallOptions857, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.EmptyRecycleBinResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultemptyRecycleBin((com.salesforce.soap.partner.EmptyRecycleBinResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErroremptyRecycleBin(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "emptyRecycleBin"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "emptyRecycleBin"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "emptyRecycleBin"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErroremptyRecycleBin((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErroremptyRecycleBin(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErroremptyRecycleBin(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErroremptyRecycleBin(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErroremptyRecycleBin(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErroremptyRecycleBin(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErroremptyRecycleBin(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErroremptyRecycleBin(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErroremptyRecycleBin(f);
                            }
                        } else {
                            callback.receiveErroremptyRecycleBin(f);
                        }
                    } else {
                        callback.receiveErroremptyRecycleBin(f);
                    }
                } else {
                    callback.receiveErroremptyRecycleBin(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErroremptyRecycleBin(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[47].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[47].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Update or insert a set of sObjects based on object id
     * 
     * @see com.salesforce.soap.partner.SforceService#upsert
     * @param upsert859
     * 
     * @param sessionHeader860
     * 
     * @param callOptions861
     * 
     * @param assignmentRuleHeader862
     * 
     * @param mruHeader863
     * 
     * @param allowFieldTruncationHeader864
     * 
     * @param disableFeedTrackingHeader865
     * 
     * @param streamingEnabledHeader866
     * 
     * @param allOrNoneHeader867
     * 
     * @param duplicateRuleHeader868
     * 
     * @param localeOptions869
     * 
     * @param debuggingHeader870
     * 
     * @param packageVersionHeader871
     * 
     * @param emailHeader872
     * 
     * @param ownerChangeOptions873
     * 
     * @throws com.salesforce.soap.partner.InvalidSObjectFault :
     * @throws com.salesforce.soap.partner.InvalidIdFault :
     * @throws com.salesforce.soap.partner.InvalidFieldFault :
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.UpsertResponse upsert(

    com.salesforce.soap.partner.Upsert upsert859, com.salesforce.soap.partner.SessionHeader sessionHeader860,
            com.salesforce.soap.partner.CallOptions callOptions861,
            com.salesforce.soap.partner.AssignmentRuleHeader assignmentRuleHeader862,
            com.salesforce.soap.partner.MruHeader mruHeader863,
            com.salesforce.soap.partner.AllowFieldTruncationHeader allowFieldTruncationHeader864,
            com.salesforce.soap.partner.DisableFeedTrackingHeader disableFeedTrackingHeader865,
            com.salesforce.soap.partner.StreamingEnabledHeader streamingEnabledHeader866,
            com.salesforce.soap.partner.AllOrNoneHeader allOrNoneHeader867,
            com.salesforce.soap.partner.DuplicateRuleHeader duplicateRuleHeader868,
            com.salesforce.soap.partner.LocaleOptions localeOptions869,
            com.salesforce.soap.partner.DebuggingHeader debuggingHeader870,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader871,
            com.salesforce.soap.partner.EmailHeader emailHeader872,
            com.salesforce.soap.partner.OwnerChangeOptions ownerChangeOptions873)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.InvalidSObjectFault, com.salesforce.soap.partner.InvalidIdFault,
            com.salesforce.soap.partner.InvalidFieldFault, com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[48].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:upsertRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), upsert859,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader860 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader860 = toOM(sessionHeader860,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
                addHeader(omElementsessionHeader860, env);

            }

            // add the children only if the parameter is not null
            if (callOptions861 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions861 = toOM(callOptions861,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
                addHeader(omElementcallOptions861, env);

            }

            // add the children only if the parameter is not null
            if (assignmentRuleHeader862 != null) {

                org.apache.axiom.om.OMElement omElementassignmentRuleHeader862 = toOM(assignmentRuleHeader862,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
                addHeader(omElementassignmentRuleHeader862, env);

            }

            // add the children only if the parameter is not null
            if (mruHeader863 != null) {

                org.apache.axiom.om.OMElement omElementmruHeader863 = toOM(mruHeader863,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
                addHeader(omElementmruHeader863, env);

            }

            // add the children only if the parameter is not null
            if (allowFieldTruncationHeader864 != null) {

                org.apache.axiom.om.OMElement omElementallowFieldTruncationHeader864 = toOM(allowFieldTruncationHeader864,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
                addHeader(omElementallowFieldTruncationHeader864, env);

            }

            // add the children only if the parameter is not null
            if (disableFeedTrackingHeader865 != null) {

                org.apache.axiom.om.OMElement omElementdisableFeedTrackingHeader865 = toOM(disableFeedTrackingHeader865,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
                addHeader(omElementdisableFeedTrackingHeader865, env);

            }

            // add the children only if the parameter is not null
            if (streamingEnabledHeader866 != null) {

                org.apache.axiom.om.OMElement omElementstreamingEnabledHeader866 = toOM(streamingEnabledHeader866,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
                addHeader(omElementstreamingEnabledHeader866, env);

            }

            // add the children only if the parameter is not null
            if (allOrNoneHeader867 != null) {

                org.apache.axiom.om.OMElement omElementallOrNoneHeader867 = toOM(allOrNoneHeader867,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
                addHeader(omElementallOrNoneHeader867, env);

            }

            // add the children only if the parameter is not null
            if (duplicateRuleHeader868 != null) {

                org.apache.axiom.om.OMElement omElementduplicateRuleHeader868 = toOM(duplicateRuleHeader868,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
                addHeader(omElementduplicateRuleHeader868, env);

            }

            // add the children only if the parameter is not null
            if (localeOptions869 != null) {

                org.apache.axiom.om.OMElement omElementlocaleOptions869 = toOM(localeOptions869,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
                addHeader(omElementlocaleOptions869, env);

            }

            // add the children only if the parameter is not null
            if (debuggingHeader870 != null) {

                org.apache.axiom.om.OMElement omElementdebuggingHeader870 = toOM(debuggingHeader870,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
                addHeader(omElementdebuggingHeader870, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader871 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader871 = toOM(packageVersionHeader871,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
                addHeader(omElementpackageVersionHeader871, env);

            }

            // add the children only if the parameter is not null
            if (emailHeader872 != null) {

                org.apache.axiom.om.OMElement omElementemailHeader872 = toOM(emailHeader872,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
                addHeader(omElementemailHeader872, env);

            }

            // add the children only if the parameter is not null
            if (ownerChangeOptions873 != null) {

                org.apache.axiom.om.OMElement omElementownerChangeOptions873 = toOM(ownerChangeOptions873,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
                addHeader(omElementownerChangeOptions873, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.UpsertResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.UpsertResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "upsert"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "upsert"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "upsert"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                            throw (com.salesforce.soap.partner.InvalidSObjectFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                            throw (com.salesforce.soap.partner.InvalidIdFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.InvalidFieldFault) {
                            throw (com.salesforce.soap.partner.InvalidFieldFault) ex;
                        }

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Update or insert a set of sObjects based on object id
     * 
     * @see com.salesforce.soap.partner.SforceService#startupsert
     * @param upsert859
     * 
     * @param sessionHeader860
     * 
     * @param callOptions861
     * 
     * @param assignmentRuleHeader862
     * 
     * @param mruHeader863
     * 
     * @param allowFieldTruncationHeader864
     * 
     * @param disableFeedTrackingHeader865
     * 
     * @param streamingEnabledHeader866
     * 
     * @param allOrNoneHeader867
     * 
     * @param duplicateRuleHeader868
     * 
     * @param localeOptions869
     * 
     * @param debuggingHeader870
     * 
     * @param packageVersionHeader871
     * 
     * @param emailHeader872
     * 
     * @param ownerChangeOptions873
     */
    public void startupsert(

    com.salesforce.soap.partner.Upsert upsert859, com.salesforce.soap.partner.SessionHeader sessionHeader860,
            com.salesforce.soap.partner.CallOptions callOptions861,
            com.salesforce.soap.partner.AssignmentRuleHeader assignmentRuleHeader862,
            com.salesforce.soap.partner.MruHeader mruHeader863,
            com.salesforce.soap.partner.AllowFieldTruncationHeader allowFieldTruncationHeader864,
            com.salesforce.soap.partner.DisableFeedTrackingHeader disableFeedTrackingHeader865,
            com.salesforce.soap.partner.StreamingEnabledHeader streamingEnabledHeader866,
            com.salesforce.soap.partner.AllOrNoneHeader allOrNoneHeader867,
            com.salesforce.soap.partner.DuplicateRuleHeader duplicateRuleHeader868,
            com.salesforce.soap.partner.LocaleOptions localeOptions869,
            com.salesforce.soap.partner.DebuggingHeader debuggingHeader870,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader871,
            com.salesforce.soap.partner.EmailHeader emailHeader872,
            com.salesforce.soap.partner.OwnerChangeOptions ownerChangeOptions873,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[48].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:upsertRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), upsert859,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert"));

        // add the soap_headers only if they are not null
        if (sessionHeader860 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader860 = toOM(sessionHeader860,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
            addHeader(omElementsessionHeader860, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions861 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions861 = toOM(callOptions861,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
            addHeader(omElementcallOptions861, env);

        }

        // add the soap_headers only if they are not null
        if (assignmentRuleHeader862 != null) {

            org.apache.axiom.om.OMElement omElementassignmentRuleHeader862 = toOM(assignmentRuleHeader862,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
            addHeader(omElementassignmentRuleHeader862, env);

        }

        // add the soap_headers only if they are not null
        if (mruHeader863 != null) {

            org.apache.axiom.om.OMElement omElementmruHeader863 = toOM(mruHeader863,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
            addHeader(omElementmruHeader863, env);

        }

        // add the soap_headers only if they are not null
        if (allowFieldTruncationHeader864 != null) {

            org.apache.axiom.om.OMElement omElementallowFieldTruncationHeader864 = toOM(allowFieldTruncationHeader864,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
            addHeader(omElementallowFieldTruncationHeader864, env);

        }

        // add the soap_headers only if they are not null
        if (disableFeedTrackingHeader865 != null) {

            org.apache.axiom.om.OMElement omElementdisableFeedTrackingHeader865 = toOM(disableFeedTrackingHeader865,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
            addHeader(omElementdisableFeedTrackingHeader865, env);

        }

        // add the soap_headers only if they are not null
        if (streamingEnabledHeader866 != null) {

            org.apache.axiom.om.OMElement omElementstreamingEnabledHeader866 = toOM(streamingEnabledHeader866,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
            addHeader(omElementstreamingEnabledHeader866, env);

        }

        // add the soap_headers only if they are not null
        if (allOrNoneHeader867 != null) {

            org.apache.axiom.om.OMElement omElementallOrNoneHeader867 = toOM(allOrNoneHeader867,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
            addHeader(omElementallOrNoneHeader867, env);

        }

        // add the soap_headers only if they are not null
        if (duplicateRuleHeader868 != null) {

            org.apache.axiom.om.OMElement omElementduplicateRuleHeader868 = toOM(duplicateRuleHeader868,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
            addHeader(omElementduplicateRuleHeader868, env);

        }

        // add the soap_headers only if they are not null
        if (localeOptions869 != null) {

            org.apache.axiom.om.OMElement omElementlocaleOptions869 = toOM(localeOptions869,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
            addHeader(omElementlocaleOptions869, env);

        }

        // add the soap_headers only if they are not null
        if (debuggingHeader870 != null) {

            org.apache.axiom.om.OMElement omElementdebuggingHeader870 = toOM(debuggingHeader870,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
            addHeader(omElementdebuggingHeader870, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader871 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader871 = toOM(packageVersionHeader871,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
            addHeader(omElementpackageVersionHeader871, env);

        }

        // add the soap_headers only if they are not null
        if (emailHeader872 != null) {

            org.apache.axiom.om.OMElement omElementemailHeader872 = toOM(emailHeader872,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
            addHeader(omElementemailHeader872, env);

        }

        // add the soap_headers only if they are not null
        if (ownerChangeOptions873 != null) {

            org.apache.axiom.om.OMElement omElementownerChangeOptions873 = toOM(ownerChangeOptions873,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "upsert")));
            addHeader(omElementownerChangeOptions873, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.UpsertResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultupsert((com.salesforce.soap.partner.UpsertResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorupsert(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "upsert"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "upsert"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "upsert"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.InvalidSObjectFault) {
                                    callback.receiveErrorupsert((com.salesforce.soap.partner.InvalidSObjectFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.InvalidIdFault) {
                                    callback.receiveErrorupsert((com.salesforce.soap.partner.InvalidIdFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.InvalidFieldFault) {
                                    callback.receiveErrorupsert((com.salesforce.soap.partner.InvalidFieldFault) ex);
                                    return;
                                }

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrorupsert((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrorupsert(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorupsert(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorupsert(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorupsert(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorupsert(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorupsert(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorupsert(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorupsert(f);
                            }
                        } else {
                            callback.receiveErrorupsert(f);
                        }
                    } else {
                        callback.receiveErrorupsert(f);
                    }
                } else {
                    callback.receiveErrorupsert(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorupsert(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[48].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[48].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature convert a set of leads
     * 
     * @see com.salesforce.soap.partner.SforceService#convertLead
     * @param convertLead875
     * 
     * @param sessionHeader876
     * 
     * @param callOptions877
     * 
     * @param allowFieldTruncationHeader878
     * 
     * @param disableFeedTrackingHeader879
     * 
     * @param streamingEnabledHeader880
     * 
     * @param duplicateRuleHeader881
     * 
     * @param localeOptions882
     * 
     * @param debuggingHeader883
     * 
     * @param packageVersionHeader884
     * 
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.ConvertLeadResponse convertLead(

    com.salesforce.soap.partner.ConvertLead convertLead875, com.salesforce.soap.partner.SessionHeader sessionHeader876,
            com.salesforce.soap.partner.CallOptions callOptions877,
            com.salesforce.soap.partner.AllowFieldTruncationHeader allowFieldTruncationHeader878,
            com.salesforce.soap.partner.DisableFeedTrackingHeader disableFeedTrackingHeader879,
            com.salesforce.soap.partner.StreamingEnabledHeader streamingEnabledHeader880,
            com.salesforce.soap.partner.DuplicateRuleHeader duplicateRuleHeader881,
            com.salesforce.soap.partner.LocaleOptions localeOptions882,
            com.salesforce.soap.partner.DebuggingHeader debuggingHeader883,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader884)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[49].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:convertLeadRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), convertLead875,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "convertLead")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "convertLead"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader876 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader876 = toOM(sessionHeader876,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "convertLead")));
                addHeader(omElementsessionHeader876, env);

            }

            // add the children only if the parameter is not null
            if (callOptions877 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions877 = toOM(callOptions877,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "convertLead")));
                addHeader(omElementcallOptions877, env);

            }

            // add the children only if the parameter is not null
            if (allowFieldTruncationHeader878 != null) {

                org.apache.axiom.om.OMElement omElementallowFieldTruncationHeader878 = toOM(allowFieldTruncationHeader878,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "convertLead")));
                addHeader(omElementallowFieldTruncationHeader878, env);

            }

            // add the children only if the parameter is not null
            if (disableFeedTrackingHeader879 != null) {

                org.apache.axiom.om.OMElement omElementdisableFeedTrackingHeader879 = toOM(disableFeedTrackingHeader879,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "convertLead")));
                addHeader(omElementdisableFeedTrackingHeader879, env);

            }

            // add the children only if the parameter is not null
            if (streamingEnabledHeader880 != null) {

                org.apache.axiom.om.OMElement omElementstreamingEnabledHeader880 = toOM(streamingEnabledHeader880,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "convertLead")));
                addHeader(omElementstreamingEnabledHeader880, env);

            }

            // add the children only if the parameter is not null
            if (duplicateRuleHeader881 != null) {

                org.apache.axiom.om.OMElement omElementduplicateRuleHeader881 = toOM(duplicateRuleHeader881,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "convertLead")));
                addHeader(omElementduplicateRuleHeader881, env);

            }

            // add the children only if the parameter is not null
            if (localeOptions882 != null) {

                org.apache.axiom.om.OMElement omElementlocaleOptions882 = toOM(localeOptions882,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "convertLead")));
                addHeader(omElementlocaleOptions882, env);

            }

            // add the children only if the parameter is not null
            if (debuggingHeader883 != null) {

                org.apache.axiom.om.OMElement omElementdebuggingHeader883 = toOM(debuggingHeader883,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "convertLead")));
                addHeader(omElementdebuggingHeader883, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader884 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader884 = toOM(packageVersionHeader884,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "convertLead")));
                addHeader(omElementpackageVersionHeader884, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.ConvertLeadResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.ConvertLeadResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap
                        .containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "convertLead"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "convertLead"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "convertLead"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations convert a set of leads
     * 
     * @see com.salesforce.soap.partner.SforceService#startconvertLead
     * @param convertLead875
     * 
     * @param sessionHeader876
     * 
     * @param callOptions877
     * 
     * @param allowFieldTruncationHeader878
     * 
     * @param disableFeedTrackingHeader879
     * 
     * @param streamingEnabledHeader880
     * 
     * @param duplicateRuleHeader881
     * 
     * @param localeOptions882
     * 
     * @param debuggingHeader883
     * 
     * @param packageVersionHeader884
     */
    public void startconvertLead(

    com.salesforce.soap.partner.ConvertLead convertLead875, com.salesforce.soap.partner.SessionHeader sessionHeader876,
            com.salesforce.soap.partner.CallOptions callOptions877,
            com.salesforce.soap.partner.AllowFieldTruncationHeader allowFieldTruncationHeader878,
            com.salesforce.soap.partner.DisableFeedTrackingHeader disableFeedTrackingHeader879,
            com.salesforce.soap.partner.StreamingEnabledHeader streamingEnabledHeader880,
            com.salesforce.soap.partner.DuplicateRuleHeader duplicateRuleHeader881,
            com.salesforce.soap.partner.LocaleOptions localeOptions882,
            com.salesforce.soap.partner.DebuggingHeader debuggingHeader883,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader884,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[49].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:convertLeadRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), convertLead875,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "convertLead")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "convertLead"));

        // add the soap_headers only if they are not null
        if (sessionHeader876 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader876 = toOM(sessionHeader876,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "convertLead")));
            addHeader(omElementsessionHeader876, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions877 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions877 = toOM(callOptions877,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "convertLead")));
            addHeader(omElementcallOptions877, env);

        }

        // add the soap_headers only if they are not null
        if (allowFieldTruncationHeader878 != null) {

            org.apache.axiom.om.OMElement omElementallowFieldTruncationHeader878 = toOM(allowFieldTruncationHeader878,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "convertLead")));
            addHeader(omElementallowFieldTruncationHeader878, env);

        }

        // add the soap_headers only if they are not null
        if (disableFeedTrackingHeader879 != null) {

            org.apache.axiom.om.OMElement omElementdisableFeedTrackingHeader879 = toOM(disableFeedTrackingHeader879,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "convertLead")));
            addHeader(omElementdisableFeedTrackingHeader879, env);

        }

        // add the soap_headers only if they are not null
        if (streamingEnabledHeader880 != null) {

            org.apache.axiom.om.OMElement omElementstreamingEnabledHeader880 = toOM(streamingEnabledHeader880,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "convertLead")));
            addHeader(omElementstreamingEnabledHeader880, env);

        }

        // add the soap_headers only if they are not null
        if (duplicateRuleHeader881 != null) {

            org.apache.axiom.om.OMElement omElementduplicateRuleHeader881 = toOM(duplicateRuleHeader881,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "convertLead")));
            addHeader(omElementduplicateRuleHeader881, env);

        }

        // add the soap_headers only if they are not null
        if (localeOptions882 != null) {

            org.apache.axiom.om.OMElement omElementlocaleOptions882 = toOM(localeOptions882,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "convertLead")));
            addHeader(omElementlocaleOptions882, env);

        }

        // add the soap_headers only if they are not null
        if (debuggingHeader883 != null) {

            org.apache.axiom.om.OMElement omElementdebuggingHeader883 = toOM(debuggingHeader883,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "convertLead")));
            addHeader(omElementdebuggingHeader883, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader884 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader884 = toOM(packageVersionHeader884,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "convertLead")));
            addHeader(omElementpackageVersionHeader884, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.ConvertLeadResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultconvertLead((com.salesforce.soap.partner.ConvertLeadResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorconvertLead(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "convertLead"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "convertLead"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "convertLead"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrorconvertLead((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrorconvertLead(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorconvertLead(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorconvertLead(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorconvertLead(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorconvertLead(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorconvertLead(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorconvertLead(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorconvertLead(f);
                            }
                        } else {
                            callback.receiveErrorconvertLead(f);
                        }
                    } else {
                        callback.receiveErrorconvertLead(f);
                    }
                } else {
                    callback.receiveErrorconvertLead(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorconvertLead(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[49].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[49].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Delete a set of sObjects
     * 
     * @see com.salesforce.soap.partner.SforceService#delete
     * @param delete886
     * 
     * @param sessionHeader887
     * 
     * @param callOptions888
     * 
     * @param packageVersionHeader889
     * 
     * @param userTerritoryDeleteHeader890
     * 
     * @param emailHeader891
     * 
     * @param allowFieldTruncationHeader892
     * 
     * @param disableFeedTrackingHeader893
     * 
     * @param streamingEnabledHeader894
     * 
     * @param allOrNoneHeader895
     * 
     * @param duplicateRuleHeader896
     * 
     * @param localeOptions897
     * 
     * @param debuggingHeader898
     * 
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.DeleteResponse delete(

    com.salesforce.soap.partner.Delete delete886, com.salesforce.soap.partner.SessionHeader sessionHeader887,
            com.salesforce.soap.partner.CallOptions callOptions888,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader889,
            com.salesforce.soap.partner.UserTerritoryDeleteHeader userTerritoryDeleteHeader890,
            com.salesforce.soap.partner.EmailHeader emailHeader891,
            com.salesforce.soap.partner.AllowFieldTruncationHeader allowFieldTruncationHeader892,
            com.salesforce.soap.partner.DisableFeedTrackingHeader disableFeedTrackingHeader893,
            com.salesforce.soap.partner.StreamingEnabledHeader streamingEnabledHeader894,
            com.salesforce.soap.partner.AllOrNoneHeader allOrNoneHeader895,
            com.salesforce.soap.partner.DuplicateRuleHeader duplicateRuleHeader896,
            com.salesforce.soap.partner.LocaleOptions localeOptions897,
            com.salesforce.soap.partner.DebuggingHeader debuggingHeader898)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[50].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:deleteRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), delete886,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader887 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader887 = toOM(sessionHeader887,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")));
                addHeader(omElementsessionHeader887, env);

            }

            // add the children only if the parameter is not null
            if (callOptions888 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions888 = toOM(callOptions888,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")));
                addHeader(omElementcallOptions888, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader889 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader889 = toOM(packageVersionHeader889,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")));
                addHeader(omElementpackageVersionHeader889, env);

            }

            // add the children only if the parameter is not null
            if (userTerritoryDeleteHeader890 != null) {

                org.apache.axiom.om.OMElement omElementuserTerritoryDeleteHeader890 = toOM(userTerritoryDeleteHeader890,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")));
                addHeader(omElementuserTerritoryDeleteHeader890, env);

            }

            // add the children only if the parameter is not null
            if (emailHeader891 != null) {

                org.apache.axiom.om.OMElement omElementemailHeader891 = toOM(emailHeader891,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")));
                addHeader(omElementemailHeader891, env);

            }

            // add the children only if the parameter is not null
            if (allowFieldTruncationHeader892 != null) {

                org.apache.axiom.om.OMElement omElementallowFieldTruncationHeader892 = toOM(allowFieldTruncationHeader892,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")));
                addHeader(omElementallowFieldTruncationHeader892, env);

            }

            // add the children only if the parameter is not null
            if (disableFeedTrackingHeader893 != null) {

                org.apache.axiom.om.OMElement omElementdisableFeedTrackingHeader893 = toOM(disableFeedTrackingHeader893,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")));
                addHeader(omElementdisableFeedTrackingHeader893, env);

            }

            // add the children only if the parameter is not null
            if (streamingEnabledHeader894 != null) {

                org.apache.axiom.om.OMElement omElementstreamingEnabledHeader894 = toOM(streamingEnabledHeader894,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")));
                addHeader(omElementstreamingEnabledHeader894, env);

            }

            // add the children only if the parameter is not null
            if (allOrNoneHeader895 != null) {

                org.apache.axiom.om.OMElement omElementallOrNoneHeader895 = toOM(allOrNoneHeader895,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")));
                addHeader(omElementallOrNoneHeader895, env);

            }

            // add the children only if the parameter is not null
            if (duplicateRuleHeader896 != null) {

                org.apache.axiom.om.OMElement omElementduplicateRuleHeader896 = toOM(duplicateRuleHeader896,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")));
                addHeader(omElementduplicateRuleHeader896, env);

            }

            // add the children only if the parameter is not null
            if (localeOptions897 != null) {

                org.apache.axiom.om.OMElement omElementlocaleOptions897 = toOM(localeOptions897,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")));
                addHeader(omElementlocaleOptions897, env);

            }

            // add the children only if the parameter is not null
            if (debuggingHeader898 != null) {

                org.apache.axiom.om.OMElement omElementdebuggingHeader898 = toOM(debuggingHeader898,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")));
                addHeader(omElementdebuggingHeader898, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.DeleteResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.DeleteResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "delete"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "delete"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "delete"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Delete a set of sObjects
     * 
     * @see com.salesforce.soap.partner.SforceService#startdelete
     * @param delete886
     * 
     * @param sessionHeader887
     * 
     * @param callOptions888
     * 
     * @param packageVersionHeader889
     * 
     * @param userTerritoryDeleteHeader890
     * 
     * @param emailHeader891
     * 
     * @param allowFieldTruncationHeader892
     * 
     * @param disableFeedTrackingHeader893
     * 
     * @param streamingEnabledHeader894
     * 
     * @param allOrNoneHeader895
     * 
     * @param duplicateRuleHeader896
     * 
     * @param localeOptions897
     * 
     * @param debuggingHeader898
     */
    public void startdelete(

    com.salesforce.soap.partner.Delete delete886, com.salesforce.soap.partner.SessionHeader sessionHeader887,
            com.salesforce.soap.partner.CallOptions callOptions888,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader889,
            com.salesforce.soap.partner.UserTerritoryDeleteHeader userTerritoryDeleteHeader890,
            com.salesforce.soap.partner.EmailHeader emailHeader891,
            com.salesforce.soap.partner.AllowFieldTruncationHeader allowFieldTruncationHeader892,
            com.salesforce.soap.partner.DisableFeedTrackingHeader disableFeedTrackingHeader893,
            com.salesforce.soap.partner.StreamingEnabledHeader streamingEnabledHeader894,
            com.salesforce.soap.partner.AllOrNoneHeader allOrNoneHeader895,
            com.salesforce.soap.partner.DuplicateRuleHeader duplicateRuleHeader896,
            com.salesforce.soap.partner.LocaleOptions localeOptions897,
            com.salesforce.soap.partner.DebuggingHeader debuggingHeader898,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[50].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:deleteRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), delete886,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete"));

        // add the soap_headers only if they are not null
        if (sessionHeader887 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader887 = toOM(sessionHeader887,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")));
            addHeader(omElementsessionHeader887, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions888 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions888 = toOM(callOptions888,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")));
            addHeader(omElementcallOptions888, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader889 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader889 = toOM(packageVersionHeader889,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")));
            addHeader(omElementpackageVersionHeader889, env);

        }

        // add the soap_headers only if they are not null
        if (userTerritoryDeleteHeader890 != null) {

            org.apache.axiom.om.OMElement omElementuserTerritoryDeleteHeader890 = toOM(userTerritoryDeleteHeader890,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")));
            addHeader(omElementuserTerritoryDeleteHeader890, env);

        }

        // add the soap_headers only if they are not null
        if (emailHeader891 != null) {

            org.apache.axiom.om.OMElement omElementemailHeader891 = toOM(emailHeader891,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")));
            addHeader(omElementemailHeader891, env);

        }

        // add the soap_headers only if they are not null
        if (allowFieldTruncationHeader892 != null) {

            org.apache.axiom.om.OMElement omElementallowFieldTruncationHeader892 = toOM(allowFieldTruncationHeader892,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")));
            addHeader(omElementallowFieldTruncationHeader892, env);

        }

        // add the soap_headers only if they are not null
        if (disableFeedTrackingHeader893 != null) {

            org.apache.axiom.om.OMElement omElementdisableFeedTrackingHeader893 = toOM(disableFeedTrackingHeader893,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")));
            addHeader(omElementdisableFeedTrackingHeader893, env);

        }

        // add the soap_headers only if they are not null
        if (streamingEnabledHeader894 != null) {

            org.apache.axiom.om.OMElement omElementstreamingEnabledHeader894 = toOM(streamingEnabledHeader894,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")));
            addHeader(omElementstreamingEnabledHeader894, env);

        }

        // add the soap_headers only if they are not null
        if (allOrNoneHeader895 != null) {

            org.apache.axiom.om.OMElement omElementallOrNoneHeader895 = toOM(allOrNoneHeader895,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")));
            addHeader(omElementallOrNoneHeader895, env);

        }

        // add the soap_headers only if they are not null
        if (duplicateRuleHeader896 != null) {

            org.apache.axiom.om.OMElement omElementduplicateRuleHeader896 = toOM(duplicateRuleHeader896,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")));
            addHeader(omElementduplicateRuleHeader896, env);

        }

        // add the soap_headers only if they are not null
        if (localeOptions897 != null) {

            org.apache.axiom.om.OMElement omElementlocaleOptions897 = toOM(localeOptions897,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")));
            addHeader(omElementlocaleOptions897, env);

        }

        // add the soap_headers only if they are not null
        if (debuggingHeader898 != null) {

            org.apache.axiom.om.OMElement omElementdebuggingHeader898 = toOM(debuggingHeader898,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "delete")));
            addHeader(omElementdebuggingHeader898, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.DeleteResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultdelete((com.salesforce.soap.partner.DeleteResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrordelete(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "delete"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "delete"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "delete"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrordelete((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrordelete(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordelete(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordelete(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordelete(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordelete(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordelete(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordelete(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordelete(f);
                            }
                        } else {
                            callback.receiveErrordelete(f);
                        }
                    } else {
                        callback.receiveErrordelete(f);
                    }
                } else {
                    callback.receiveErrordelete(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrordelete(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[50].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[50].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature Describe Gloal and Themes
     * 
     * @see com.salesforce.soap.partner.SforceService#describeGlobalTheme
     * @param describeGlobalTheme900
     * 
     * @param sessionHeader901
     * 
     * @param callOptions902
     * 
     * @param packageVersionHeader903
     * 
     * @throws com.salesforce.soap.partner.UnexpectedErrorFault :
     */

    public com.salesforce.soap.partner.DescribeGlobalThemeResponse describeGlobalTheme(

    com.salesforce.soap.partner.DescribeGlobalThemeE describeGlobalTheme900,
            com.salesforce.soap.partner.SessionHeader sessionHeader901, com.salesforce.soap.partner.CallOptions callOptions902,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader903)

    throws java.rmi.RemoteException

    , com.salesforce.soap.partner.UnexpectedErrorFault {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[51].getName());
            _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeGlobalThemeRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeGlobalTheme900,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeGlobalTheme")),
                    new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeGlobalTheme"));

            env.build();

            // add the children only if the parameter is not null
            if (sessionHeader901 != null) {

                org.apache.axiom.om.OMElement omElementsessionHeader901 = toOM(sessionHeader901,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeGlobalTheme")));
                addHeader(omElementsessionHeader901, env);

            }

            // add the children only if the parameter is not null
            if (callOptions902 != null) {

                org.apache.axiom.om.OMElement omElementcallOptions902 = toOM(callOptions902,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeGlobalTheme")));
                addHeader(omElementcallOptions902, env);

            }

            // add the children only if the parameter is not null
            if (packageVersionHeader903 != null) {

                org.apache.axiom.om.OMElement omElementpackageVersionHeader903 = toOM(packageVersionHeader903,
                        optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeGlobalTheme")));
                addHeader(omElementpackageVersionHeader903, env);

            }

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
                    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
                    com.salesforce.soap.partner.DescribeGlobalThemeResponse.class, getEnvelopeNamespaces(_returnEnv));

            return (com.salesforce.soap.partner.DescribeGlobalThemeResponse) object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                        "describeGlobalTheme"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeGlobalTheme"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeGlobalTheme"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                            throw (com.salesforce.soap.partner.UnexpectedErrorFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations Describe Gloal and Themes
     * 
     * @see com.salesforce.soap.partner.SforceService#startdescribeGlobalTheme
     * @param describeGlobalTheme900
     * 
     * @param sessionHeader901
     * 
     * @param callOptions902
     * 
     * @param packageVersionHeader903
     */
    public void startdescribeGlobalTheme(

    com.salesforce.soap.partner.DescribeGlobalThemeE describeGlobalTheme900,
            com.salesforce.soap.partner.SessionHeader sessionHeader901, com.salesforce.soap.partner.CallOptions callOptions902,
            com.salesforce.soap.partner.PackageVersionHeader packageVersionHeader903,

            final com.salesforce.soap.partner.SforceServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[51].getName());
        _operationClient.getOptions().setAction("urn:partner.soap.sforce.com:Soap:describeGlobalThemeRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        // Style is Doc.

        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), describeGlobalTheme900,
                optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeGlobalTheme")),
                new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeGlobalTheme"));

        // add the soap_headers only if they are not null
        if (sessionHeader901 != null) {

            org.apache.axiom.om.OMElement omElementsessionHeader901 = toOM(sessionHeader901,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeGlobalTheme")));
            addHeader(omElementsessionHeader901, env);

        }

        // add the soap_headers only if they are not null
        if (callOptions902 != null) {

            org.apache.axiom.om.OMElement omElementcallOptions902 = toOM(callOptions902,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeGlobalTheme")));
            addHeader(omElementcallOptions902, env);

        }

        // add the soap_headers only if they are not null
        if (packageVersionHeader903 != null) {

            org.apache.axiom.om.OMElement omElementpackageVersionHeader903 = toOM(packageVersionHeader903,
                    optimizeContent(new javax.xml.namespace.QName("urn:partner.soap.sforce.com", "describeGlobalTheme")));
            addHeader(omElementpackageVersionHeader903, env);

        }

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            com.salesforce.soap.partner.DescribeGlobalThemeResponse.class, getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultdescribeGlobalTheme((com.salesforce.soap.partner.DescribeGlobalThemeResponse) object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrordescribeGlobalTheme(e);
                }
            }

            public void onError(java.lang.Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt != null) {
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
                                "describeGlobalTheme"))) {
                            // make the fault by reflection
                            try {
                                java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeGlobalTheme"));
                                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                                // message class
                                java.lang.String messageClassName = (java.lang.String) faultMessageMap
                                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "describeGlobalTheme"));
                                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new java.lang.Class[] { messageClass });
                                m.invoke(ex, new java.lang.Object[] { messageObject });

                                if (ex instanceof com.salesforce.soap.partner.UnexpectedErrorFault) {
                                    callback.receiveErrordescribeGlobalTheme((com.salesforce.soap.partner.UnexpectedErrorFault) ex);
                                    return;
                                }

                                callback.receiveErrordescribeGlobalTheme(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch (java.lang.ClassCastException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeGlobalTheme(f);
                            } catch (java.lang.ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeGlobalTheme(f);
                            } catch (java.lang.NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeGlobalTheme(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeGlobalTheme(f);
                            } catch (java.lang.IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeGlobalTheme(f);
                            } catch (java.lang.InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeGlobalTheme(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrordescribeGlobalTheme(f);
                            }
                        } else {
                            callback.receiveErrordescribeGlobalTheme(f);
                        }
                    } else {
                        callback.receiveErrordescribeGlobalTheme(f);
                    }
                } else {
                    callback.receiveErrordescribeGlobalTheme(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrordescribeGlobalTheme(axisFault);
                }
            }
        });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if (_operations[51].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[51].setMessageReceiver(_callbackReceiver);
        }

        // execute the operation client
        _operationClient.execute(false);

    }

    /**
     * A utility method that copies the namepaces from the SOAPEnvelope
     */
    private java.util.Map getEnvelopeNamespaces(org.apache.axiom.soap.SOAPEnvelope env) {
        java.util.Map returnMap = new java.util.HashMap();
        java.util.Iterator namespaceIterator = env.getAllDeclaredNamespaces();
        while (namespaceIterator.hasNext()) {
            org.apache.axiom.om.OMNamespace ns = (org.apache.axiom.om.OMNamespace) namespaceIterator.next();
            returnMap.put(ns.getPrefix(), ns.getNamespaceURI());
        }
        return returnMap;
    }

    private javax.xml.namespace.QName[] opNameArray = null;

    private boolean optimizeContent(javax.xml.namespace.QName opName) {

        if (opNameArray == null) {
            return false;
        }
        for (int i = 0; i < opNameArray.length; i++) {
            if (opName.equals(opNameArray[i])) {
                return true;
            }
        }
        return false;
    }

    // https://login.salesforce.com/services/Soap/u/34.0
    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.Merge param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.Merge.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.MergeResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.MergeResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.fault.InvalidSObjectFaultE param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.fault.InvalidSObjectFaultE.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.fault.InvalidIdFaultE param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.fault.InvalidIdFaultE.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.fault.InvalidFieldFaultE param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.fault.InvalidFieldFaultE.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.fault.UnexpectedErrorFaultE param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.SessionHeader param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.SessionHeader.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.CallOptions param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.CallOptions.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.AssignmentRuleHeader param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.AssignmentRuleHeader.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.MruHeader param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.MruHeader.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.AllowFieldTruncationHeader param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.AllowFieldTruncationHeader.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DisableFeedTrackingHeader param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DisableFeedTrackingHeader.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.StreamingEnabledHeader param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.StreamingEnabledHeader.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DuplicateRuleHeader param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DuplicateRuleHeader.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.LocaleOptions param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.LocaleOptions.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DebuggingHeader param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DebuggingHeader.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.PackageVersionHeader param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.PackageVersionHeader.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.EmailHeader param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.EmailHeader.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DebuggingInfo param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DebuggingInfo.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.LimitInfoHeader param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.LimitInfoHeader.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.GetUserInfo param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.GetUserInfo.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.GetUserInfoResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.GetUserInfoResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeAllTabs param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeAllTabs.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeAllTabsResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeAllTabsResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeQuickActions param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeQuickActions.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeQuickActionsResponse param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeQuickActionsResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeSoftphoneLayout param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeSoftphoneLayout.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeSoftphoneLayoutResponse param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeSoftphoneLayoutResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribePrimaryCompactLayouts param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribePrimaryCompactLayouts.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribePrimaryCompactLayoutsResponse param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribePrimaryCompactLayoutsResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.ExecuteListView param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.ExecuteListView.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.ExecuteListViewResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.ExecuteListViewResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.Update param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.Update.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.UpdateResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.UpdateResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.AllOrNoneHeader param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.AllOrNoneHeader.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.OwnerChangeOptions param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.OwnerChangeOptions.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.PerformQuickActions param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.PerformQuickActions.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.PerformQuickActionsResponse param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.PerformQuickActionsResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.SetPassword param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.SetPassword.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.SetPasswordResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.SetPasswordResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.fault.InvalidNewPasswordFaultE param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.fault.InvalidNewPasswordFaultE.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.Logout param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.Logout.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.LogoutResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.LogoutResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.Retrieve param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.Retrieve.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.RetrieveResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.RetrieveResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.fault.MalformedQueryFaultE param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.fault.MalformedQueryFaultE.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.QueryOptions param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.QueryOptions.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.QueryAll param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.QueryAll.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.QueryAllResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.QueryAllResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.fault.InvalidQueryLocatorFaultE param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.fault.InvalidQueryLocatorFaultE.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.Undelete param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.Undelete.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.UndeleteResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.UndeleteResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.GetUpdated param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.GetUpdated.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.GetUpdatedResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.GetUpdatedResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.Create param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.Create.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.CreateResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.CreateResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeAvailableQuickActions param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeAvailableQuickActions.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeAvailableQuickActionsResponse param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeAvailableQuickActionsResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.SendEmail param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.SendEmail.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.SendEmailResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.SendEmailResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.Search param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.Search.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.SearchResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.SearchResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.fault.MalformedSearchFaultE param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.fault.MalformedSearchFaultE.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeNouns param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeNouns.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeNounsResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeNounsResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.Query param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.Query.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.QueryResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.QueryResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeTheme param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeTheme.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeThemeResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeThemeResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeSObjectListViews param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeSObjectListViews.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeSObjectListViewsResponse param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeSObjectListViewsResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.GetDeleted param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.GetDeleted.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.GetDeletedResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.GetDeletedResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeFlexiPages param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeFlexiPages.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeFlexiPagesResponse param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeFlexiPagesResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeSearchScopeOrder param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeSearchScopeOrder.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeSearchScopeOrderResponse param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeSearchScopeOrderResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeSoqlListViews param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeSoqlListViews.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeSoqlListViewsResponse param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeSoqlListViewsResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeSearchLayouts param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeSearchLayouts.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeSearchLayoutsResponse param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeSearchLayoutsResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.Process param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.Process.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.ProcessResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.ProcessResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeDataCategoryGroupStructures param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeDataCategoryGroupStructures.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeDataCategoryGroupStructuresResponse param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeDataCategoryGroupStructuresResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.ResetPassword param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.ResetPassword.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.ResetPasswordResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.ResetPasswordResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeGlobal param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeGlobal.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeGlobalResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeGlobalResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeAppMenu param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeAppMenu.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeAppMenuResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeAppMenuResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeCompactLayouts param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeCompactLayouts.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeCompactLayoutsResponse param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeCompactLayoutsResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeApprovalLayoutE param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeApprovalLayoutE.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeApprovalLayoutResponse param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeApprovalLayoutResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.SendEmailMessage param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.SendEmailMessage.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.SendEmailMessageResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.SendEmailMessageResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeLayoutE param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeLayoutE.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeLayoutResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeLayoutResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeTabs param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeTabs.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeTabsResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeTabsResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeKnowledgeSettings param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeKnowledgeSettings.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeKnowledgeSettingsResponse param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeKnowledgeSettingsResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeDataCategoryGroups param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeDataCategoryGroups.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeDataCategoryGroupsResponse param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeDataCategoryGroupsResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.GetServerTimestamp param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.GetServerTimestamp.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.GetServerTimestampResponse param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.GetServerTimestampResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.InvalidateSessions param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.InvalidateSessions.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.InvalidateSessionsResponse param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.InvalidateSessionsResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeSObject param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeSObject.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeSObjectResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeSObjectResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.Login param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.Login.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.LoginResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.LoginResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.fault.LoginFaultE param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.fault.LoginFaultE.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.LoginScopeHeader param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.LoginScopeHeader.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.RetrieveQuickActionTemplates param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.RetrieveQuickActionTemplates.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.RetrieveQuickActionTemplatesResponse param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.RetrieveQuickActionTemplatesResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.QueryMore param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.QueryMore.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.QueryMoreResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.QueryMoreResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeSObjects param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeSObjects.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeSObjectsResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeSObjectsResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.EmptyRecycleBin param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.EmptyRecycleBin.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.EmptyRecycleBinResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.EmptyRecycleBinResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.Upsert param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.Upsert.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.UpsertResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.UpsertResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.ConvertLead param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.ConvertLead.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.ConvertLeadResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.ConvertLeadResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.Delete param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.Delete.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DeleteResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DeleteResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.UserTerritoryDeleteHeader param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.UserTerritoryDeleteHeader.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeGlobalThemeE param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeGlobalThemeE.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.om.OMElement toOM(com.salesforce.soap.partner.DescribeGlobalThemeResponse param,
            boolean optimizeContent) throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(com.salesforce.soap.partner.DescribeGlobalThemeResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.Merge param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.Merge.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.GetUserInfo param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.GetUserInfo.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.DescribeAllTabs param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.DescribeAllTabs.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.DescribeQuickActions param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(
                    param.getOMElement(com.salesforce.soap.partner.DescribeQuickActions.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.DescribeSoftphoneLayout param, boolean optimizeContent,
            javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(
                    param.getOMElement(com.salesforce.soap.partner.DescribeSoftphoneLayout.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.DescribePrimaryCompactLayouts param, boolean optimizeContent,
            javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(
                    param.getOMElement(com.salesforce.soap.partner.DescribePrimaryCompactLayouts.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.ExecuteListView param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.ExecuteListView.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.Update param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.Update.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.PerformQuickActions param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(
                    param.getOMElement(com.salesforce.soap.partner.PerformQuickActions.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.SetPassword param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.SetPassword.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.Logout param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.Logout.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.Retrieve param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.Retrieve.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.QueryAll param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.QueryAll.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.Undelete param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.Undelete.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.GetUpdated param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.GetUpdated.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.Create param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.Create.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.DescribeAvailableQuickActions param, boolean optimizeContent,
            javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(
                    param.getOMElement(com.salesforce.soap.partner.DescribeAvailableQuickActions.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.SendEmail param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.SendEmail.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.Search param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.Search.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.DescribeNouns param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.DescribeNouns.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.Query param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.Query.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.DescribeTheme param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.DescribeTheme.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.DescribeSObjectListViews param, boolean optimizeContent,
            javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(
                    param.getOMElement(com.salesforce.soap.partner.DescribeSObjectListViews.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.GetDeleted param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.GetDeleted.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.DescribeFlexiPages param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                    .addChild(param.getOMElement(com.salesforce.soap.partner.DescribeFlexiPages.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.DescribeSearchScopeOrder param, boolean optimizeContent,
            javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(
                    param.getOMElement(com.salesforce.soap.partner.DescribeSearchScopeOrder.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.DescribeSoqlListViews param, boolean optimizeContent,
            javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(
                    param.getOMElement(com.salesforce.soap.partner.DescribeSoqlListViews.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.DescribeSearchLayouts param, boolean optimizeContent,
            javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(
                    param.getOMElement(com.salesforce.soap.partner.DescribeSearchLayouts.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.Process param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.Process.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.DescribeDataCategoryGroupStructures param, boolean optimizeContent,
            javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(
                    param.getOMElement(com.salesforce.soap.partner.DescribeDataCategoryGroupStructures.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.ResetPassword param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.ResetPassword.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.DescribeGlobal param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.DescribeGlobal.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.DescribeAppMenu param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.DescribeAppMenu.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.DescribeCompactLayouts param, boolean optimizeContent,
            javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(
                    param.getOMElement(com.salesforce.soap.partner.DescribeCompactLayouts.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.DescribeApprovalLayoutE param, boolean optimizeContent,
            javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(
                    param.getOMElement(com.salesforce.soap.partner.DescribeApprovalLayoutE.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.SendEmailMessage param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.SendEmailMessage.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.DescribeLayoutE param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.DescribeLayoutE.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.DescribeTabs param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.DescribeTabs.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.DescribeKnowledgeSettings param, boolean optimizeContent,
            javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(
                    param.getOMElement(com.salesforce.soap.partner.DescribeKnowledgeSettings.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.DescribeDataCategoryGroups param, boolean optimizeContent,
            javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(
                    param.getOMElement(com.salesforce.soap.partner.DescribeDataCategoryGroups.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.GetServerTimestamp param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                    .addChild(param.getOMElement(com.salesforce.soap.partner.GetServerTimestamp.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.InvalidateSessions param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                    .addChild(param.getOMElement(com.salesforce.soap.partner.InvalidateSessions.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.DescribeSObject param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.DescribeSObject.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.Login param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.Login.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.RetrieveQuickActionTemplates param, boolean optimizeContent,
            javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(
                    param.getOMElement(com.salesforce.soap.partner.RetrieveQuickActionTemplates.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.QueryMore param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.QueryMore.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.DescribeSObjects param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.DescribeSObjects.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.EmptyRecycleBin param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.EmptyRecycleBin.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.Upsert param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.Upsert.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.ConvertLead param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.ConvertLead.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.Delete param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.salesforce.soap.partner.Delete.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
            com.salesforce.soap.partner.DescribeGlobalThemeE param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(
                    param.getOMElement(com.salesforce.soap.partner.DescribeGlobalThemeE.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

    }

    /* methods to provide back word compatibility */

    /**
     * get the default envelope
     */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory) {
        return factory.getDefaultEnvelope();
    }

    private java.lang.Object fromOM(org.apache.axiom.om.OMElement param, java.lang.Class type, java.util.Map extraNamespaces)
            throws org.apache.axis2.AxisFault {

        try {

            if (com.salesforce.soap.partner.Merge.class.equals(type)) {

                return com.salesforce.soap.partner.Merge.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.MergeResponse.class.equals(type)) {

                return com.salesforce.soap.partner.MergeResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidSObjectFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidSObjectFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidIdFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidIdFaultE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidFieldFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidFieldFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.AssignmentRuleHeader.class.equals(type)) {

                return com.salesforce.soap.partner.AssignmentRuleHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.MruHeader.class.equals(type)) {

                return com.salesforce.soap.partner.MruHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.AllowFieldTruncationHeader.class.equals(type)) {

                return com.salesforce.soap.partner.AllowFieldTruncationHeader.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DisableFeedTrackingHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DisableFeedTrackingHeader.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.StreamingEnabledHeader.class.equals(type)) {

                return com.salesforce.soap.partner.StreamingEnabledHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DuplicateRuleHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DuplicateRuleHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LocaleOptions.class.equals(type)) {

                return com.salesforce.soap.partner.LocaleOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DebuggingHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DebuggingHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.EmailHeader.class.equals(type)) {

                return com.salesforce.soap.partner.EmailHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DebuggingInfo.class.equals(type)) {

                return com.salesforce.soap.partner.DebuggingInfo.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.GetUserInfo.class.equals(type)) {

                return com.salesforce.soap.partner.GetUserInfo.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.GetUserInfoResponse.class.equals(type)) {

                return com.salesforce.soap.partner.GetUserInfoResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeAllTabs.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeAllTabs.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeAllTabsResponse.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeAllTabsResponse.Factory
                        .parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeQuickActions.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeQuickActions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeQuickActionsResponse.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeQuickActionsResponse.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LocaleOptions.class.equals(type)) {

                return com.salesforce.soap.partner.LocaleOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeSoftphoneLayout.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeSoftphoneLayout.Factory
                        .parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeSoftphoneLayoutResponse.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeSoftphoneLayoutResponse.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribePrimaryCompactLayouts.class.equals(type)) {

                return com.salesforce.soap.partner.DescribePrimaryCompactLayouts.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribePrimaryCompactLayoutsResponse.class.equals(type)) {

                return com.salesforce.soap.partner.DescribePrimaryCompactLayoutsResponse.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.ExecuteListView.class.equals(type)) {

                return com.salesforce.soap.partner.ExecuteListView.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.ExecuteListViewResponse.class.equals(type)) {

                return com.salesforce.soap.partner.ExecuteListViewResponse.Factory
                        .parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.MruHeader.class.equals(type)) {

                return com.salesforce.soap.partner.MruHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.Update.class.equals(type)) {

                return com.salesforce.soap.partner.Update.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.UpdateResponse.class.equals(type)) {

                return com.salesforce.soap.partner.UpdateResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidSObjectFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidSObjectFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidIdFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidIdFaultE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidFieldFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidFieldFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.AssignmentRuleHeader.class.equals(type)) {

                return com.salesforce.soap.partner.AssignmentRuleHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.MruHeader.class.equals(type)) {

                return com.salesforce.soap.partner.MruHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.AllowFieldTruncationHeader.class.equals(type)) {

                return com.salesforce.soap.partner.AllowFieldTruncationHeader.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DisableFeedTrackingHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DisableFeedTrackingHeader.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.StreamingEnabledHeader.class.equals(type)) {

                return com.salesforce.soap.partner.StreamingEnabledHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.AllOrNoneHeader.class.equals(type)) {

                return com.salesforce.soap.partner.AllOrNoneHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DuplicateRuleHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DuplicateRuleHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LocaleOptions.class.equals(type)) {

                return com.salesforce.soap.partner.LocaleOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DebuggingHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DebuggingHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.EmailHeader.class.equals(type)) {

                return com.salesforce.soap.partner.EmailHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.OwnerChangeOptions.class.equals(type)) {

                return com.salesforce.soap.partner.OwnerChangeOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DebuggingInfo.class.equals(type)) {

                return com.salesforce.soap.partner.DebuggingInfo.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PerformQuickActions.class.equals(type)) {

                return com.salesforce.soap.partner.PerformQuickActions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PerformQuickActionsResponse.class.equals(type)) {

                return com.salesforce.soap.partner.PerformQuickActionsResponse.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.AssignmentRuleHeader.class.equals(type)) {

                return com.salesforce.soap.partner.AssignmentRuleHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.MruHeader.class.equals(type)) {

                return com.salesforce.soap.partner.MruHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.AllowFieldTruncationHeader.class.equals(type)) {

                return com.salesforce.soap.partner.AllowFieldTruncationHeader.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DisableFeedTrackingHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DisableFeedTrackingHeader.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.StreamingEnabledHeader.class.equals(type)) {

                return com.salesforce.soap.partner.StreamingEnabledHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.AllOrNoneHeader.class.equals(type)) {

                return com.salesforce.soap.partner.AllOrNoneHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DuplicateRuleHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DuplicateRuleHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LocaleOptions.class.equals(type)) {

                return com.salesforce.soap.partner.LocaleOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DebuggingHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DebuggingHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.EmailHeader.class.equals(type)) {

                return com.salesforce.soap.partner.EmailHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.OwnerChangeOptions.class.equals(type)) {

                return com.salesforce.soap.partner.OwnerChangeOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SetPassword.class.equals(type)) {

                return com.salesforce.soap.partner.SetPassword.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SetPasswordResponse.class.equals(type)) {

                return com.salesforce.soap.partner.SetPasswordResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidIdFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidIdFaultE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidNewPasswordFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidNewPasswordFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.Logout.class.equals(type)) {

                return com.salesforce.soap.partner.Logout.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LogoutResponse.class.equals(type)) {

                return com.salesforce.soap.partner.LogoutResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.Retrieve.class.equals(type)) {

                return com.salesforce.soap.partner.Retrieve.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.RetrieveResponse.class.equals(type)) {

                return com.salesforce.soap.partner.RetrieveResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidSObjectFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidSObjectFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.MalformedQueryFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.MalformedQueryFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidIdFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidIdFaultE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidFieldFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidFieldFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.QueryOptions.class.equals(type)) {

                return com.salesforce.soap.partner.QueryOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.MruHeader.class.equals(type)) {

                return com.salesforce.soap.partner.MruHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.QueryAll.class.equals(type)) {

                return com.salesforce.soap.partner.QueryAll.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.QueryAllResponse.class.equals(type)) {

                return com.salesforce.soap.partner.QueryAllResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidSObjectFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidSObjectFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.MalformedQueryFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.MalformedQueryFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidIdFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidIdFaultE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidFieldFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidFieldFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidQueryLocatorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidQueryLocatorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.QueryOptions.class.equals(type)) {

                return com.salesforce.soap.partner.QueryOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.Undelete.class.equals(type)) {

                return com.salesforce.soap.partner.Undelete.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.UndeleteResponse.class.equals(type)) {

                return com.salesforce.soap.partner.UndeleteResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.AllowFieldTruncationHeader.class.equals(type)) {

                return com.salesforce.soap.partner.AllowFieldTruncationHeader.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DisableFeedTrackingHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DisableFeedTrackingHeader.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.StreamingEnabledHeader.class.equals(type)) {

                return com.salesforce.soap.partner.StreamingEnabledHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.AllOrNoneHeader.class.equals(type)) {

                return com.salesforce.soap.partner.AllOrNoneHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DuplicateRuleHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DuplicateRuleHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LocaleOptions.class.equals(type)) {

                return com.salesforce.soap.partner.LocaleOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DebuggingHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DebuggingHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DebuggingInfo.class.equals(type)) {

                return com.salesforce.soap.partner.DebuggingInfo.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.GetUpdated.class.equals(type)) {

                return com.salesforce.soap.partner.GetUpdated.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.GetUpdatedResponse.class.equals(type)) {

                return com.salesforce.soap.partner.GetUpdatedResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidSObjectFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidSObjectFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.Create.class.equals(type)) {

                return com.salesforce.soap.partner.Create.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CreateResponse.class.equals(type)) {

                return com.salesforce.soap.partner.CreateResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidSObjectFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidSObjectFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidIdFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidIdFaultE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidFieldFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidFieldFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.AssignmentRuleHeader.class.equals(type)) {

                return com.salesforce.soap.partner.AssignmentRuleHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.MruHeader.class.equals(type)) {

                return com.salesforce.soap.partner.MruHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.AllowFieldTruncationHeader.class.equals(type)) {

                return com.salesforce.soap.partner.AllowFieldTruncationHeader.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DisableFeedTrackingHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DisableFeedTrackingHeader.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.StreamingEnabledHeader.class.equals(type)) {

                return com.salesforce.soap.partner.StreamingEnabledHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.AllOrNoneHeader.class.equals(type)) {

                return com.salesforce.soap.partner.AllOrNoneHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DuplicateRuleHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DuplicateRuleHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LocaleOptions.class.equals(type)) {

                return com.salesforce.soap.partner.LocaleOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DebuggingHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DebuggingHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.EmailHeader.class.equals(type)) {

                return com.salesforce.soap.partner.EmailHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DebuggingInfo.class.equals(type)) {

                return com.salesforce.soap.partner.DebuggingInfo.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeAvailableQuickActions.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeAvailableQuickActions.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeAvailableQuickActionsResponse.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeAvailableQuickActionsResponse.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LocaleOptions.class.equals(type)) {

                return com.salesforce.soap.partner.LocaleOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SendEmail.class.equals(type)) {

                return com.salesforce.soap.partner.SendEmail.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SendEmailResponse.class.equals(type)) {

                return com.salesforce.soap.partner.SendEmailResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.Search.class.equals(type)) {

                return com.salesforce.soap.partner.Search.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SearchResponse.class.equals(type)) {

                return com.salesforce.soap.partner.SearchResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidSObjectFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidSObjectFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.MalformedSearchFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.MalformedSearchFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidFieldFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidFieldFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeNouns.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeNouns.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeNounsResponse.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeNounsResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LocaleOptions.class.equals(type)) {

                return com.salesforce.soap.partner.LocaleOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.Query.class.equals(type)) {

                return com.salesforce.soap.partner.Query.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.QueryResponse.class.equals(type)) {

                return com.salesforce.soap.partner.QueryResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidSObjectFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidSObjectFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.MalformedQueryFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.MalformedQueryFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidIdFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidIdFaultE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidFieldFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidFieldFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidQueryLocatorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidQueryLocatorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.QueryOptions.class.equals(type)) {

                return com.salesforce.soap.partner.QueryOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.MruHeader.class.equals(type)) {

                return com.salesforce.soap.partner.MruHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeTheme.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeTheme.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeThemeResponse.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeThemeResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeSObjectListViews.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeSObjectListViews.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeSObjectListViewsResponse.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeSObjectListViewsResponse.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidSObjectFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidSObjectFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.GetDeleted.class.equals(type)) {

                return com.salesforce.soap.partner.GetDeleted.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.GetDeletedResponse.class.equals(type)) {

                return com.salesforce.soap.partner.GetDeletedResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidSObjectFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidSObjectFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeFlexiPages.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeFlexiPages.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeFlexiPagesResponse.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeFlexiPagesResponse.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidIdFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidIdFaultE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeSearchScopeOrder.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeSearchScopeOrder.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeSearchScopeOrderResponse.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeSearchScopeOrderResponse.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeSoqlListViews.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeSoqlListViews.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeSoqlListViewsResponse.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeSoqlListViewsResponse.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidSObjectFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidSObjectFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeSearchLayouts.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeSearchLayouts.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeSearchLayoutsResponse.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeSearchLayoutsResponse.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidSObjectFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidSObjectFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.Process.class.equals(type)) {

                return com.salesforce.soap.partner.Process.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.ProcessResponse.class.equals(type)) {

                return com.salesforce.soap.partner.ProcessResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidIdFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidIdFaultE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.AllowFieldTruncationHeader.class.equals(type)) {

                return com.salesforce.soap.partner.AllowFieldTruncationHeader.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DisableFeedTrackingHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DisableFeedTrackingHeader.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.StreamingEnabledHeader.class.equals(type)) {

                return com.salesforce.soap.partner.StreamingEnabledHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DuplicateRuleHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DuplicateRuleHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LocaleOptions.class.equals(type)) {

                return com.salesforce.soap.partner.LocaleOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DebuggingHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DebuggingHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DebuggingInfo.class.equals(type)) {

                return com.salesforce.soap.partner.DebuggingInfo.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeDataCategoryGroupStructures.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeDataCategoryGroupStructures.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeDataCategoryGroupStructuresResponse.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeDataCategoryGroupStructuresResponse.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidSObjectFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidSObjectFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LocaleOptions.class.equals(type)) {

                return com.salesforce.soap.partner.LocaleOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.ResetPassword.class.equals(type)) {

                return com.salesforce.soap.partner.ResetPassword.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.ResetPasswordResponse.class.equals(type)) {

                return com.salesforce.soap.partner.ResetPasswordResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidIdFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidIdFaultE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.EmailHeader.class.equals(type)) {

                return com.salesforce.soap.partner.EmailHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeGlobal.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeGlobal.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeGlobalResponse.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeGlobalResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeAppMenu.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeAppMenu.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeAppMenuResponse.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeAppMenuResponse.Factory
                        .parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeCompactLayouts.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeCompactLayouts.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeCompactLayoutsResponse.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeCompactLayoutsResponse.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeApprovalLayoutE.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeApprovalLayoutE.Factory
                        .parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeApprovalLayoutResponse.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeApprovalLayoutResponse.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SendEmailMessage.class.equals(type)) {

                return com.salesforce.soap.partner.SendEmailMessage.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SendEmailMessageResponse.class.equals(type)) {

                return com.salesforce.soap.partner.SendEmailMessageResponse.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeLayoutE.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeLayoutE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeLayoutResponse.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeLayoutResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidSObjectFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidSObjectFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidIdFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidIdFaultE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeTabs.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeTabs.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeTabsResponse.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeTabsResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeKnowledgeSettings.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeKnowledgeSettings.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeKnowledgeSettingsResponse.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeKnowledgeSettingsResponse.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LocaleOptions.class.equals(type)) {

                return com.salesforce.soap.partner.LocaleOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeDataCategoryGroups.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeDataCategoryGroups.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeDataCategoryGroupsResponse.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeDataCategoryGroupsResponse.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidSObjectFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidSObjectFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LocaleOptions.class.equals(type)) {

                return com.salesforce.soap.partner.LocaleOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.GetServerTimestamp.class.equals(type)) {

                return com.salesforce.soap.partner.GetServerTimestamp.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.GetServerTimestampResponse.class.equals(type)) {

                return com.salesforce.soap.partner.GetServerTimestampResponse.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.InvalidateSessions.class.equals(type)) {

                return com.salesforce.soap.partner.InvalidateSessions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.InvalidateSessionsResponse.class.equals(type)) {

                return com.salesforce.soap.partner.InvalidateSessionsResponse.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeSObject.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeSObject.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeSObjectResponse.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeSObjectResponse.Factory
                        .parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidSObjectFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidSObjectFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LocaleOptions.class.equals(type)) {

                return com.salesforce.soap.partner.LocaleOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.Login.class.equals(type)) {

                return com.salesforce.soap.partner.Login.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LoginResponse.class.equals(type)) {

                return com.salesforce.soap.partner.LoginResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidIdFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidIdFaultE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.LoginFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.LoginFaultE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LoginScopeHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LoginScopeHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.RetrieveQuickActionTemplates.class.equals(type)) {

                return com.salesforce.soap.partner.RetrieveQuickActionTemplates.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.RetrieveQuickActionTemplatesResponse.class.equals(type)) {

                return com.salesforce.soap.partner.RetrieveQuickActionTemplatesResponse.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LocaleOptions.class.equals(type)) {

                return com.salesforce.soap.partner.LocaleOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.QueryMore.class.equals(type)) {

                return com.salesforce.soap.partner.QueryMore.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.QueryMoreResponse.class.equals(type)) {

                return com.salesforce.soap.partner.QueryMoreResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.MalformedQueryFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.MalformedQueryFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidFieldFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidFieldFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidQueryLocatorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidQueryLocatorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.QueryOptions.class.equals(type)) {

                return com.salesforce.soap.partner.QueryOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeSObjects.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeSObjects.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeSObjectsResponse.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeSObjectsResponse.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidSObjectFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidSObjectFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LocaleOptions.class.equals(type)) {

                return com.salesforce.soap.partner.LocaleOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.EmptyRecycleBin.class.equals(type)) {

                return com.salesforce.soap.partner.EmptyRecycleBin.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.EmptyRecycleBinResponse.class.equals(type)) {

                return com.salesforce.soap.partner.EmptyRecycleBinResponse.Factory
                        .parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.Upsert.class.equals(type)) {

                return com.salesforce.soap.partner.Upsert.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.UpsertResponse.class.equals(type)) {

                return com.salesforce.soap.partner.UpsertResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidSObjectFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidSObjectFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidIdFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidIdFaultE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.InvalidFieldFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.InvalidFieldFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.AssignmentRuleHeader.class.equals(type)) {

                return com.salesforce.soap.partner.AssignmentRuleHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.MruHeader.class.equals(type)) {

                return com.salesforce.soap.partner.MruHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.AllowFieldTruncationHeader.class.equals(type)) {

                return com.salesforce.soap.partner.AllowFieldTruncationHeader.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DisableFeedTrackingHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DisableFeedTrackingHeader.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.StreamingEnabledHeader.class.equals(type)) {

                return com.salesforce.soap.partner.StreamingEnabledHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.AllOrNoneHeader.class.equals(type)) {

                return com.salesforce.soap.partner.AllOrNoneHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DuplicateRuleHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DuplicateRuleHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LocaleOptions.class.equals(type)) {

                return com.salesforce.soap.partner.LocaleOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DebuggingHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DebuggingHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.EmailHeader.class.equals(type)) {

                return com.salesforce.soap.partner.EmailHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.OwnerChangeOptions.class.equals(type)) {

                return com.salesforce.soap.partner.OwnerChangeOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DebuggingInfo.class.equals(type)) {

                return com.salesforce.soap.partner.DebuggingInfo.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.ConvertLead.class.equals(type)) {

                return com.salesforce.soap.partner.ConvertLead.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.ConvertLeadResponse.class.equals(type)) {

                return com.salesforce.soap.partner.ConvertLeadResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.AllowFieldTruncationHeader.class.equals(type)) {

                return com.salesforce.soap.partner.AllowFieldTruncationHeader.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DisableFeedTrackingHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DisableFeedTrackingHeader.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.StreamingEnabledHeader.class.equals(type)) {

                return com.salesforce.soap.partner.StreamingEnabledHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DuplicateRuleHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DuplicateRuleHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LocaleOptions.class.equals(type)) {

                return com.salesforce.soap.partner.LocaleOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DebuggingHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DebuggingHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DebuggingInfo.class.equals(type)) {

                return com.salesforce.soap.partner.DebuggingInfo.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.Delete.class.equals(type)) {

                return com.salesforce.soap.partner.Delete.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DeleteResponse.class.equals(type)) {

                return com.salesforce.soap.partner.DeleteResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.UserTerritoryDeleteHeader.class.equals(type)) {

                return com.salesforce.soap.partner.UserTerritoryDeleteHeader.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.EmailHeader.class.equals(type)) {

                return com.salesforce.soap.partner.EmailHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.AllowFieldTruncationHeader.class.equals(type)) {

                return com.salesforce.soap.partner.AllowFieldTruncationHeader.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DisableFeedTrackingHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DisableFeedTrackingHeader.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.StreamingEnabledHeader.class.equals(type)) {

                return com.salesforce.soap.partner.StreamingEnabledHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.AllOrNoneHeader.class.equals(type)) {

                return com.salesforce.soap.partner.AllOrNoneHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DuplicateRuleHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DuplicateRuleHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LocaleOptions.class.equals(type)) {

                return com.salesforce.soap.partner.LocaleOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DebuggingHeader.class.equals(type)) {

                return com.salesforce.soap.partner.DebuggingHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DebuggingInfo.class.equals(type)) {

                return com.salesforce.soap.partner.DebuggingInfo.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeGlobalThemeE.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeGlobalThemeE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.DescribeGlobalThemeResponse.class.equals(type)) {

                return com.salesforce.soap.partner.DescribeGlobalThemeResponse.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.class.equals(type)) {

                return com.salesforce.soap.partner.fault.UnexpectedErrorFaultE.Factory.parse(param
                        .getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.SessionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.SessionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.CallOptions.class.equals(type)) {

                return com.salesforce.soap.partner.CallOptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.PackageVersionHeader.class.equals(type)) {

                return com.salesforce.soap.partner.PackageVersionHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

            if (com.salesforce.soap.partner.LimitInfoHeader.class.equals(type)) {

                return com.salesforce.soap.partner.LimitInfoHeader.Factory.parse(param.getXMLStreamReaderWithoutCaching());

            }

        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
        return null;
    }

}
