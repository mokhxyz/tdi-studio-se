<xsd:schema elementFormDefault='unqualified' targetNamespace='urn-com-amalto-xtentis-webservice' xmlns:tns='urn-com-amalto-xtentis-webservice' xmlns:xsd='http://www.w3.org/2001/XMLSchema'>
 <!-- *****************************************************
		E X T R A C T    I T E M S
		*******************************************************-->
 <xsd:complexType name='WSExtractedContent'>
  <xsd:annotation>
   <xsd:documentation>
				Content extracted using one of the ExtractUsingTransformer web service
			</xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
   <xsd:element maxOccurs='1' minOccurs='1' name='wsByteArray' nillable='true' type='tns:WSByteArray'/>
   <xsd:element maxOccurs='1' minOccurs='1' name='contentType' nillable='true' type='xsd:string'/>
  </xsd:sequence>
 </xsd:complexType>
 <xsd:element name='WSExtractedContent' type='tns:WSExtractedContent'/>
 <xsd:complexType name='WSPipeline'>
  <xsd:annotation>
   <xsd:documentation>
				The pipeline after running a transformer
			</xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
   <xsd:element maxOccurs='unbounded' minOccurs='1' name='typedContentEntry' nillable='true'>
    <xsd:complexType>
     <xsd:sequence>
      <xsd:element maxOccurs='1' minOccurs='1' name='output' nillable='true' type='xsd:string'/>
      <xsd:element maxOccurs='1' minOccurs='1' name='wsExtractedContent' nillable='true' type='tns:WSExtractedContent'/>
     </xsd:sequence>
    </xsd:complexType>
   </xsd:element>
  </xsd:sequence>
 </xsd:complexType>
 <xsd:element name='WSPipeline' type='tns:WSPipeline'/>
 <xsd:complexType name='WSExtractUsingTransformer'>
  <xsd:annotation>
   <xsd:documentation>
				Extracts data using a Transformer
			</xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
   <xsd:element maxOccurs='1' minOccurs='1' name='wsItemPK' nillable='false' type='tns:WSItemPK'/>
   <xsd:element maxOccurs='1' minOccurs='1' name='wsTransformerPK' nillable='false' type='tns:WSTransformerPK'/>
  </xsd:sequence>
 </xsd:complexType>
 <xsd:element name='WSExtractUsingTransformer' type='tns:WSExtractUsingTransformer'/>
 <xsd:complexType name='WSExtractUsingTransformerThruView'>
  <xsd:annotation>
   <xsd:documentation>
				Extract data using a Transformer and thru a View
				Data is returned in the pipeline in com.amalto.core.extract.xxx
				where xxx is sequential number starting from 1
			</xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
   <xsd:element maxOccurs='1' minOccurs='1' name='wsDataClusterPK' nillable='false' type='tns:WSDataClusterPK'/>
   <xsd:element maxOccurs='1' minOccurs='1' name='wsTransformerPK' nillable='false' type='tns:WSTransformerPK'/>
   <xsd:element maxOccurs='1' minOccurs='1' name='wsViewPK' nillable='false' type='tns:WSViewPK'/>
   <xsd:element maxOccurs='1' minOccurs='1' name='whereItem' nillable='true' type='tns:WSWhereItem'/>
   <xsd:element maxOccurs='1' minOccurs='1' name='spellTreshold' nillable='false' type='xsd:int'/>
   <xsd:element maxOccurs='1' minOccurs='1' name='skip' nillable='false' type='xsd:int'/>
   <xsd:element maxOccurs='1' minOccurs='1' name='maxItems' nillable='false' type='xsd:int'/>
   <xsd:element maxOccurs='1' minOccurs='0' name='orderBy' nillable='true' type='xsd:string'/>
   <xsd:element maxOccurs='1' minOccurs='0' name='direction' nillable='true' type='xsd:string'/>
  </xsd:sequence>
 </xsd:complexType>
 <xsd:element name='WSExtractUsingTransformerThruView' type='tns:WSExtractUsingTransformerThruView'/>
 <!-- *****************************************************
		Transformers -  DEPRECATED - Use Transformers V2
		
		*******************************************************-->
 <xsd:complexType name='WSTransformerPluginSpec'>
  <xsd:sequence>
   <xsd:element maxOccurs='1' minOccurs='1' name='PluginJNDI' nillable='false' type='xsd:string'/>
   <xsd:element maxOccurs='1' minOccurs='1' name='description' nillable='true' type='xsd:string'/>
   <xsd:element maxOccurs='1' minOccurs='1' name='input' nillable='true' type='xsd:string'/>
   <xsd:element maxOccurs='1' minOccurs='1' name='output' nillable='true' type='xsd:string'/>
   <xsd:element maxOccurs='1' minOccurs='1' name='parameters' nillable='true' type='xsd:string'/>
  </xsd:sequence>
 </xsd:complexType>
 <xsd:element name='WSTransformerPluginSpec' type='tns:WSTransformerPluginSpec'/>
 <xsd:complexType name='WSTransformer'>
  <xsd:sequence>
   <xsd:element maxOccurs='1' minOccurs='1' name='name' nillable='false' type='xsd:string'/>
   <xsd:element maxOccurs='1' minOccurs='1' name='description' nillable='true' type='xsd:string'/>
   <xsd:element maxOccurs='unbounded' minOccurs='0' name='pluginSpecs' nillable='false' type='tns:WSTransformerPluginSpec'/>
  </xsd:sequence>
 </xsd:complexType>
 <xsd:element name='WSTransformer' type='tns:WSTransformer'/>
 <xsd:complexType name='WSTransformerPK'>
  <xsd:sequence>
   <xsd:element maxOccurs='1' minOccurs='1' name='pk' nillable='false' type='xsd:string'/>
  </xsd:sequence>
 </xsd:complexType>
 <xsd:element name='WSTransformerPK' type='tns:WSTransformerPK'/>
 <xsd:complexType name='WSTransformerPKArray'>
  <xsd:sequence>
   <xsd:element maxOccurs='unbounded' minOccurs='1' name='wsTransformerPK' nillable='false' type='tns:WSTransformerPK'/>
  </xsd:sequence>
 </xsd:complexType>
 <xsd:element name='WSTransformerPKArray' type='tns:WSTransformerPKArray'/>
 <xsd:complexType name='WSGetTransformer'>
  <xsd:sequence>
   <xsd:element maxOccurs='1' minOccurs='1' name='wsTransformerPK' nillable='false' type='tns:WSTransformerPK'/>
  </xsd:sequence>
 </xsd:complexType>
 <xsd:element name='WSGetTransformer' type='tns:WSGetTransformer'/>
 <xsd:complexType name='WSExistsTransformer'>
  <xsd:sequence>
   <xsd:element maxOccurs='1' minOccurs='1' name='wsTransformerPK' nillable='false' type='tns:WSTransformerPK'/>
  </xsd:sequence>
 </xsd:complexType>
 <xsd:element name='WSExistsTransformer' type='tns:WSExistsTransformer'/>
 <xsd:complexType name='WSPutTransformer'>
  <xsd:sequence>
   <xsd:element maxOccurs='1' minOccurs='1' name='wsTransformer' nillable='false' type='tns:WSTransformer'/>
  </xsd:sequence>
 </xsd:complexType>
 <xsd:element name='WSPutTransformer' type='tns:WSPutTransformer'/>
 <xsd:complexType name='WSDeleteTransformer'>
  <xsd:sequence>
   <xsd:element maxOccurs='1' minOccurs='1' name='wsTransformerPK' nillable='false' type='tns:WSTransformerPK'/>
  </xsd:sequence>
 </xsd:complexType>
 <xsd:element name='WSDeleteTransformer' type='tns:WSDeleteTransformer'/>
 <xsd:complexType name='WSGetTransformerPKs'>
  <xsd:sequence>
   <xsd:element maxOccurs='1' minOccurs='1' name='regex' nillable='false' type='xsd:string'/>
  </xsd:sequence>
 </xsd:complexType>
 <xsd:element name='WSGetTransformerPKs' type='tns:WSGetTransformerPKs'/>
 <xsd:complexType name='WSProcessBytesUsingTransformer'>
  <xsd:annotation>
   <xsd:documentation>
				Process Bytes after transformation in a Transformer
				and using a DecisionTable for the ouput variables
			</xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
   <xsd:element maxOccurs='1' minOccurs='1' name='wsBytes' nillable='false' type='tns:WSByteArray'/>
   <xsd:element maxOccurs='1' minOccurs='1' name='contentType' nillable='true' type='xsd:string'/>
   <xsd:element maxOccurs='1' minOccurs='1' name='wsTransformerPK' nillable='false' type='tns:WSTransformerPK'/>
   <xsd:element maxOccurs='1' minOccurs='1' name='wsOutputDecisionTable' nillable='true' type='tns:WSOutputDecisionTable'/>
  </xsd:sequence>
 </xsd:complexType>
 <xsd:element name='WSProcessBytesUsingTransformer' type='tns:WSProcessBytesUsingTransformer'/>
 <xsd:complexType name='WSProcessFileUsingTransformer'>
  <xsd:annotation>
   <xsd:documentation>
				Processes the content of a local (to the data manager)  file 
				after transformation in a Transformer
				and using a DecisionTable for the ouput variables
			</xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
   <xsd:element maxOccurs='1' minOccurs='1' name='fileName' nillable='false' type='xsd:string'/>
   <xsd:element maxOccurs='1' minOccurs='1' name='contentType' nillable='true' type='xsd:string'/>
   <xsd:element maxOccurs='1' minOccurs='1' name='wsTransformerPK' nillable='false' type='tns:WSTransformerPK'/>
   <xsd:element maxOccurs='1' minOccurs='1' name='wsOutputDecisionTable' nillable='true' type='tns:WSOutputDecisionTable'/>
  </xsd:sequence>
 </xsd:complexType>
 <xsd:element name='WSProcessFileUsingTransformer' type='tns:WSProcessFileUsingTransformer'/>
 <xsd:complexType name='WSProcessBytesUsingTransformerAsBackgroundJob'>
  <xsd:annotation>
   <xsd:documentation>
				Process Bytes after transformation in a Transformer
				and using a DecisionTable for the ouput variables
				Uses a Background Job. Call getBackGroundJob to follow the Job Process
			</xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
   <xsd:element maxOccurs='1' minOccurs='1' name='wsBytes' nillable='false' type='tns:WSByteArray'/>
   <xsd:element maxOccurs='1' minOccurs='1' name='contentType' nillable='true' type='xsd:string'/>
   <xsd:element maxOccurs='1' minOccurs='1' name='wsTransformerPK' nillable='false' type='tns:WSTransformerPK'/>
   <xsd:element maxOccurs='1' minOccurs='1' name='wsOutputDecisionTable' nillable='false' type='tns:WSOutputDecisionTable'/>
  </xsd:sequence>
 </xsd:complexType>
 <xsd:element name='WSProcessBytesUsingTransformerAsBackgroundJob' type='tns:WSProcessBytesUsingTransformerAsBackgroundJob'/>
 <xsd:complexType name='WSProcessFileUsingTransformerAsBackgroundJob'>
  <xsd:annotation>
   <xsd:documentation>
				Processes the content of a local (to the data manager)  file 
				after transformation in a Transformer
				and using a DecisionTable for the ouput variables
				Uses a Background Job. Call getBackGroundJob to follow the Job Process
			</xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
   <xsd:element maxOccurs='1' minOccurs='1' name='fileName' nillable='false' type='xsd:string'/>
   <xsd:element maxOccurs='1' minOccurs='1' name='contentType' nillable='true' type='xsd:string'/>
   <xsd:element maxOccurs='1' minOccurs='1' name='wsTransformerPK' nillable='false' type='tns:WSTransformerPK'/>
   <xsd:element maxOccurs='1' minOccurs='1' name='wsOutputDecisionTable' nillable='false' type='tns:WSOutputDecisionTable'/>
  </xsd:sequence>
 </xsd:complexType>
 <xsd:element name='WSProcessFileUsingTransformerAsBackgroundJob' type='tns:WSProcessFileUsingTransformerAsBackgroundJob'/>
 <xsd:complexType name='WSOutputDecisionTable'>
  <xsd:annotation>
   <xsd:documentation>
				Used by the WSProcess...UsingTransformer
				The decision Tables specifies what happens to the ouptut variables
				NONE: the variables is present in the pipeline with its content
				DISCARD: the variable and its content is removed from the pipeline before the web service returns
				PROJECT(DataCluster,DataModel[,overwrite]): the content is projected to DataCluster after having been validated by DataModel. 
				&quot;overwrite&quot; specifies whether to overwrite an existing item and is true by default. 
				Possible values are true or false
			</xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
   <xsd:element maxOccurs='unbounded' minOccurs='1' name='decisions' nillable='false'>
    <xsd:complexType>
     <xsd:sequence>
      <xsd:element maxOccurs='1' minOccurs='1' name='outputVariableName' nillable='true' type='xsd:string'/>
      <xsd:element maxOccurs='1' minOccurs='1' name='decision' nillable='false' type='xsd:string'/>
     </xsd:sequence>
    </xsd:complexType>
   </xsd:element>
  </xsd:sequence>
 </xsd:complexType>
 <xsd:element name='WSOutputDecisionTable' type='tns:WSOutputDecisionTable'/>
</xsd:schema>